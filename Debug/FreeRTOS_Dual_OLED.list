
FreeRTOS_Dual_OLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b28  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009e0  08007cc8  08007cc8  00017cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086a8  080086a8  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  080086a8  080086a8  000186a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080086b0  080086b0  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080086b0  080086b0  000186b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080086b8  080086b8  000186b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080086bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005360  2000007c  08008738  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200053dc  08008738  000253dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c425  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003710  00000000  00000000  0003c4d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001790  00000000  00000000  0003fbe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001670  00000000  00000000  00041378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006b07  00000000  00000000  000429e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019bb2  00000000  00000000  000494ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d1a8  00000000  00000000  000630a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00100249  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e64  00000000  00000000  0010029c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007cb0 	.word	0x08007cb0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	08007cb0 	.word	0x08007cb0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <__io_putchar>:
void StartTask1(void *argument);
void StartTask2(void *argument);

/* USER CODE BEGIN PFP */
extern "C" PUTCHAR_PROTOTYPE
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 800058c:	1d39      	adds	r1, r7, #4
 800058e:	f04f 33ff 	mov.w	r3, #4294967295
 8000592:	2201      	movs	r2, #1
 8000594:	4803      	ldr	r0, [pc, #12]	; (80005a4 <__io_putchar+0x20>)
 8000596:	f002 ffc6 	bl	8003526 <HAL_UART_Transmit>
	return ch;
 800059a:	687b      	ldr	r3, [r7, #4]
}
 800059c:	4618      	mov	r0, r3
 800059e:	3708      	adds	r7, #8
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	200000ec 	.word	0x200000ec

080005a8 <_ZN4OLED15set_I2C_AddressEh>:
		uint8_t Initialized = 0;
		unsigned char current_Color = 0;
		uint8_t SSD1306_Buffer[OLED_BUFFER_SIZE];

	public:
		void set_I2C_Address(unsigned char I2C_address)
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
 80005b0:	460b      	mov	r3, r1
 80005b2:	70fb      	strb	r3, [r7, #3]
		{
			_I2C_address = I2C_address << 1;
 80005b4:	78fb      	ldrb	r3, [r7, #3]
 80005b6:	005b      	lsls	r3, r3, #1
 80005b8:	b2da      	uxtb	r2, r3
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	701a      	strb	r2, [r3, #0]
		}
 80005be:	bf00      	nop
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr

080005ca <_ZN4OLED15get_I2C_AddressEv>:
		unsigned char get_I2C_Address()
 80005ca:	b480      	push	{r7}
 80005cc:	b083      	sub	sp, #12
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	6078      	str	r0, [r7, #4]
		{
			return _I2C_address;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	781b      	ldrb	r3, [r3, #0]
		}
 80005d6:	4618      	mov	r0, r3
 80005d8:	370c      	adds	r7, #12
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
	...

080005e4 <_ZN4OLED17oled_WriteCommandEh>:

		void oled_WriteCommand(uint8_t incoming_byte)
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b086      	sub	sp, #24
 80005e8:	af04      	add	r7, sp, #16
 80005ea:	6078      	str	r0, [r7, #4]
 80005ec:	460b      	mov	r3, r1
 80005ee:	70fb      	strb	r3, [r7, #3]
//			printf("I2C address being used : 0x%.2X || command byte : 0x%.2X \r\n",
//					_I2C_address, incoming_byte);
			// 0x3c --> 0x78
			// 0x3d --> 0x7A

			oled_WriteCommand_status = HAL_I2C_Mem_Write(&OLED_I2C_PORT, _I2C_address,
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	b299      	uxth	r1, r3
 80005f6:	f04f 33ff 	mov.w	r3, #4294967295
 80005fa:	9302      	str	r3, [sp, #8]
 80005fc:	2301      	movs	r3, #1
 80005fe:	9301      	str	r3, [sp, #4]
 8000600:	1cfb      	adds	r3, r7, #3
 8000602:	9300      	str	r3, [sp, #0]
 8000604:	2301      	movs	r3, #1
 8000606:	2200      	movs	r2, #0
 8000608:	480d      	ldr	r0, [pc, #52]	; (8000640 <_ZN4OLED17oled_WriteCommandEh+0x5c>)
 800060a:	f001 fbef 	bl	8001dec <HAL_I2C_Mem_Write>
 800060e:	4603      	mov	r3, r0
 8000610:	461a      	mov	r2, r3
 8000612:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <_ZN4OLED17oled_WriteCommandEh+0x60>)
 8000614:	701a      	strb	r2, [r3, #0]
					0x00, 1, &incoming_byte, 1,
					HAL_MAX_DELAY);

			//printf("oled_WriteCommand_status : %d \r\n", oled_WriteCommand_status);

			if (oled_WriteCommand_status != HAL_OK)
 8000616:	4b0b      	ldr	r3, [pc, #44]	; (8000644 <_ZN4OLED17oled_WriteCommandEh+0x60>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d00c      	beq.n	8000638 <_ZN4OLED17oled_WriteCommandEh+0x54>
			{
				printf("ERROR TRANSMITTING I2C COMMAND : 0x%.2X  FROM 0x%.2X\r\n",
 800061e:	78fb      	ldrb	r3, [r7, #3]
 8000620:	4619      	mov	r1, r3
						incoming_byte, _I2C_address);
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	781b      	ldrb	r3, [r3, #0]
				printf("ERROR TRANSMITTING I2C COMMAND : 0x%.2X  FROM 0x%.2X\r\n",
 8000626:	461a      	mov	r2, r3
 8000628:	4807      	ldr	r0, [pc, #28]	; (8000648 <_ZN4OLED17oled_WriteCommandEh+0x64>)
 800062a:	f006 fa7d 	bl	8006b28 <iprintf>
				HAL_GPIO_WritePin(GPIOA, LED_Pin, GPIO_PIN_RESET);
 800062e:	2200      	movs	r2, #0
 8000630:	2120      	movs	r1, #32
 8000632:	4806      	ldr	r0, [pc, #24]	; (800064c <_ZN4OLED17oled_WriteCommandEh+0x68>)
 8000634:	f001 fa7c 	bl	8001b30 <HAL_GPIO_WritePin>
			}
		}
 8000638:	bf00      	nop
 800063a:	3708      	adds	r7, #8
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20000098 	.word	0x20000098
 8000644:	20000138 	.word	0x20000138
 8000648:	08007cd8 	.word	0x08007cd8
 800064c:	40020000 	.word	0x40020000

08000650 <_ZN4OLED14oled_WriteDataEPhj>:

		// Send data
		void oled_WriteData(uint8_t *buffer, size_t buff_size)
 8000650:	b580      	push	{r7, lr}
 8000652:	b088      	sub	sp, #32
 8000654:	af04      	add	r7, sp, #16
 8000656:	60f8      	str	r0, [r7, #12]
 8000658:	60b9      	str	r1, [r7, #8]
 800065a:	607a      	str	r2, [r7, #4]
		{
//			printf("I2C Address : 0x%.2X | Writing : %u | With size : 0x%d \r\n",
//					_I2C_address, buffer, buff_size);
			HAL_I2C_Mem_Write(&hi2c1, _I2C_address, 0x40, 1, buffer, buff_size,
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	b299      	uxth	r1, r3
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	b29b      	uxth	r3, r3
 8000666:	f04f 32ff 	mov.w	r2, #4294967295
 800066a:	9202      	str	r2, [sp, #8]
 800066c:	9301      	str	r3, [sp, #4]
 800066e:	68bb      	ldr	r3, [r7, #8]
 8000670:	9300      	str	r3, [sp, #0]
 8000672:	2301      	movs	r3, #1
 8000674:	2240      	movs	r2, #64	; 0x40
 8000676:	480a      	ldr	r0, [pc, #40]	; (80006a0 <_ZN4OLED14oled_WriteDataEPhj+0x50>)
 8000678:	f001 fbb8 	bl	8001dec <HAL_I2C_Mem_Write>
			HAL_MAX_DELAY);

			//printf("oled_WriteData_status : %d \r\n", oled_WriteData_status);

			if (oled_WriteData_status != HAL_OK)
 800067c:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <_ZN4OLED14oled_WriteDataEPhj+0x54>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d009      	beq.n	8000698 <_ZN4OLED14oled_WriteDataEPhj+0x48>
			{
				printf("ERROR WRITING BUFFER : %hhn FOR SIZE : %d\r\n", (buffer),
 8000684:	687a      	ldr	r2, [r7, #4]
 8000686:	68b9      	ldr	r1, [r7, #8]
 8000688:	4807      	ldr	r0, [pc, #28]	; (80006a8 <_ZN4OLED14oled_WriteDataEPhj+0x58>)
 800068a:	f006 fa4d 	bl	8006b28 <iprintf>
						buff_size);
				HAL_GPIO_WritePin(GPIOA, LED_Pin, GPIO_PIN_RESET);
 800068e:	2200      	movs	r2, #0
 8000690:	2120      	movs	r1, #32
 8000692:	4806      	ldr	r0, [pc, #24]	; (80006ac <_ZN4OLED14oled_WriteDataEPhj+0x5c>)
 8000694:	f001 fa4c 	bl	8001b30 <HAL_GPIO_WritePin>
			}
		}
 8000698:	bf00      	nop
 800069a:	3710      	adds	r7, #16
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	20000098 	.word	0x20000098
 80006a4:	20000139 	.word	0x20000139
 80006a8:	08007d10 	.word	0x08007d10
 80006ac:	40020000 	.word	0x40020000

080006b0 <_ZN4OLED9drawPixelEhh13SSD1306_COLOR>:

		void drawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
 80006b0:	b490      	push	{r4, r7}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	4608      	mov	r0, r1
 80006ba:	4611      	mov	r1, r2
 80006bc:	461a      	mov	r2, r3
 80006be:	4603      	mov	r3, r0
 80006c0:	70fb      	strb	r3, [r7, #3]
 80006c2:	460b      	mov	r3, r1
 80006c4:	70bb      	strb	r3, [r7, #2]
 80006c6:	4613      	mov	r3, r2
 80006c8:	707b      	strb	r3, [r7, #1]
		{
			if (x >= OLED_WIDTH || y >= OLED_HEIGHT)
 80006ca:	78fb      	ldrb	r3, [r7, #3]
 80006cc:	2b81      	cmp	r3, #129	; 0x81
 80006ce:	d84f      	bhi.n	8000770 <_ZN4OLED9drawPixelEhh13SSD1306_COLOR+0xc0>
 80006d0:	78bb      	ldrb	r3, [r7, #2]
 80006d2:	2b3f      	cmp	r3, #63	; 0x3f
 80006d4:	d84c      	bhi.n	8000770 <_ZN4OLED9drawPixelEhh13SSD1306_COLOR+0xc0>
				// Don't write outside the buffer
				return;
			}

			// Draw in the right color
			if (color == White)
 80006d6:	787b      	ldrb	r3, [r7, #1]
 80006d8:	2b01      	cmp	r3, #1
 80006da:	d123      	bne.n	8000724 <_ZN4OLED9drawPixelEhh13SSD1306_COLOR+0x74>
			{
				SSD1306_Buffer[x + (y / 8) * OLED_WIDTH] |= 1 << (y % 8);
 80006dc:	78fa      	ldrb	r2, [r7, #3]
 80006de:	78bb      	ldrb	r3, [r7, #2]
 80006e0:	08db      	lsrs	r3, r3, #3
 80006e2:	b2d8      	uxtb	r0, r3
 80006e4:	4601      	mov	r1, r0
 80006e6:	460b      	mov	r3, r1
 80006e8:	019b      	lsls	r3, r3, #6
 80006ea:	440b      	add	r3, r1
 80006ec:	005b      	lsls	r3, r3, #1
 80006ee:	4413      	add	r3, r2
 80006f0:	687a      	ldr	r2, [r7, #4]
 80006f2:	4413      	add	r3, r2
 80006f4:	7a1b      	ldrb	r3, [r3, #8]
 80006f6:	b25a      	sxtb	r2, r3
 80006f8:	78bb      	ldrb	r3, [r7, #2]
 80006fa:	f003 0307 	and.w	r3, r3, #7
 80006fe:	2101      	movs	r1, #1
 8000700:	fa01 f303 	lsl.w	r3, r1, r3
 8000704:	b25b      	sxtb	r3, r3
 8000706:	4313      	orrs	r3, r2
 8000708:	b25c      	sxtb	r4, r3
 800070a:	78fa      	ldrb	r2, [r7, #3]
 800070c:	4601      	mov	r1, r0
 800070e:	460b      	mov	r3, r1
 8000710:	019b      	lsls	r3, r3, #6
 8000712:	440b      	add	r3, r1
 8000714:	005b      	lsls	r3, r3, #1
 8000716:	4413      	add	r3, r2
 8000718:	b2e1      	uxtb	r1, r4
 800071a:	687a      	ldr	r2, [r7, #4]
 800071c:	4413      	add	r3, r2
 800071e:	460a      	mov	r2, r1
 8000720:	721a      	strb	r2, [r3, #8]
 8000722:	e026      	b.n	8000772 <_ZN4OLED9drawPixelEhh13SSD1306_COLOR+0xc2>

			}
			else
			{
				SSD1306_Buffer[x + (y / 8) * OLED_WIDTH] &= ~(1 << (y % 8));
 8000724:	78fa      	ldrb	r2, [r7, #3]
 8000726:	78bb      	ldrb	r3, [r7, #2]
 8000728:	08db      	lsrs	r3, r3, #3
 800072a:	b2d8      	uxtb	r0, r3
 800072c:	4601      	mov	r1, r0
 800072e:	460b      	mov	r3, r1
 8000730:	019b      	lsls	r3, r3, #6
 8000732:	440b      	add	r3, r1
 8000734:	005b      	lsls	r3, r3, #1
 8000736:	4413      	add	r3, r2
 8000738:	687a      	ldr	r2, [r7, #4]
 800073a:	4413      	add	r3, r2
 800073c:	7a1b      	ldrb	r3, [r3, #8]
 800073e:	b25a      	sxtb	r2, r3
 8000740:	78bb      	ldrb	r3, [r7, #2]
 8000742:	f003 0307 	and.w	r3, r3, #7
 8000746:	2101      	movs	r1, #1
 8000748:	fa01 f303 	lsl.w	r3, r1, r3
 800074c:	b25b      	sxtb	r3, r3
 800074e:	43db      	mvns	r3, r3
 8000750:	b25b      	sxtb	r3, r3
 8000752:	4013      	ands	r3, r2
 8000754:	b25c      	sxtb	r4, r3
 8000756:	78fa      	ldrb	r2, [r7, #3]
 8000758:	4601      	mov	r1, r0
 800075a:	460b      	mov	r3, r1
 800075c:	019b      	lsls	r3, r3, #6
 800075e:	440b      	add	r3, r1
 8000760:	005b      	lsls	r3, r3, #1
 8000762:	4413      	add	r3, r2
 8000764:	b2e1      	uxtb	r1, r4
 8000766:	687a      	ldr	r2, [r7, #4]
 8000768:	4413      	add	r3, r2
 800076a:	460a      	mov	r2, r1
 800076c:	721a      	strb	r2, [r3, #8]
 800076e:	e000      	b.n	8000772 <_ZN4OLED9drawPixelEhh13SSD1306_COLOR+0xc2>
				return;
 8000770:	bf00      	nop

			}
		}
 8000772:	3708      	adds	r7, #8
 8000774:	46bd      	mov	sp, r7
 8000776:	bc90      	pop	{r4, r7}
 8000778:	4770      	bx	lr

0800077a <_ZN4OLED9writeCharEc7FontDef13SSD1306_COLOR>:

		char writeChar(char ch, FontDef Font, SSD1306_COLOR color)
 800077a:	b580      	push	{r7, lr}
 800077c:	b088      	sub	sp, #32
 800077e:	af00      	add	r7, sp, #0
 8000780:	60f8      	str	r0, [r7, #12]
 8000782:	4608      	mov	r0, r1
 8000784:	4639      	mov	r1, r7
 8000786:	e881 000c 	stmia.w	r1, {r2, r3}
 800078a:	4603      	mov	r3, r0
 800078c:	72fb      	strb	r3, [r7, #11]
		{
			uint32_t i, b, j;
			// Check if character is valid
			if (ch < 32 || ch > 126)
 800078e:	7afb      	ldrb	r3, [r7, #11]
 8000790:	2b1f      	cmp	r3, #31
 8000792:	d902      	bls.n	800079a <_ZN4OLED9writeCharEc7FontDef13SSD1306_COLOR+0x20>
 8000794:	7afb      	ldrb	r3, [r7, #11]
 8000796:	2b7e      	cmp	r3, #126	; 0x7e
 8000798:	d901      	bls.n	800079e <_ZN4OLED9writeCharEc7FontDef13SSD1306_COLOR+0x24>
				return 0;
 800079a:	2300      	movs	r3, #0
 800079c:	e06f      	b.n	800087e <_ZN4OLED9writeCharEc7FontDef13SSD1306_COLOR+0x104>

			// Check remaining space on current line
			if (OLED_WIDTH < (CurrentX + Font.FontWidth) ||
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	885b      	ldrh	r3, [r3, #2]
 80007a2:	461a      	mov	r2, r3
 80007a4:	783b      	ldrb	r3, [r7, #0]
 80007a6:	4413      	add	r3, r2
 80007a8:	2b82      	cmp	r3, #130	; 0x82
 80007aa:	dc06      	bgt.n	80007ba <_ZN4OLED9writeCharEc7FontDef13SSD1306_COLOR+0x40>
			OLED_HEIGHT < (CurrentY + Font.FontHeight))
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	889b      	ldrh	r3, [r3, #4]
 80007b0:	461a      	mov	r2, r3
 80007b2:	787b      	ldrb	r3, [r7, #1]
 80007b4:	4413      	add	r3, r2
			if (OLED_WIDTH < (CurrentX + Font.FontWidth) ||
 80007b6:	2b40      	cmp	r3, #64	; 0x40
 80007b8:	dd01      	ble.n	80007be <_ZN4OLED9writeCharEc7FontDef13SSD1306_COLOR+0x44>
			{
				// Not enough space on current line
				return 0;
 80007ba:	2300      	movs	r3, #0
 80007bc:	e05f      	b.n	800087e <_ZN4OLED9writeCharEc7FontDef13SSD1306_COLOR+0x104>
			}

			// This is being skipped since Font Width and Height == 0
			// Use the font to write
			for (i = 0; i < Font.FontHeight; i++)
 80007be:	2300      	movs	r3, #0
 80007c0:	61fb      	str	r3, [r7, #28]
 80007c2:	787b      	ldrb	r3, [r7, #1]
 80007c4:	461a      	mov	r2, r3
 80007c6:	69fb      	ldr	r3, [r7, #28]
 80007c8:	4293      	cmp	r3, r2
 80007ca:	d24f      	bcs.n	800086c <_ZN4OLED9writeCharEc7FontDef13SSD1306_COLOR+0xf2>
			{
				b = Font.data[(ch - 32) * Font.FontHeight + i];
 80007cc:	687a      	ldr	r2, [r7, #4]
 80007ce:	7afb      	ldrb	r3, [r7, #11]
 80007d0:	3b20      	subs	r3, #32
 80007d2:	7879      	ldrb	r1, [r7, #1]
 80007d4:	fb01 f303 	mul.w	r3, r1, r3
 80007d8:	4619      	mov	r1, r3
 80007da:	69fb      	ldr	r3, [r7, #28]
 80007dc:	440b      	add	r3, r1
 80007de:	005b      	lsls	r3, r3, #1
 80007e0:	4413      	add	r3, r2
 80007e2:	881b      	ldrh	r3, [r3, #0]
 80007e4:	617b      	str	r3, [r7, #20]
				for (j = 0; j < Font.FontWidth; j++)
 80007e6:	2300      	movs	r3, #0
 80007e8:	61bb      	str	r3, [r7, #24]
 80007ea:	783b      	ldrb	r3, [r7, #0]
 80007ec:	461a      	mov	r2, r3
 80007ee:	69bb      	ldr	r3, [r7, #24]
 80007f0:	4293      	cmp	r3, r2
 80007f2:	d237      	bcs.n	8000864 <_ZN4OLED9writeCharEc7FontDef13SSD1306_COLOR+0xea>
				{
					if ((b << j) & 0x8000)
 80007f4:	697a      	ldr	r2, [r7, #20]
 80007f6:	69bb      	ldr	r3, [r7, #24]
 80007f8:	fa02 f303 	lsl.w	r3, r2, r3
 80007fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000800:	2b00      	cmp	r3, #0
 8000802:	d013      	beq.n	800082c <_ZN4OLED9writeCharEc7FontDef13SSD1306_COLOR+0xb2>
					{
						drawPixel(CurrentX + j, (CurrentY + i), (SSD1306_COLOR) color);
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	885b      	ldrh	r3, [r3, #2]
 8000808:	b2da      	uxtb	r2, r3
 800080a:	69bb      	ldr	r3, [r7, #24]
 800080c:	b2db      	uxtb	r3, r3
 800080e:	4413      	add	r3, r2
 8000810:	b2d9      	uxtb	r1, r3
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	889b      	ldrh	r3, [r3, #4]
 8000816:	b2da      	uxtb	r2, r3
 8000818:	69fb      	ldr	r3, [r7, #28]
 800081a:	b2db      	uxtb	r3, r3
 800081c:	4413      	add	r3, r2
 800081e:	b2da      	uxtb	r2, r3
 8000820:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000824:	68f8      	ldr	r0, [r7, #12]
 8000826:	f7ff ff43 	bl	80006b0 <_ZN4OLED9drawPixelEhh13SSD1306_COLOR>
 800082a:	e017      	b.n	800085c <_ZN4OLED9writeCharEc7FontDef13SSD1306_COLOR+0xe2>
					}
					else
					{
						drawPixel(CurrentX + j, (CurrentY + i), (SSD1306_COLOR) !color);
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	885b      	ldrh	r3, [r3, #2]
 8000830:	b2da      	uxtb	r2, r3
 8000832:	69bb      	ldr	r3, [r7, #24]
 8000834:	b2db      	uxtb	r3, r3
 8000836:	4413      	add	r3, r2
 8000838:	b2d9      	uxtb	r1, r3
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	889b      	ldrh	r3, [r3, #4]
 800083e:	b2da      	uxtb	r2, r3
 8000840:	69fb      	ldr	r3, [r7, #28]
 8000842:	b2db      	uxtb	r3, r3
 8000844:	4413      	add	r3, r2
 8000846:	b2da      	uxtb	r2, r3
 8000848:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800084c:	2b00      	cmp	r3, #0
 800084e:	bf0c      	ite	eq
 8000850:	2301      	moveq	r3, #1
 8000852:	2300      	movne	r3, #0
 8000854:	b2db      	uxtb	r3, r3
 8000856:	68f8      	ldr	r0, [r7, #12]
 8000858:	f7ff ff2a 	bl	80006b0 <_ZN4OLED9drawPixelEhh13SSD1306_COLOR>
				for (j = 0; j < Font.FontWidth; j++)
 800085c:	69bb      	ldr	r3, [r7, #24]
 800085e:	3301      	adds	r3, #1
 8000860:	61bb      	str	r3, [r7, #24]
 8000862:	e7c2      	b.n	80007ea <_ZN4OLED9writeCharEc7FontDef13SSD1306_COLOR+0x70>
			for (i = 0; i < Font.FontHeight; i++)
 8000864:	69fb      	ldr	r3, [r7, #28]
 8000866:	3301      	adds	r3, #1
 8000868:	61fb      	str	r3, [r7, #28]
 800086a:	e7aa      	b.n	80007c2 <_ZN4OLED9writeCharEc7FontDef13SSD1306_COLOR+0x48>
					}
				}
			}

			// The current space is now taken
			CurrentX += Font.FontWidth;
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	885a      	ldrh	r2, [r3, #2]
 8000870:	783b      	ldrb	r3, [r7, #0]
 8000872:	b29b      	uxth	r3, r3
 8000874:	4413      	add	r3, r2
 8000876:	b29a      	uxth	r2, r3
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	805a      	strh	r2, [r3, #2]

			// Return written char for validation
			return ch;
 800087c:	7afb      	ldrb	r3, [r7, #11]
		}
 800087e:	4618      	mov	r0, r3
 8000880:	3720      	adds	r7, #32
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
	...

08000888 <_ZN4OLED11writeStringEPc7FontDef13SSD1306_COLOR>:

		char writeString(char *str, FontDef Font, SSD1306_COLOR color)
 8000888:	b580      	push	{r7, lr}
 800088a:	b086      	sub	sp, #24
 800088c:	af02      	add	r7, sp, #8
 800088e:	60f8      	str	r0, [r7, #12]
 8000890:	60b9      	str	r1, [r7, #8]
 8000892:	4639      	mov	r1, r7
 8000894:	e881 000c 	stmia.w	r1, {r2, r3}
		{
			// Write until null-byte
			while (*str)
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d027      	beq.n	80008f0 <_ZN4OLED11writeStringEPc7FontDef13SSD1306_COLOR+0x68>
			{
				HAL_GPIO_WritePin(GPIOA, LED_Pin, GPIO_PIN_RESET);
 80008a0:	2200      	movs	r2, #0
 80008a2:	2120      	movs	r1, #32
 80008a4:	4815      	ldr	r0, [pc, #84]	; (80008fc <_ZN4OLED11writeStringEPc7FontDef13SSD1306_COLOR+0x74>)
 80008a6:	f001 f943 	bl	8001b30 <HAL_GPIO_WritePin>
				if (writeChar(*str, Font, color) != *str)
 80008aa:	68bb      	ldr	r3, [r7, #8]
 80008ac:	7819      	ldrb	r1, [r3, #0]
 80008ae:	7e3b      	ldrb	r3, [r7, #24]
 80008b0:	9300      	str	r3, [sp, #0]
 80008b2:	463b      	mov	r3, r7
 80008b4:	cb0c      	ldmia	r3, {r2, r3}
 80008b6:	68f8      	ldr	r0, [r7, #12]
 80008b8:	f7ff ff5f 	bl	800077a <_ZN4OLED9writeCharEc7FontDef13SSD1306_COLOR>
 80008bc:	4603      	mov	r3, r0
 80008be:	461a      	mov	r2, r3
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	429a      	cmp	r2, r3
 80008c6:	bf14      	ite	ne
 80008c8:	2301      	movne	r3, #1
 80008ca:	2300      	moveq	r3, #0
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d005      	beq.n	80008de <_ZN4OLED11writeStringEPc7FontDef13SSD1306_COLOR+0x56>
				{
					// Char could not be written
					printf("CHAR COULDN'T BE WRITTEN \r\n");
 80008d2:	480b      	ldr	r0, [pc, #44]	; (8000900 <_ZN4OLED11writeStringEPc7FontDef13SSD1306_COLOR+0x78>)
 80008d4:	f006 f9ae 	bl	8006c34 <puts>
					return *str;
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	e00a      	b.n	80008f4 <_ZN4OLED11writeStringEPc7FontDef13SSD1306_COLOR+0x6c>
				}
				str++;
 80008de:	68bb      	ldr	r3, [r7, #8]
 80008e0:	3301      	adds	r3, #1
 80008e2:	60bb      	str	r3, [r7, #8]
				HAL_GPIO_WritePin(GPIOA, LED_Pin, GPIO_PIN_SET);
 80008e4:	2201      	movs	r2, #1
 80008e6:	2120      	movs	r1, #32
 80008e8:	4804      	ldr	r0, [pc, #16]	; (80008fc <_ZN4OLED11writeStringEPc7FontDef13SSD1306_COLOR+0x74>)
 80008ea:	f001 f921 	bl	8001b30 <HAL_GPIO_WritePin>
			while (*str)
 80008ee:	e7d3      	b.n	8000898 <_ZN4OLED11writeStringEPc7FontDef13SSD1306_COLOR+0x10>
			}
			return *str;
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	781b      	ldrb	r3, [r3, #0]
		}
 80008f4:	4618      	mov	r0, r3
 80008f6:	3710      	adds	r7, #16
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	40020000 	.word	0x40020000
 8000900:	08007d3c 	.word	0x08007d3c

08000904 <_ZN4OLED9SetCursorEhh>:

		void SetCursor(uint8_t x, uint8_t y)
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	460b      	mov	r3, r1
 800090e:	70fb      	strb	r3, [r7, #3]
 8000910:	4613      	mov	r3, r2
 8000912:	70bb      	strb	r3, [r7, #2]
		{
			CurrentX = x;
 8000914:	78fb      	ldrb	r3, [r7, #3]
 8000916:	b29a      	uxth	r2, r3
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	805a      	strh	r2, [r3, #2]
			CurrentY = y;
 800091c:	78bb      	ldrb	r3, [r7, #2]
 800091e:	b29a      	uxth	r2, r3
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	809a      	strh	r2, [r3, #4]
		}
 8000924:	bf00      	nop
 8000926:	370c      	adds	r7, #12
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr

08000930 <_ZN4OLED10fillScreenE13SSD1306_COLOR>:

		void fillScreen(SSD1306_COLOR color)
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
 8000938:	460b      	mov	r3, r1
 800093a:	70fb      	strb	r3, [r7, #3]
		{
			//Set current color
			set_Color(color);
 800093c:	78fb      	ldrb	r3, [r7, #3]
 800093e:	4619      	mov	r1, r3
 8000940:	6878      	ldr	r0, [r7, #4]
 8000942:	f000 f847 	bl	80009d4 <_ZN4OLED9set_ColorE13SSD1306_COLOR>

			/* Set memory */
			uint32_t i;

			for (i = 0; i < sizeof(SSD1306_Buffer); i++)
 8000946:	2300      	movs	r3, #0
 8000948:	60fb      	str	r3, [r7, #12]
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 8000950:	d20f      	bcs.n	8000972 <_ZN4OLED10fillScreenE13SSD1306_COLOR+0x42>
			{
				SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000952:	78fb      	ldrb	r3, [r7, #3]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d101      	bne.n	800095c <_ZN4OLED10fillScreenE13SSD1306_COLOR+0x2c>
 8000958:	2100      	movs	r1, #0
 800095a:	e000      	b.n	800095e <_ZN4OLED10fillScreenE13SSD1306_COLOR+0x2e>
 800095c:	21ff      	movs	r1, #255	; 0xff
 800095e:	687a      	ldr	r2, [r7, #4]
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	4413      	add	r3, r2
 8000964:	3308      	adds	r3, #8
 8000966:	460a      	mov	r2, r1
 8000968:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < sizeof(SSD1306_Buffer); i++)
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	3301      	adds	r3, #1
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	e7eb      	b.n	800094a <_ZN4OLED10fillScreenE13SSD1306_COLOR+0x1a>
			}
		}
 8000972:	bf00      	nop
 8000974:	3710      	adds	r7, #16
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}

0800097a <_ZN4OLED12updateScreenEv>:
		void updateScreen()
 800097a:	b580      	push	{r7, lr}
 800097c:	b084      	sub	sp, #16
 800097e:	af00      	add	r7, sp, #0
 8000980:	6078      	str	r0, [r7, #4]
			// depends on the screen height:
			//
			//  * 32px   ==  4 pages
			//  * 64px   ==  8 pages
			//  * 128px  ==  16 pages
			for (uint8_t i = 0; i < OLED_HEIGHT / 8; i++)
 8000982:	2300      	movs	r3, #0
 8000984:	73fb      	strb	r3, [r7, #15]
 8000986:	7bfb      	ldrb	r3, [r7, #15]
 8000988:	2b07      	cmp	r3, #7
 800098a:	d81f      	bhi.n	80009cc <_ZN4OLED12updateScreenEv+0x52>
			{
				// Set the current RAM page address.
				oled_WriteCommand(0xB0 + i);
 800098c:	7bfb      	ldrb	r3, [r7, #15]
 800098e:	3b50      	subs	r3, #80	; 0x50
 8000990:	b2db      	uxtb	r3, r3
 8000992:	4619      	mov	r1, r3
 8000994:	6878      	ldr	r0, [r7, #4]
 8000996:	f7ff fe25 	bl	80005e4 <_ZN4OLED17oled_WriteCommandEh>

				// Set column address 4 lower bits
				oled_WriteCommand(0x00 + X_OFFSET_LOWER);
 800099a:	2100      	movs	r1, #0
 800099c:	6878      	ldr	r0, [r7, #4]
 800099e:	f7ff fe21 	bl	80005e4 <_ZN4OLED17oled_WriteCommandEh>

				// Set column address 4 higher bits
				oled_WriteCommand(0x10 + X_OFFSET_UPPER);
 80009a2:	2110      	movs	r1, #16
 80009a4:	6878      	ldr	r0, [r7, #4]
 80009a6:	f7ff fe1d 	bl	80005e4 <_ZN4OLED17oled_WriteCommandEh>

				oled_WriteData(&SSD1306_Buffer[OLED_WIDTH * i], OLED_WIDTH);
 80009aa:	7bfa      	ldrb	r2, [r7, #15]
 80009ac:	4613      	mov	r3, r2
 80009ae:	019b      	lsls	r3, r3, #6
 80009b0:	4413      	add	r3, r2
 80009b2:	005b      	lsls	r3, r3, #1
 80009b4:	3308      	adds	r3, #8
 80009b6:	687a      	ldr	r2, [r7, #4]
 80009b8:	4413      	add	r3, r2
 80009ba:	2282      	movs	r2, #130	; 0x82
 80009bc:	4619      	mov	r1, r3
 80009be:	6878      	ldr	r0, [r7, #4]
 80009c0:	f7ff fe46 	bl	8000650 <_ZN4OLED14oled_WriteDataEPhj>
			for (uint8_t i = 0; i < OLED_HEIGHT / 8; i++)
 80009c4:	7bfb      	ldrb	r3, [r7, #15]
 80009c6:	3301      	adds	r3, #1
 80009c8:	73fb      	strb	r3, [r7, #15]
 80009ca:	e7dc      	b.n	8000986 <_ZN4OLED12updateScreenEv+0xc>
				//printf("Buffer1 : %c \r\n", SSD1306_Buffer[i]);
			}
		}
 80009cc:	bf00      	nop
 80009ce:	3710      	adds	r7, #16
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <_ZN4OLED9set_ColorE13SSD1306_COLOR>:

		void set_Color(SSD1306_COLOR color)
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
 80009dc:	460b      	mov	r3, r1
 80009de:	70fb      	strb	r3, [r7, #3]
		{
			current_Color = color;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	78fa      	ldrb	r2, [r7, #3]
 80009e4:	71da      	strb	r2, [r3, #7]
		}
 80009e6:	bf00      	nop
 80009e8:	370c      	adds	r7, #12
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr

080009f2 <_Z17init_OLED_ScreensR4OLEDS0_>:
		}

};

void init_OLED_Screens(OLED &oled1, OLED &oled2)
{
 80009f2:	b580      	push	{r7, lr}
 80009f4:	b082      	sub	sp, #8
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	6078      	str	r0, [r7, #4]
 80009fa:	6039      	str	r1, [r7, #0]
	// Set display OFF
	oled1.oled_WriteCommand(0xAE);
 80009fc:	21ae      	movs	r1, #174	; 0xae
 80009fe:	6878      	ldr	r0, [r7, #4]
 8000a00:	f7ff fdf0 	bl	80005e4 <_ZN4OLED17oled_WriteCommandEh>
	oled2.oled_WriteCommand(0xAE);
 8000a04:	21ae      	movs	r1, #174	; 0xae
 8000a06:	6838      	ldr	r0, [r7, #0]
 8000a08:	f7ff fdec 	bl	80005e4 <_ZN4OLED17oled_WriteCommandEh>

	// Set Memory Addressing Mode
	oled1.oled_WriteCommand(0x20);
 8000a0c:	2120      	movs	r1, #32
 8000a0e:	6878      	ldr	r0, [r7, #4]
 8000a10:	f7ff fde8 	bl	80005e4 <_ZN4OLED17oled_WriteCommandEh>
	oled2.oled_WriteCommand(0x20);
 8000a14:	2120      	movs	r1, #32
 8000a16:	6838      	ldr	r0, [r7, #0]
 8000a18:	f7ff fde4 	bl	80005e4 <_ZN4OLED17oled_WriteCommandEh>

	// 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
	// 10b,Page Addressing Mode (RESET); 11b,Invalid
	oled1.oled_WriteCommand(0x00);
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	6878      	ldr	r0, [r7, #4]
 8000a20:	f7ff fde0 	bl	80005e4 <_ZN4OLED17oled_WriteCommandEh>
	oled2.oled_WriteCommand(0x00);
 8000a24:	2100      	movs	r1, #0
 8000a26:	6838      	ldr	r0, [r7, #0]
 8000a28:	f7ff fddc 	bl	80005e4 <_ZN4OLED17oled_WriteCommandEh>

	// Set Page Start Address for Page Addressing Mode,0-7
	oled1.oled_WriteCommand(0xB0);
 8000a2c:	21b0      	movs	r1, #176	; 0xb0
 8000a2e:	6878      	ldr	r0, [r7, #4]
 8000a30:	f7ff fdd8 	bl	80005e4 <_ZN4OLED17oled_WriteCommandEh>
	oled2.oled_WriteCommand(0xB0);
 8000a34:	21b0      	movs	r1, #176	; 0xb0
 8000a36:	6838      	ldr	r0, [r7, #0]
 8000a38:	f7ff fdd4 	bl	80005e4 <_ZN4OLED17oled_WriteCommandEh>

	// Set COM Output Scan Direction
	oled1.oled_WriteCommand(0xC8);
 8000a3c:	21c8      	movs	r1, #200	; 0xc8
 8000a3e:	6878      	ldr	r0, [r7, #4]
 8000a40:	f7ff fdd0 	bl	80005e4 <_ZN4OLED17oled_WriteCommandEh>
	oled2.oled_WriteCommand(0xC8);
 8000a44:	21c8      	movs	r1, #200	; 0xc8
 8000a46:	6838      	ldr	r0, [r7, #0]
 8000a48:	f7ff fdcc 	bl	80005e4 <_ZN4OLED17oled_WriteCommandEh>

	//---set low column address
	oled1.oled_WriteCommand(0x00);
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	6878      	ldr	r0, [r7, #4]
 8000a50:	f7ff fdc8 	bl	80005e4 <_ZN4OLED17oled_WriteCommandEh>
	oled2.oled_WriteCommand(0x00);
 8000a54:	2100      	movs	r1, #0
 8000a56:	6838      	ldr	r0, [r7, #0]
 8000a58:	f7ff fdc4 	bl	80005e4 <_ZN4OLED17oled_WriteCommandEh>

	//---set high column address
	oled1.oled_WriteCommand(0x10);
 8000a5c:	2110      	movs	r1, #16
 8000a5e:	6878      	ldr	r0, [r7, #4]
 8000a60:	f7ff fdc0 	bl	80005e4 <_ZN4OLED17oled_WriteCommandEh>
	oled2.oled_WriteCommand(0x10);
 8000a64:	2110      	movs	r1, #16
 8000a66:	6838      	ldr	r0, [r7, #0]
 8000a68:	f7ff fdbc 	bl	80005e4 <_ZN4OLED17oled_WriteCommandEh>

	//--set start line address - CHECK
	oled1.oled_WriteCommand(0x40);
 8000a6c:	2140      	movs	r1, #64	; 0x40
 8000a6e:	6878      	ldr	r0, [r7, #4]
 8000a70:	f7ff fdb8 	bl	80005e4 <_ZN4OLED17oled_WriteCommandEh>
	oled2.oled_WriteCommand(0x40);
 8000a74:	2140      	movs	r1, #64	; 0x40
 8000a76:	6838      	ldr	r0, [r7, #0]
 8000a78:	f7ff fdb4 	bl	80005e4 <_ZN4OLED17oled_WriteCommandEh>
//	const uint8_t kSetContrastControlRegister = 0x81;
//	oled1.oled_WriteCommand(kSetContrastControlRegister);
//	oled2.oled_WriteCommand(kSetContrastControlRegister);

	//const uint16_t = 0xFF;
	oled1.oled_WriteCommand(0xFF);
 8000a7c:	21ff      	movs	r1, #255	; 0xff
 8000a7e:	6878      	ldr	r0, [r7, #4]
 8000a80:	f7ff fdb0 	bl	80005e4 <_ZN4OLED17oled_WriteCommandEh>
	oled2.oled_WriteCommand(0xFF);
 8000a84:	21ff      	movs	r1, #255	; 0xff
 8000a86:	6838      	ldr	r0, [r7, #0]
 8000a88:	f7ff fdac 	bl	80005e4 <_ZN4OLED17oled_WriteCommandEh>

	//--set segment re-map 0 to 127 - CHECK
	oled1.oled_WriteCommand(0xA1);
 8000a8c:	21a1      	movs	r1, #161	; 0xa1
 8000a8e:	6878      	ldr	r0, [r7, #4]
 8000a90:	f7ff fda8 	bl	80005e4 <_ZN4OLED17oled_WriteCommandEh>
	oled2.oled_WriteCommand(0xA1);
 8000a94:	21a1      	movs	r1, #161	; 0xa1
 8000a96:	6838      	ldr	r0, [r7, #0]
 8000a98:	f7ff fda4 	bl	80005e4 <_ZN4OLED17oled_WriteCommandEh>

	//--set normal color
	oled1.oled_WriteCommand(0xA6);
 8000a9c:	21a6      	movs	r1, #166	; 0xa6
 8000a9e:	6878      	ldr	r0, [r7, #4]
 8000aa0:	f7ff fda0 	bl	80005e4 <_ZN4OLED17oled_WriteCommandEh>
	oled2.oled_WriteCommand(0xA6);
 8000aa4:	21a6      	movs	r1, #166	; 0xa6
 8000aa6:	6838      	ldr	r0, [r7, #0]
 8000aa8:	f7ff fd9c 	bl	80005e4 <_ZN4OLED17oled_WriteCommandEh>

	//ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
	//--set multiplex ratio(1 to 64) - CHECK
	oled1.oled_WriteCommand(0xA8);
 8000aac:	21a8      	movs	r1, #168	; 0xa8
 8000aae:	6878      	ldr	r0, [r7, #4]
 8000ab0:	f7ff fd98 	bl	80005e4 <_ZN4OLED17oled_WriteCommandEh>
	oled2.oled_WriteCommand(0xA8);
 8000ab4:	21a8      	movs	r1, #168	; 0xa8
 8000ab6:	6838      	ldr	r0, [r7, #0]
 8000ab8:	f7ff fd94 	bl	80005e4 <_ZN4OLED17oled_WriteCommandEh>

	// Set multiplex ratio. 128 x 64
//	oled1.oled_WriteCommand(0xFF);
//	oled2.oled_WriteCommand(0xFF);
	oled1.oled_WriteCommand(0x3F);
 8000abc:	213f      	movs	r1, #63	; 0x3f
 8000abe:	6878      	ldr	r0, [r7, #4]
 8000ac0:	f7ff fd90 	bl	80005e4 <_ZN4OLED17oled_WriteCommandEh>
	oled2.oled_WriteCommand(0x3F);
 8000ac4:	213f      	movs	r1, #63	; 0x3f
 8000ac6:	6838      	ldr	r0, [r7, #0]
 8000ac8:	f7ff fd8c 	bl	80005e4 <_ZN4OLED17oled_WriteCommandEh>

	//0xa4,Output follows RAM content;0xa5,Output ignores RAM content
	oled1.oled_WriteCommand(0xA4);
 8000acc:	21a4      	movs	r1, #164	; 0xa4
 8000ace:	6878      	ldr	r0, [r7, #4]
 8000ad0:	f7ff fd88 	bl	80005e4 <_ZN4OLED17oled_WriteCommandEh>
	oled2.oled_WriteCommand(0xA4);
 8000ad4:	21a4      	movs	r1, #164	; 0xa4
 8000ad6:	6838      	ldr	r0, [r7, #0]
 8000ad8:	f7ff fd84 	bl	80005e4 <_ZN4OLED17oled_WriteCommandEh>

	//-set display offset - CHECK
	oled1.oled_WriteCommand(0xD3);
 8000adc:	21d3      	movs	r1, #211	; 0xd3
 8000ade:	6878      	ldr	r0, [r7, #4]
 8000ae0:	f7ff fd80 	bl	80005e4 <_ZN4OLED17oled_WriteCommandEh>
	oled2.oled_WriteCommand(0xD3);
 8000ae4:	21d3      	movs	r1, #211	; 0xd3
 8000ae6:	6838      	ldr	r0, [r7, #0]
 8000ae8:	f7ff fd7c 	bl	80005e4 <_ZN4OLED17oled_WriteCommandEh>

	//-not offset
	oled1.oled_WriteCommand(0x00);
 8000aec:	2100      	movs	r1, #0
 8000aee:	6878      	ldr	r0, [r7, #4]
 8000af0:	f7ff fd78 	bl	80005e4 <_ZN4OLED17oled_WriteCommandEh>
	oled2.oled_WriteCommand(0x00);
 8000af4:	2100      	movs	r1, #0
 8000af6:	6838      	ldr	r0, [r7, #0]
 8000af8:	f7ff fd74 	bl	80005e4 <_ZN4OLED17oled_WriteCommandEh>

	//--set display clock divide ratio/oscillator frequency
	oled1.oled_WriteCommand(0xD5);
 8000afc:	21d5      	movs	r1, #213	; 0xd5
 8000afe:	6878      	ldr	r0, [r7, #4]
 8000b00:	f7ff fd70 	bl	80005e4 <_ZN4OLED17oled_WriteCommandEh>
	oled2.oled_WriteCommand(0xD5);
 8000b04:	21d5      	movs	r1, #213	; 0xd5
 8000b06:	6838      	ldr	r0, [r7, #0]
 8000b08:	f7ff fd6c 	bl	80005e4 <_ZN4OLED17oled_WriteCommandEh>

	//--set divide ratio
	oled1.oled_WriteCommand(0xF0);
 8000b0c:	21f0      	movs	r1, #240	; 0xf0
 8000b0e:	6878      	ldr	r0, [r7, #4]
 8000b10:	f7ff fd68 	bl	80005e4 <_ZN4OLED17oled_WriteCommandEh>
	oled2.oled_WriteCommand(0xF0);
 8000b14:	21f0      	movs	r1, #240	; 0xf0
 8000b16:	6838      	ldr	r0, [r7, #0]
 8000b18:	f7ff fd64 	bl	80005e4 <_ZN4OLED17oled_WriteCommandEh>

	//--set pre-charge period
	oled1.oled_WriteCommand(0xD9);
 8000b1c:	21d9      	movs	r1, #217	; 0xd9
 8000b1e:	6878      	ldr	r0, [r7, #4]
 8000b20:	f7ff fd60 	bl	80005e4 <_ZN4OLED17oled_WriteCommandEh>
	oled2.oled_WriteCommand(0xD9);
 8000b24:	21d9      	movs	r1, #217	; 0xd9
 8000b26:	6838      	ldr	r0, [r7, #0]
 8000b28:	f7ff fd5c 	bl	80005e4 <_ZN4OLED17oled_WriteCommandEh>
	oled1.oled_WriteCommand(0x22);
 8000b2c:	2122      	movs	r1, #34	; 0x22
 8000b2e:	6878      	ldr	r0, [r7, #4]
 8000b30:	f7ff fd58 	bl	80005e4 <_ZN4OLED17oled_WriteCommandEh>
	oled2.oled_WriteCommand(0x22);
 8000b34:	2122      	movs	r1, #34	; 0x22
 8000b36:	6838      	ldr	r0, [r7, #0]
 8000b38:	f7ff fd54 	bl	80005e4 <_ZN4OLED17oled_WriteCommandEh>

	//--set com pins hardware configuration - CHECK
	oled1.oled_WriteCommand(0xDA);
 8000b3c:	21da      	movs	r1, #218	; 0xda
 8000b3e:	6878      	ldr	r0, [r7, #4]
 8000b40:	f7ff fd50 	bl	80005e4 <_ZN4OLED17oled_WriteCommandEh>
	oled2.oled_WriteCommand(0xDA);
 8000b44:	21da      	movs	r1, #218	; 0xda
 8000b46:	6838      	ldr	r0, [r7, #0]
 8000b48:	f7ff fd4c 	bl	80005e4 <_ZN4OLED17oled_WriteCommandEh>
	oled1.oled_WriteCommand(0x12);
 8000b4c:	2112      	movs	r1, #18
 8000b4e:	6878      	ldr	r0, [r7, #4]
 8000b50:	f7ff fd48 	bl	80005e4 <_ZN4OLED17oled_WriteCommandEh>
	oled2.oled_WriteCommand(0x12);
 8000b54:	2112      	movs	r1, #18
 8000b56:	6838      	ldr	r0, [r7, #0]
 8000b58:	f7ff fd44 	bl	80005e4 <_ZN4OLED17oled_WriteCommandEh>

	//--set vcomh
	oled1.oled_WriteCommand(0xDB);
 8000b5c:	21db      	movs	r1, #219	; 0xdb
 8000b5e:	6878      	ldr	r0, [r7, #4]
 8000b60:	f7ff fd40 	bl	80005e4 <_ZN4OLED17oled_WriteCommandEh>
	oled2.oled_WriteCommand(0xDB);
 8000b64:	21db      	movs	r1, #219	; 0xdb
 8000b66:	6838      	ldr	r0, [r7, #0]
 8000b68:	f7ff fd3c 	bl	80005e4 <_ZN4OLED17oled_WriteCommandEh>

	//0x20,0.77xVcc
	oled1.oled_WriteCommand(0x20);
 8000b6c:	2120      	movs	r1, #32
 8000b6e:	6878      	ldr	r0, [r7, #4]
 8000b70:	f7ff fd38 	bl	80005e4 <_ZN4OLED17oled_WriteCommandEh>
	oled2.oled_WriteCommand(0x20);
 8000b74:	2120      	movs	r1, #32
 8000b76:	6838      	ldr	r0, [r7, #0]
 8000b78:	f7ff fd34 	bl	80005e4 <_ZN4OLED17oled_WriteCommandEh>

	//--set DC-DC enable
	oled1.oled_WriteCommand(0x8D);
 8000b7c:	218d      	movs	r1, #141	; 0x8d
 8000b7e:	6878      	ldr	r0, [r7, #4]
 8000b80:	f7ff fd30 	bl	80005e4 <_ZN4OLED17oled_WriteCommandEh>
	oled2.oled_WriteCommand(0x8D);
 8000b84:	218d      	movs	r1, #141	; 0x8d
 8000b86:	6838      	ldr	r0, [r7, #0]
 8000b88:	f7ff fd2c 	bl	80005e4 <_ZN4OLED17oled_WriteCommandEh>
	//
	oled1.oled_WriteCommand(0x14);
 8000b8c:	2114      	movs	r1, #20
 8000b8e:	6878      	ldr	r0, [r7, #4]
 8000b90:	f7ff fd28 	bl	80005e4 <_ZN4OLED17oled_WriteCommandEh>
	oled2.oled_WriteCommand(0x14);
 8000b94:	2114      	movs	r1, #20
 8000b96:	6838      	ldr	r0, [r7, #0]
 8000b98:	f7ff fd24 	bl	80005e4 <_ZN4OLED17oled_WriteCommandEh>

	//--turn on SSD1306 panel
	oled1.oled_WriteCommand(0xAF);
 8000b9c:	21af      	movs	r1, #175	; 0xaf
 8000b9e:	6878      	ldr	r0, [r7, #4]
 8000ba0:	f7ff fd20 	bl	80005e4 <_ZN4OLED17oled_WriteCommandEh>
	oled2.oled_WriteCommand(0xAF);
 8000ba4:	21af      	movs	r1, #175	; 0xaf
 8000ba6:	6838      	ldr	r0, [r7, #0]
 8000ba8:	f7ff fd1c 	bl	80005e4 <_ZN4OLED17oled_WriteCommandEh>
}
 8000bac:	bf00      	nop
 8000bae:	3708      	adds	r7, #8
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <_ZN4OLEDC1Ev>:
class OLED
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	805a      	strh	r2, [r3, #2]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	809a      	strh	r2, [r3, #4]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2200      	movs	r2, #0
 8000bcc:	719a      	strb	r2, [r3, #6]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	71da      	strb	r2, [r3, #7]
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
	...

08000be4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000be4:	b590      	push	{r4, r7, lr}
 8000be6:	b091      	sub	sp, #68	; 0x44
 8000be8:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN 1 */

	// This doesn't work for some reason
	printf("Initializing OLED Screens...\r\n");
 8000bea:	486a      	ldr	r0, [pc, #424]	; (8000d94 <main+0x1b0>)
 8000bec:	f006 f822 	bl	8006c34 <puts>
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000bf0:	f000 fcd2 	bl	8001598 <HAL_Init>

	/* USER CODE BEGIN Init */
	// This doesn't work for some reason
	printf("Test2\r\n");
 8000bf4:	4868      	ldr	r0, [pc, #416]	; (8000d98 <main+0x1b4>)
 8000bf6:	f006 f81d 	bl	8006c34 <puts>

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000bfa:	f000 f8f7 	bl	8000dec <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000bfe:	f000 f9bf 	bl	8000f80 <_ZL12MX_GPIO_Initv>
	MX_USART2_UART_Init();
 8000c02:	f000 f98f 	bl	8000f24 <_ZL19MX_USART2_UART_Initv>
	MX_I2C1_Init();
 8000c06:	f000 f959 	bl	8000ebc <_ZL12MX_I2C1_Initv>
	/* USER CODE BEGIN 2 */
	//printf("Test3\r\n");
	printf("Initializing OLED Screens...\r\n");
 8000c0a:	4862      	ldr	r0, [pc, #392]	; (8000d94 <main+0x1b0>)
 8000c0c:	f006 f812 	bl	8006c34 <puts>

	oled1.set_I2C_Address(0x3C);
 8000c10:	213c      	movs	r1, #60	; 0x3c
 8000c12:	4862      	ldr	r0, [pc, #392]	; (8000d9c <main+0x1b8>)
 8000c14:	f7ff fcc8 	bl	80005a8 <_ZN4OLED15set_I2C_AddressEh>
	oled2.set_I2C_Address(0x3D);
 8000c18:	213d      	movs	r1, #61	; 0x3d
 8000c1a:	4861      	ldr	r0, [pc, #388]	; (8000da0 <main+0x1bc>)
 8000c1c:	f7ff fcc4 	bl	80005a8 <_ZN4OLED15set_I2C_AddressEh>

	oled_status1 = HAL_I2C_IsDeviceReady(&hi2c1, oled1.get_I2C_Address(), 3, 5);
 8000c20:	485e      	ldr	r0, [pc, #376]	; (8000d9c <main+0x1b8>)
 8000c22:	f7ff fcd2 	bl	80005ca <_ZN4OLED15get_I2C_AddressEv>
 8000c26:	4603      	mov	r3, r0
 8000c28:	b299      	uxth	r1, r3
 8000c2a:	2305      	movs	r3, #5
 8000c2c:	2203      	movs	r2, #3
 8000c2e:	485d      	ldr	r0, [pc, #372]	; (8000da4 <main+0x1c0>)
 8000c30:	f001 f9d6 	bl	8001fe0 <HAL_I2C_IsDeviceReady>
 8000c34:	4603      	mov	r3, r0
 8000c36:	461a      	mov	r2, r3
 8000c38:	4b5b      	ldr	r3, [pc, #364]	; (8000da8 <main+0x1c4>)
 8000c3a:	701a      	strb	r2, [r3, #0]
	oled_status2 = HAL_I2C_IsDeviceReady(&hi2c1, oled2.get_I2C_Address(), 3, 5);
 8000c3c:	4858      	ldr	r0, [pc, #352]	; (8000da0 <main+0x1bc>)
 8000c3e:	f7ff fcc4 	bl	80005ca <_ZN4OLED15get_I2C_AddressEv>
 8000c42:	4603      	mov	r3, r0
 8000c44:	b299      	uxth	r1, r3
 8000c46:	2305      	movs	r3, #5
 8000c48:	2203      	movs	r2, #3
 8000c4a:	4856      	ldr	r0, [pc, #344]	; (8000da4 <main+0x1c0>)
 8000c4c:	f001 f9c8 	bl	8001fe0 <HAL_I2C_IsDeviceReady>
 8000c50:	4603      	mov	r3, r0
 8000c52:	461a      	mov	r2, r3
 8000c54:	4b55      	ldr	r3, [pc, #340]	; (8000dac <main+0x1c8>)
 8000c56:	701a      	strb	r2, [r3, #0]

	if (oled_status1 != HAL_OK && oled_status2 != HAL_OK)
 8000c58:	4b53      	ldr	r3, [pc, #332]	; (8000da8 <main+0x1c4>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d00b      	beq.n	8000c78 <main+0x94>
 8000c60:	4b52      	ldr	r3, [pc, #328]	; (8000dac <main+0x1c8>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d007      	beq.n	8000c78 <main+0x94>
	{
		// If error persists after uploading correct I2C address
		// Power cycle the stm32 board
		printf("ERROR WITH I2C CONNECTION \r\n");
 8000c68:	4851      	ldr	r0, [pc, #324]	; (8000db0 <main+0x1cc>)
 8000c6a:	f005 ffe3 	bl	8006c34 <puts>
		printf("IF THE PROBLEM IS PERSISTANT, POWER CYCLE YOUR DEVICE\r\n");
 8000c6e:	4851      	ldr	r0, [pc, #324]	; (8000db4 <main+0x1d0>)
 8000c70:	f005 ffe0 	bl	8006c34 <puts>

		Error_Handler();
 8000c74:	f000 fa38 	bl	80010e8 <Error_Handler>
	}

	HAL_GPIO_WritePin(GPIOA, LED_Pin, GPIO_PIN_SET);
 8000c78:	2201      	movs	r2, #1
 8000c7a:	2120      	movs	r1, #32
 8000c7c:	484e      	ldr	r0, [pc, #312]	; (8000db8 <main+0x1d4>)
 8000c7e:	f000 ff57 	bl	8001b30 <HAL_GPIO_WritePin>
	printf("PROGRAM STARTED\r\n");
 8000c82:	484e      	ldr	r0, [pc, #312]	; (8000dbc <main+0x1d8>)
 8000c84:	f005 ffd6 	bl	8006c34 <puts>

	init_OLED_Screens(oled1, oled2);
 8000c88:	4945      	ldr	r1, [pc, #276]	; (8000da0 <main+0x1bc>)
 8000c8a:	4844      	ldr	r0, [pc, #272]	; (8000d9c <main+0x1b8>)
 8000c8c:	f7ff feb1 	bl	80009f2 <_Z17init_OLED_ScreensR4OLEDS0_>

	oled1.fillScreen(White);
 8000c90:	2101      	movs	r1, #1
 8000c92:	4842      	ldr	r0, [pc, #264]	; (8000d9c <main+0x1b8>)
 8000c94:	f7ff fe4c 	bl	8000930 <_ZN4OLED10fillScreenE13SSD1306_COLOR>
	oled2.fillScreen(Black);
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4841      	ldr	r0, [pc, #260]	; (8000da0 <main+0x1bc>)
 8000c9c:	f7ff fe48 	bl	8000930 <_ZN4OLED10fillScreenE13SSD1306_COLOR>

	oled1.SetCursor(30, 1);
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	211e      	movs	r1, #30
 8000ca4:	483d      	ldr	r0, [pc, #244]	; (8000d9c <main+0x1b8>)
 8000ca6:	f7ff fe2d 	bl	8000904 <_ZN4OLED9SetCursorEhh>
	oled2.SetCursor(30, 1);
 8000caa:	2201      	movs	r2, #1
 8000cac:	211e      	movs	r1, #30
 8000cae:	483c      	ldr	r0, [pc, #240]	; (8000da0 <main+0x1bc>)
 8000cb0:	f7ff fe28 	bl	8000904 <_ZN4OLED9SetCursorEhh>

	char text1_[] = "TESTING OLED";
 8000cb4:	4b42      	ldr	r3, [pc, #264]	; (8000dc0 <main+0x1dc>)
 8000cb6:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8000cba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cbc:	c407      	stmia	r4!, {r0, r1, r2}
 8000cbe:	7023      	strb	r3, [r4, #0]
	char text2_[] = "TESTING OLED";
 8000cc0:	4b3f      	ldr	r3, [pc, #252]	; (8000dc0 <main+0x1dc>)
 8000cc2:	f107 0418 	add.w	r4, r7, #24
 8000cc6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cc8:	c407      	stmia	r4!, {r0, r1, r2}
 8000cca:	7023      	strb	r3, [r4, #0]

	oled1.writeString(text1_, Font_7x10, Black);
 8000ccc:	4b3d      	ldr	r3, [pc, #244]	; (8000dc4 <main+0x1e0>)
 8000cce:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	9200      	str	r2, [sp, #0]
 8000cd6:	cb0c      	ldmia	r3, {r2, r3}
 8000cd8:	4830      	ldr	r0, [pc, #192]	; (8000d9c <main+0x1b8>)
 8000cda:	f7ff fdd5 	bl	8000888 <_ZN4OLED11writeStringEPc7FontDef13SSD1306_COLOR>
	oled2.writeString(text2_, Font_7x10, White);
 8000cde:	4b39      	ldr	r3, [pc, #228]	; (8000dc4 <main+0x1e0>)
 8000ce0:	f107 0118 	add.w	r1, r7, #24
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	9200      	str	r2, [sp, #0]
 8000ce8:	cb0c      	ldmia	r3, {r2, r3}
 8000cea:	482d      	ldr	r0, [pc, #180]	; (8000da0 <main+0x1bc>)
 8000cec:	f7ff fdcc 	bl	8000888 <_ZN4OLED11writeStringEPc7FontDef13SSD1306_COLOR>

	oled1.SetCursor(30, 30);
 8000cf0:	221e      	movs	r2, #30
 8000cf2:	211e      	movs	r1, #30
 8000cf4:	4829      	ldr	r0, [pc, #164]	; (8000d9c <main+0x1b8>)
 8000cf6:	f7ff fe05 	bl	8000904 <_ZN4OLED9SetCursorEhh>
	oled2.SetCursor(30, 30);
 8000cfa:	221e      	movs	r2, #30
 8000cfc:	211e      	movs	r1, #30
 8000cfe:	4828      	ldr	r0, [pc, #160]	; (8000da0 <main+0x1bc>)
 8000d00:	f7ff fe00 	bl	8000904 <_ZN4OLED9SetCursorEhh>

	char text1__[] = "SCREEN 1";
 8000d04:	4a30      	ldr	r2, [pc, #192]	; (8000dc8 <main+0x1e4>)
 8000d06:	f107 030c 	add.w	r3, r7, #12
 8000d0a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d0c:	c303      	stmia	r3!, {r0, r1}
 8000d0e:	701a      	strb	r2, [r3, #0]
	char text2__[] = "SCREEN 2";
 8000d10:	4a2e      	ldr	r2, [pc, #184]	; (8000dcc <main+0x1e8>)
 8000d12:	463b      	mov	r3, r7
 8000d14:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d16:	c303      	stmia	r3!, {r0, r1}
 8000d18:	701a      	strb	r2, [r3, #0]

	oled1.writeString(text1__, Font_7x10, Black);
 8000d1a:	4b2a      	ldr	r3, [pc, #168]	; (8000dc4 <main+0x1e0>)
 8000d1c:	f107 010c 	add.w	r1, r7, #12
 8000d20:	2200      	movs	r2, #0
 8000d22:	9200      	str	r2, [sp, #0]
 8000d24:	cb0c      	ldmia	r3, {r2, r3}
 8000d26:	481d      	ldr	r0, [pc, #116]	; (8000d9c <main+0x1b8>)
 8000d28:	f7ff fdae 	bl	8000888 <_ZN4OLED11writeStringEPc7FontDef13SSD1306_COLOR>
	oled2.writeString(text2__, Font_7x10, White);
 8000d2c:	4b25      	ldr	r3, [pc, #148]	; (8000dc4 <main+0x1e0>)
 8000d2e:	4639      	mov	r1, r7
 8000d30:	2201      	movs	r2, #1
 8000d32:	9200      	str	r2, [sp, #0]
 8000d34:	cb0c      	ldmia	r3, {r2, r3}
 8000d36:	481a      	ldr	r0, [pc, #104]	; (8000da0 <main+0x1bc>)
 8000d38:	f7ff fda6 	bl	8000888 <_ZN4OLED11writeStringEPc7FontDef13SSD1306_COLOR>

	oled1.updateScreen();
 8000d3c:	4817      	ldr	r0, [pc, #92]	; (8000d9c <main+0x1b8>)
 8000d3e:	f7ff fe1c 	bl	800097a <_ZN4OLED12updateScreenEv>
	oled2.updateScreen();
 8000d42:	4817      	ldr	r0, [pc, #92]	; (8000da0 <main+0x1bc>)
 8000d44:	f7ff fe19 	bl	800097a <_ZN4OLED12updateScreenEv>

	oled1.SetCursor(30, 50);
 8000d48:	2232      	movs	r2, #50	; 0x32
 8000d4a:	211e      	movs	r1, #30
 8000d4c:	4813      	ldr	r0, [pc, #76]	; (8000d9c <main+0x1b8>)
 8000d4e:	f7ff fdd9 	bl	8000904 <_ZN4OLED9SetCursorEhh>
	oled2.SetCursor(30, 50);
 8000d52:	2232      	movs	r2, #50	; 0x32
 8000d54:	211e      	movs	r1, #30
 8000d56:	4812      	ldr	r0, [pc, #72]	; (8000da0 <main+0x1bc>)
 8000d58:	f7ff fdd4 	bl	8000904 <_ZN4OLED9SetCursorEhh>

	printf("Multi-threading flag \r\n");
 8000d5c:	481c      	ldr	r0, [pc, #112]	; (8000dd0 <main+0x1ec>)
 8000d5e:	f005 ff69 	bl	8006c34 <puts>

	HAL_Delay(2000);
 8000d62:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d66:	f000 fc59 	bl	800161c <HAL_Delay>

	Task1Handle = osThreadNew(StartTask1, NULL, &Task1_attributes);
 8000d6a:	4a1a      	ldr	r2, [pc, #104]	; (8000dd4 <main+0x1f0>)
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	481a      	ldr	r0, [pc, #104]	; (8000dd8 <main+0x1f4>)
 8000d70:	f002 ffdc 	bl	8003d2c <osThreadNew>
 8000d74:	4603      	mov	r3, r0
 8000d76:	4a19      	ldr	r2, [pc, #100]	; (8000ddc <main+0x1f8>)
 8000d78:	6013      	str	r3, [r2, #0]
	Task2Handle = osThreadNew(StartTask2, NULL, &Task2_attributes);
 8000d7a:	4a19      	ldr	r2, [pc, #100]	; (8000de0 <main+0x1fc>)
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4819      	ldr	r0, [pc, #100]	; (8000de4 <main+0x200>)
 8000d80:	f002 ffd4 	bl	8003d2c <osThreadNew>
 8000d84:	4603      	mov	r3, r0
 8000d86:	4a18      	ldr	r2, [pc, #96]	; (8000de8 <main+0x204>)
 8000d88:	6013      	str	r3, [r2, #0]
	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8000d8a:	f002 ff85 	bl	8003c98 <osKernelInitialize>
	/**
	 * @}
	 */

	/* Start scheduler */
	osKernelStart();
 8000d8e:	f002 ffa7 	bl	8003ce0 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000d92:	e7fe      	b.n	8000d92 <main+0x1ae>
 8000d94:	08007d58 	.word	0x08007d58
 8000d98:	08007d78 	.word	0x08007d78
 8000d9c:	2000013c 	.word	0x2000013c
 8000da0:	20000554 	.word	0x20000554
 8000da4:	20000098 	.word	0x20000098
 8000da8:	2000013a 	.word	0x2000013a
 8000dac:	2000013b 	.word	0x2000013b
 8000db0:	08007d80 	.word	0x08007d80
 8000db4:	08007d9c 	.word	0x08007d9c
 8000db8:	40020000 	.word	0x40020000
 8000dbc:	08007dd4 	.word	0x08007dd4
 8000dc0:	08007e00 	.word	0x08007e00
 8000dc4:	20000000 	.word	0x20000000
 8000dc8:	08007e10 	.word	0x08007e10
 8000dcc:	08007e1c 	.word	0x08007e1c
 8000dd0:	08007de8 	.word	0x08007de8
 8000dd4:	080085b0 	.word	0x080085b0
 8000dd8:	08001005 	.word	0x08001005
 8000ddc:	20000130 	.word	0x20000130
 8000de0:	080085d4 	.word	0x080085d4
 8000de4:	08001065 	.word	0x08001065
 8000de8:	20000134 	.word	0x20000134

08000dec <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b094      	sub	sp, #80	; 0x50
 8000df0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000df2:	f107 0320 	add.w	r3, r7, #32
 8000df6:	2230      	movs	r2, #48	; 0x30
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f005 fdf7 	bl	80069ee <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000e00:	f107 030c 	add.w	r3, r7, #12
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]
 8000e0e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000e10:	2300      	movs	r3, #0
 8000e12:	60bb      	str	r3, [r7, #8]
 8000e14:	4b27      	ldr	r3, [pc, #156]	; (8000eb4 <_Z18SystemClock_Configv+0xc8>)
 8000e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e18:	4a26      	ldr	r2, [pc, #152]	; (8000eb4 <_Z18SystemClock_Configv+0xc8>)
 8000e1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e1e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e20:	4b24      	ldr	r3, [pc, #144]	; (8000eb4 <_Z18SystemClock_Configv+0xc8>)
 8000e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e28:	60bb      	str	r3, [r7, #8]
 8000e2a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	607b      	str	r3, [r7, #4]
 8000e30:	4b21      	ldr	r3, [pc, #132]	; (8000eb8 <_Z18SystemClock_Configv+0xcc>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a20      	ldr	r2, [pc, #128]	; (8000eb8 <_Z18SystemClock_Configv+0xcc>)
 8000e36:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e3a:	6013      	str	r3, [r2, #0]
 8000e3c:	4b1e      	ldr	r3, [pc, #120]	; (8000eb8 <_Z18SystemClock_Configv+0xcc>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e44:	607b      	str	r3, [r7, #4]
 8000e46:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e50:	2310      	movs	r3, #16
 8000e52:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e54:	2300      	movs	r3, #0
 8000e56:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e58:	f107 0320 	add.w	r3, r7, #32
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f001 fc0b 	bl	8002678 <HAL_RCC_OscConfig>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	bf14      	ite	ne
 8000e68:	2301      	movne	r3, #1
 8000e6a:	2300      	moveq	r3, #0
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <_Z18SystemClock_Configv+0x8a>
	{
		Error_Handler();
 8000e72:	f000 f939 	bl	80010e8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000e76:	230f      	movs	r3, #15
 8000e78:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e82:	2300      	movs	r3, #0
 8000e84:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e86:	2300      	movs	r3, #0
 8000e88:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e8a:	f107 030c 	add.w	r3, r7, #12
 8000e8e:	2100      	movs	r1, #0
 8000e90:	4618      	mov	r0, r3
 8000e92:	f001 fe69 	bl	8002b68 <HAL_RCC_ClockConfig>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	bf14      	ite	ne
 8000e9c:	2301      	movne	r3, #1
 8000e9e:	2300      	moveq	r3, #0
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <_Z18SystemClock_Configv+0xbe>
	{
		Error_Handler();
 8000ea6:	f000 f91f 	bl	80010e8 <Error_Handler>
	}
}
 8000eaa:	bf00      	nop
 8000eac:	3750      	adds	r7, #80	; 0x50
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40023800 	.word	0x40023800
 8000eb8:	40007000 	.word	0x40007000

08000ebc <_ZL12MX_I2C1_Initv>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000ec0:	4b15      	ldr	r3, [pc, #84]	; (8000f18 <_ZL12MX_I2C1_Initv+0x5c>)
 8000ec2:	4a16      	ldr	r2, [pc, #88]	; (8000f1c <_ZL12MX_I2C1_Initv+0x60>)
 8000ec4:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8000ec6:	4b14      	ldr	r3, [pc, #80]	; (8000f18 <_ZL12MX_I2C1_Initv+0x5c>)
 8000ec8:	4a15      	ldr	r2, [pc, #84]	; (8000f20 <_ZL12MX_I2C1_Initv+0x64>)
 8000eca:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ecc:	4b12      	ldr	r3, [pc, #72]	; (8000f18 <_ZL12MX_I2C1_Initv+0x5c>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8000ed2:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <_ZL12MX_I2C1_Initv+0x5c>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ed8:	4b0f      	ldr	r3, [pc, #60]	; (8000f18 <_ZL12MX_I2C1_Initv+0x5c>)
 8000eda:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ede:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ee0:	4b0d      	ldr	r3, [pc, #52]	; (8000f18 <_ZL12MX_I2C1_Initv+0x5c>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000ee6:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <_ZL12MX_I2C1_Initv+0x5c>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000eec:	4b0a      	ldr	r3, [pc, #40]	; (8000f18 <_ZL12MX_I2C1_Initv+0x5c>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ef2:	4b09      	ldr	r3, [pc, #36]	; (8000f18 <_ZL12MX_I2C1_Initv+0x5c>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ef8:	4807      	ldr	r0, [pc, #28]	; (8000f18 <_ZL12MX_I2C1_Initv+0x5c>)
 8000efa:	f000 fe33 	bl	8001b64 <HAL_I2C_Init>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	bf14      	ite	ne
 8000f04:	2301      	movne	r3, #1
 8000f06:	2300      	moveq	r3, #0
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <_ZL12MX_I2C1_Initv+0x56>
	{
		Error_Handler();
 8000f0e:	f000 f8eb 	bl	80010e8 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20000098 	.word	0x20000098
 8000f1c:	40005400 	.word	0x40005400
 8000f20:	000186a0 	.word	0x000186a0

08000f24 <_ZL19MX_USART2_UART_Initv>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000f28:	4b13      	ldr	r3, [pc, #76]	; (8000f78 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000f2a:	4a14      	ldr	r2, [pc, #80]	; (8000f7c <_ZL19MX_USART2_UART_Initv+0x58>)
 8000f2c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000f2e:	4b12      	ldr	r3, [pc, #72]	; (8000f78 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000f30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f34:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f36:	4b10      	ldr	r3, [pc, #64]	; (8000f78 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000f3c:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000f42:	4b0d      	ldr	r3, [pc, #52]	; (8000f78 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000f48:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000f4a:	220c      	movs	r2, #12
 8000f4c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f4e:	4b0a      	ldr	r3, [pc, #40]	; (8000f78 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f54:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f5a:	4807      	ldr	r0, [pc, #28]	; (8000f78 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000f5c:	f002 fa96 	bl	800348c <HAL_UART_Init>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	bf14      	ite	ne
 8000f66:	2301      	movne	r3, #1
 8000f68:	2300      	moveq	r3, #0
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <_ZL19MX_USART2_UART_Initv+0x50>
	{
		Error_Handler();
 8000f70:	f000 f8ba 	bl	80010e8 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000f74:	bf00      	nop
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	200000ec 	.word	0x200000ec
 8000f7c:	40004400 	.word	0x40004400

08000f80 <_ZL12MX_GPIO_Initv>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b088      	sub	sp, #32
 8000f84:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000f86:	f107 030c 	add.w	r3, r7, #12
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	605a      	str	r2, [r3, #4]
 8000f90:	609a      	str	r2, [r3, #8]
 8000f92:	60da      	str	r2, [r3, #12]
 8000f94:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	60bb      	str	r3, [r7, #8]
 8000f9a:	4b18      	ldr	r3, [pc, #96]	; (8000ffc <_ZL12MX_GPIO_Initv+0x7c>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	4a17      	ldr	r2, [pc, #92]	; (8000ffc <_ZL12MX_GPIO_Initv+0x7c>)
 8000fa0:	f043 0301 	orr.w	r3, r3, #1
 8000fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa6:	4b15      	ldr	r3, [pc, #84]	; (8000ffc <_ZL12MX_GPIO_Initv+0x7c>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	60bb      	str	r3, [r7, #8]
 8000fb0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	607b      	str	r3, [r7, #4]
 8000fb6:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <_ZL12MX_GPIO_Initv+0x7c>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	4a10      	ldr	r2, [pc, #64]	; (8000ffc <_ZL12MX_GPIO_Initv+0x7c>)
 8000fbc:	f043 0302 	orr.w	r3, r3, #2
 8000fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc2:	4b0e      	ldr	r3, [pc, #56]	; (8000ffc <_ZL12MX_GPIO_Initv+0x7c>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	f003 0302 	and.w	r3, r3, #2
 8000fca:	607b      	str	r3, [r7, #4]
 8000fcc:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2120      	movs	r1, #32
 8000fd2:	480b      	ldr	r0, [pc, #44]	; (8001000 <_ZL12MX_GPIO_Initv+0x80>)
 8000fd4:	f000 fdac 	bl	8001b30 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 8000fd8:	2320      	movs	r3, #32
 8000fda:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000fe8:	f107 030c 	add.w	r3, r7, #12
 8000fec:	4619      	mov	r1, r3
 8000fee:	4804      	ldr	r0, [pc, #16]	; (8001000 <_ZL12MX_GPIO_Initv+0x80>)
 8000ff0:	f000 fc1a 	bl	8001828 <HAL_GPIO_Init>

}
 8000ff4:	bf00      	nop
 8000ff6:	3720      	adds	r7, #32
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40023800 	.word	0x40023800
 8001000:	40020000 	.word	0x40020000

08001004 <_Z10StartTask1Pv>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b09e      	sub	sp, #120	; 0x78
 8001008:	af02      	add	r7, sp, #8
 800100a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	int count_1 = 1;
 800100c:	2301      	movs	r3, #1
 800100e:	66fb      	str	r3, [r7, #108]	; 0x6c
	char count_1_array[100];
	oled1.fillScreen(White);
 8001010:	2101      	movs	r1, #1
 8001012:	4811      	ldr	r0, [pc, #68]	; (8001058 <_Z10StartTask1Pv+0x54>)
 8001014:	f7ff fc8c 	bl	8000930 <_ZN4OLED10fillScreenE13SSD1306_COLOR>

	// SCREEN ONE STUFF
	for (;;)
	{
		//oled1.fillScreen(White);
		oled1.SetCursor(30, 50);
 8001018:	2232      	movs	r2, #50	; 0x32
 800101a:	211e      	movs	r1, #30
 800101c:	480e      	ldr	r0, [pc, #56]	; (8001058 <_Z10StartTask1Pv+0x54>)
 800101e:	f7ff fc71 	bl	8000904 <_ZN4OLED9SetCursorEhh>

		// int snprintf ( char * s, size_t n, const char * format, ... );
		// Parameters [ where it's stored , number of bytes , format , variable to be stored ]
		count_1++;
 8001022:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001024:	3301      	adds	r3, #1
 8001026:	66fb      	str	r3, [r7, #108]	; 0x6c

		// snprintf() needs to be used for displaying integer values since writeString() takes a char pointer
		// More details about arrays vs char pointers can be found here : https://www.youtube.com/watch?v=Qp3WatLL_Hc&ab_channel=PortfolioCourses
		snprintf(count_1_array, 100, "%d", count_1);
 8001028:	f107 0008 	add.w	r0, r7, #8
 800102c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800102e:	4a0b      	ldr	r2, [pc, #44]	; (800105c <_Z10StartTask1Pv+0x58>)
 8001030:	2164      	movs	r1, #100	; 0x64
 8001032:	f005 fe81 	bl	8006d38 <sniprintf>
		oled1.writeString(count_1_array, Font_7x10, Black);
 8001036:	4b0a      	ldr	r3, [pc, #40]	; (8001060 <_Z10StartTask1Pv+0x5c>)
 8001038:	f107 0108 	add.w	r1, r7, #8
 800103c:	2200      	movs	r2, #0
 800103e:	9200      	str	r2, [sp, #0]
 8001040:	cb0c      	ldmia	r3, {r2, r3}
 8001042:	4805      	ldr	r0, [pc, #20]	; (8001058 <_Z10StartTask1Pv+0x54>)
 8001044:	f7ff fc20 	bl	8000888 <_ZN4OLED11writeStringEPc7FontDef13SSD1306_COLOR>
		oled1.updateScreen();
 8001048:	4803      	ldr	r0, [pc, #12]	; (8001058 <_Z10StartTask1Pv+0x54>)
 800104a:	f7ff fc96 	bl	800097a <_ZN4OLED12updateScreenEv>
		osDelay(250);
 800104e:	20fa      	movs	r0, #250	; 0xfa
 8001050:	f002 fefe 	bl	8003e50 <osDelay>
		oled1.SetCursor(30, 50);
 8001054:	e7e0      	b.n	8001018 <_Z10StartTask1Pv+0x14>
 8001056:	bf00      	nop
 8001058:	2000013c 	.word	0x2000013c
 800105c:	08007e28 	.word	0x08007e28
 8001060:	20000000 	.word	0x20000000

08001064 <_Z10StartTask2Pv>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask2 */
void StartTask2(void *argument)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b09e      	sub	sp, #120	; 0x78
 8001068:	af02      	add	r7, sp, #8
 800106a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask2 */
	int count_2 = 13;
 800106c:	230d      	movs	r3, #13
 800106e:	66fb      	str	r3, [r7, #108]	; 0x6c
	char count_2_array[100];
	oled2.fillScreen(Black);
 8001070:	2100      	movs	r1, #0
 8001072:	4811      	ldr	r0, [pc, #68]	; (80010b8 <_Z10StartTask2Pv+0x54>)
 8001074:	f7ff fc5c 	bl	8000930 <_ZN4OLED10fillScreenE13SSD1306_COLOR>
	/* Infinite loop */
	for (;;)
	{
		oled2.SetCursor(30, 50);
 8001078:	2232      	movs	r2, #50	; 0x32
 800107a:	211e      	movs	r1, #30
 800107c:	480e      	ldr	r0, [pc, #56]	; (80010b8 <_Z10StartTask2Pv+0x54>)
 800107e:	f7ff fc41 	bl	8000904 <_ZN4OLED9SetCursorEhh>
		count_2 += 5;
 8001082:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001084:	3305      	adds	r3, #5
 8001086:	66fb      	str	r3, [r7, #108]	; 0x6c
		snprintf(count_2_array, 100, "%d", count_2);
 8001088:	f107 0008 	add.w	r0, r7, #8
 800108c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800108e:	4a0b      	ldr	r2, [pc, #44]	; (80010bc <_Z10StartTask2Pv+0x58>)
 8001090:	2164      	movs	r1, #100	; 0x64
 8001092:	f005 fe51 	bl	8006d38 <sniprintf>
		oled2.writeString(count_2_array, Font_7x10, White);
 8001096:	4b0a      	ldr	r3, [pc, #40]	; (80010c0 <_Z10StartTask2Pv+0x5c>)
 8001098:	f107 0108 	add.w	r1, r7, #8
 800109c:	2201      	movs	r2, #1
 800109e:	9200      	str	r2, [sp, #0]
 80010a0:	cb0c      	ldmia	r3, {r2, r3}
 80010a2:	4805      	ldr	r0, [pc, #20]	; (80010b8 <_Z10StartTask2Pv+0x54>)
 80010a4:	f7ff fbf0 	bl	8000888 <_ZN4OLED11writeStringEPc7FontDef13SSD1306_COLOR>
		oled2.updateScreen();
 80010a8:	4803      	ldr	r0, [pc, #12]	; (80010b8 <_Z10StartTask2Pv+0x54>)
 80010aa:	f7ff fc66 	bl	800097a <_ZN4OLED12updateScreenEv>
		osDelay(100);
 80010ae:	2064      	movs	r0, #100	; 0x64
 80010b0:	f002 fece 	bl	8003e50 <osDelay>
		oled2.SetCursor(30, 50);
 80010b4:	e7e0      	b.n	8001078 <_Z10StartTask2Pv+0x14>
 80010b6:	bf00      	nop
 80010b8:	20000554 	.word	0x20000554
 80010bc:	08007e28 	.word	0x08007e28
 80010c0:	20000000 	.word	0x20000000

080010c4 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM9)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a04      	ldr	r2, [pc, #16]	; (80010e4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d101      	bne.n	80010da <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		HAL_IncTick();
 80010d6:	f000 fa81 	bl	80015dc <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80010da:	bf00      	nop
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40014000 	.word	0x40014000

080010e8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010ec:	b672      	cpsid	i
}
 80010ee:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80010f0:	e7fe      	b.n	80010f0 <Error_Handler+0x8>
	...

080010f4 <_Z41__static_initialization_and_destruction_0ii>:
	{
	}
	/* USER CODE END Error_Handler_Debug */
}
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2b01      	cmp	r3, #1
 8001102:	d10a      	bne.n	800111a <_Z41__static_initialization_and_destruction_0ii+0x26>
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800110a:	4293      	cmp	r3, r2
 800110c:	d105      	bne.n	800111a <_Z41__static_initialization_and_destruction_0ii+0x26>
OLED oled1;
 800110e:	4805      	ldr	r0, [pc, #20]	; (8001124 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8001110:	f7ff fd50 	bl	8000bb4 <_ZN4OLEDC1Ev>
OLED oled2;
 8001114:	4804      	ldr	r0, [pc, #16]	; (8001128 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001116:	f7ff fd4d 	bl	8000bb4 <_ZN4OLEDC1Ev>
}
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	2000013c 	.word	0x2000013c
 8001128:	20000554 	.word	0x20000554

0800112c <_GLOBAL__sub_I_hi2c1>:
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
 8001130:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001134:	2001      	movs	r0, #1
 8001136:	f7ff ffdd 	bl	80010f4 <_Z41__static_initialization_and_destruction_0ii>
 800113a:	bd80      	pop	{r7, pc}

0800113c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	607b      	str	r3, [r7, #4]
 8001146:	4b12      	ldr	r3, [pc, #72]	; (8001190 <HAL_MspInit+0x54>)
 8001148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114a:	4a11      	ldr	r2, [pc, #68]	; (8001190 <HAL_MspInit+0x54>)
 800114c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001150:	6453      	str	r3, [r2, #68]	; 0x44
 8001152:	4b0f      	ldr	r3, [pc, #60]	; (8001190 <HAL_MspInit+0x54>)
 8001154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001156:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800115a:	607b      	str	r3, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	603b      	str	r3, [r7, #0]
 8001162:	4b0b      	ldr	r3, [pc, #44]	; (8001190 <HAL_MspInit+0x54>)
 8001164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001166:	4a0a      	ldr	r2, [pc, #40]	; (8001190 <HAL_MspInit+0x54>)
 8001168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800116c:	6413      	str	r3, [r2, #64]	; 0x40
 800116e:	4b08      	ldr	r3, [pc, #32]	; (8001190 <HAL_MspInit+0x54>)
 8001170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001176:	603b      	str	r3, [r7, #0]
 8001178:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800117a:	2200      	movs	r2, #0
 800117c:	210f      	movs	r1, #15
 800117e:	f06f 0001 	mvn.w	r0, #1
 8001182:	f000 fb27 	bl	80017d4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001186:	bf00      	nop
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40023800 	.word	0x40023800

08001194 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b08a      	sub	sp, #40	; 0x28
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119c:	f107 0314 	add.w	r3, r7, #20
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a19      	ldr	r2, [pc, #100]	; (8001218 <HAL_I2C_MspInit+0x84>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d12c      	bne.n	8001210 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	613b      	str	r3, [r7, #16]
 80011ba:	4b18      	ldr	r3, [pc, #96]	; (800121c <HAL_I2C_MspInit+0x88>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	4a17      	ldr	r2, [pc, #92]	; (800121c <HAL_I2C_MspInit+0x88>)
 80011c0:	f043 0302 	orr.w	r3, r3, #2
 80011c4:	6313      	str	r3, [r2, #48]	; 0x30
 80011c6:	4b15      	ldr	r3, [pc, #84]	; (800121c <HAL_I2C_MspInit+0x88>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	f003 0302 	and.w	r3, r3, #2
 80011ce:	613b      	str	r3, [r7, #16]
 80011d0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011d2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011d8:	2312      	movs	r3, #18
 80011da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e0:	2303      	movs	r3, #3
 80011e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011e4:	2304      	movs	r3, #4
 80011e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e8:	f107 0314 	add.w	r3, r7, #20
 80011ec:	4619      	mov	r1, r3
 80011ee:	480c      	ldr	r0, [pc, #48]	; (8001220 <HAL_I2C_MspInit+0x8c>)
 80011f0:	f000 fb1a 	bl	8001828 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011f4:	2300      	movs	r3, #0
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	4b08      	ldr	r3, [pc, #32]	; (800121c <HAL_I2C_MspInit+0x88>)
 80011fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fc:	4a07      	ldr	r2, [pc, #28]	; (800121c <HAL_I2C_MspInit+0x88>)
 80011fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001202:	6413      	str	r3, [r2, #64]	; 0x40
 8001204:	4b05      	ldr	r3, [pc, #20]	; (800121c <HAL_I2C_MspInit+0x88>)
 8001206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001208:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001210:	bf00      	nop
 8001212:	3728      	adds	r7, #40	; 0x28
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	40005400 	.word	0x40005400
 800121c:	40023800 	.word	0x40023800
 8001220:	40020400 	.word	0x40020400

08001224 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b08a      	sub	sp, #40	; 0x28
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122c:	f107 0314 	add.w	r3, r7, #20
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a19      	ldr	r2, [pc, #100]	; (80012a8 <HAL_UART_MspInit+0x84>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d12b      	bne.n	800129e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	613b      	str	r3, [r7, #16]
 800124a:	4b18      	ldr	r3, [pc, #96]	; (80012ac <HAL_UART_MspInit+0x88>)
 800124c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124e:	4a17      	ldr	r2, [pc, #92]	; (80012ac <HAL_UART_MspInit+0x88>)
 8001250:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001254:	6413      	str	r3, [r2, #64]	; 0x40
 8001256:	4b15      	ldr	r3, [pc, #84]	; (80012ac <HAL_UART_MspInit+0x88>)
 8001258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125e:	613b      	str	r3, [r7, #16]
 8001260:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	4b11      	ldr	r3, [pc, #68]	; (80012ac <HAL_UART_MspInit+0x88>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	4a10      	ldr	r2, [pc, #64]	; (80012ac <HAL_UART_MspInit+0x88>)
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	6313      	str	r3, [r2, #48]	; 0x30
 8001272:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <HAL_UART_MspInit+0x88>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800127e:	230c      	movs	r3, #12
 8001280:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001282:	2302      	movs	r3, #2
 8001284:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800128a:	2303      	movs	r3, #3
 800128c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800128e:	2307      	movs	r3, #7
 8001290:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001292:	f107 0314 	add.w	r3, r7, #20
 8001296:	4619      	mov	r1, r3
 8001298:	4805      	ldr	r0, [pc, #20]	; (80012b0 <HAL_UART_MspInit+0x8c>)
 800129a:	f000 fac5 	bl	8001828 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800129e:	bf00      	nop
 80012a0:	3728      	adds	r7, #40	; 0x28
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40004400 	.word	0x40004400
 80012ac:	40023800 	.word	0x40023800
 80012b0:	40020000 	.word	0x40020000

080012b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08c      	sub	sp, #48	; 0x30
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80012bc:	2300      	movs	r3, #0
 80012be:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80012c0:	2300      	movs	r3, #0
 80012c2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 80012c4:	2300      	movs	r3, #0
 80012c6:	60bb      	str	r3, [r7, #8]
 80012c8:	4b2e      	ldr	r3, [pc, #184]	; (8001384 <HAL_InitTick+0xd0>)
 80012ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012cc:	4a2d      	ldr	r2, [pc, #180]	; (8001384 <HAL_InitTick+0xd0>)
 80012ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012d2:	6453      	str	r3, [r2, #68]	; 0x44
 80012d4:	4b2b      	ldr	r3, [pc, #172]	; (8001384 <HAL_InitTick+0xd0>)
 80012d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012dc:	60bb      	str	r3, [r7, #8]
 80012de:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80012e0:	f107 020c 	add.w	r2, r7, #12
 80012e4:	f107 0310 	add.w	r3, r7, #16
 80012e8:	4611      	mov	r1, r2
 80012ea:	4618      	mov	r0, r3
 80012ec:	f001 fe1c 	bl	8002f28 <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80012f0:	f001 fe06 	bl	8002f00 <HAL_RCC_GetPCLK2Freq>
 80012f4:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80012f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012f8:	4a23      	ldr	r2, [pc, #140]	; (8001388 <HAL_InitTick+0xd4>)
 80012fa:	fba2 2303 	umull	r2, r3, r2, r3
 80012fe:	0c9b      	lsrs	r3, r3, #18
 8001300:	3b01      	subs	r3, #1
 8001302:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8001304:	4b21      	ldr	r3, [pc, #132]	; (800138c <HAL_InitTick+0xd8>)
 8001306:	4a22      	ldr	r2, [pc, #136]	; (8001390 <HAL_InitTick+0xdc>)
 8001308:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 800130a:	4b20      	ldr	r3, [pc, #128]	; (800138c <HAL_InitTick+0xd8>)
 800130c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001310:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 8001312:	4a1e      	ldr	r2, [pc, #120]	; (800138c <HAL_InitTick+0xd8>)
 8001314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001316:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 8001318:	4b1c      	ldr	r3, [pc, #112]	; (800138c <HAL_InitTick+0xd8>)
 800131a:	2200      	movs	r2, #0
 800131c:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800131e:	4b1b      	ldr	r3, [pc, #108]	; (800138c <HAL_InitTick+0xd8>)
 8001320:	2200      	movs	r2, #0
 8001322:	609a      	str	r2, [r3, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001324:	4b19      	ldr	r3, [pc, #100]	; (800138c <HAL_InitTick+0xd8>)
 8001326:	2200      	movs	r2, #0
 8001328:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim9);
 800132a:	4818      	ldr	r0, [pc, #96]	; (800138c <HAL_InitTick+0xd8>)
 800132c:	f001 fe2e 	bl	8002f8c <HAL_TIM_Base_Init>
 8001330:	4603      	mov	r3, r0
 8001332:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001336:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800133a:	2b00      	cmp	r3, #0
 800133c:	d11b      	bne.n	8001376 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim9);
 800133e:	4813      	ldr	r0, [pc, #76]	; (800138c <HAL_InitTick+0xd8>)
 8001340:	f001 fe7e 	bl	8003040 <HAL_TIM_Base_Start_IT>
 8001344:	4603      	mov	r3, r0
 8001346:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800134a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800134e:	2b00      	cmp	r3, #0
 8001350:	d111      	bne.n	8001376 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM9 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001352:	2018      	movs	r0, #24
 8001354:	f000 fa5a 	bl	800180c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2b0f      	cmp	r3, #15
 800135c:	d808      	bhi.n	8001370 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority, 0U);
 800135e:	2200      	movs	r2, #0
 8001360:	6879      	ldr	r1, [r7, #4]
 8001362:	2018      	movs	r0, #24
 8001364:	f000 fa36 	bl	80017d4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001368:	4a0a      	ldr	r2, [pc, #40]	; (8001394 <HAL_InitTick+0xe0>)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6013      	str	r3, [r2, #0]
 800136e:	e002      	b.n	8001376 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001376:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800137a:	4618      	mov	r0, r3
 800137c:	3730      	adds	r7, #48	; 0x30
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40023800 	.word	0x40023800
 8001388:	431bde83 	.word	0x431bde83
 800138c:	2000096c 	.word	0x2000096c
 8001390:	40014000 	.word	0x40014000
 8001394:	2000000c 	.word	0x2000000c

08001398 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800139c:	e7fe      	b.n	800139c <NMI_Handler+0x4>

0800139e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800139e:	b480      	push	{r7}
 80013a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013a2:	e7fe      	b.n	80013a2 <HardFault_Handler+0x4>

080013a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013a8:	e7fe      	b.n	80013a8 <MemManage_Handler+0x4>

080013aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013aa:	b480      	push	{r7}
 80013ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ae:	e7fe      	b.n	80013ae <BusFault_Handler+0x4>

080013b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013b4:	e7fe      	b.n	80013b4 <UsageFault_Handler+0x4>

080013b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013b6:	b480      	push	{r7}
 80013b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013ba:	bf00      	nop
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr

080013c4 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 80013c8:	4802      	ldr	r0, [pc, #8]	; (80013d4 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80013ca:	f001 fe9b 	bl	8003104 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	2000096c 	.word	0x2000096c

080013d8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	60b9      	str	r1, [r7, #8]
 80013e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]
 80013e8:	e00a      	b.n	8001400 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013ea:	f3af 8000 	nop.w
 80013ee:	4601      	mov	r1, r0
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	1c5a      	adds	r2, r3, #1
 80013f4:	60ba      	str	r2, [r7, #8]
 80013f6:	b2ca      	uxtb	r2, r1
 80013f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	3301      	adds	r3, #1
 80013fe:	617b      	str	r3, [r7, #20]
 8001400:	697a      	ldr	r2, [r7, #20]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	429a      	cmp	r2, r3
 8001406:	dbf0      	blt.n	80013ea <_read+0x12>
  }

  return len;
 8001408:	687b      	ldr	r3, [r7, #4]
}
 800140a:	4618      	mov	r0, r3
 800140c:	3718      	adds	r7, #24
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	b086      	sub	sp, #24
 8001416:	af00      	add	r7, sp, #0
 8001418:	60f8      	str	r0, [r7, #12]
 800141a:	60b9      	str	r1, [r7, #8]
 800141c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800141e:	2300      	movs	r3, #0
 8001420:	617b      	str	r3, [r7, #20]
 8001422:	e009      	b.n	8001438 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	1c5a      	adds	r2, r3, #1
 8001428:	60ba      	str	r2, [r7, #8]
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff f8a9 	bl	8000584 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	3301      	adds	r3, #1
 8001436:	617b      	str	r3, [r7, #20]
 8001438:	697a      	ldr	r2, [r7, #20]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	429a      	cmp	r2, r3
 800143e:	dbf1      	blt.n	8001424 <_write+0x12>
  }
  return len;
 8001440:	687b      	ldr	r3, [r7, #4]
}
 8001442:	4618      	mov	r0, r3
 8001444:	3718      	adds	r7, #24
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <_close>:

int _close(int file)
{
 800144a:	b480      	push	{r7}
 800144c:	b083      	sub	sp, #12
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001452:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001456:	4618      	mov	r0, r3
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr

08001462 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001462:	b480      	push	{r7}
 8001464:	b083      	sub	sp, #12
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
 800146a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001472:	605a      	str	r2, [r3, #4]
  return 0;
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr

08001482 <_isatty>:

int _isatty(int file)
{
 8001482:	b480      	push	{r7}
 8001484:	b083      	sub	sp, #12
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800148a:	2301      	movs	r3, #1
}
 800148c:	4618      	mov	r0, r3
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001498:	b480      	push	{r7}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	60b9      	str	r1, [r7, #8]
 80014a2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014a4:	2300      	movs	r3, #0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3714      	adds	r7, #20
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
	...

080014b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014bc:	4a14      	ldr	r2, [pc, #80]	; (8001510 <_sbrk+0x5c>)
 80014be:	4b15      	ldr	r3, [pc, #84]	; (8001514 <_sbrk+0x60>)
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014c8:	4b13      	ldr	r3, [pc, #76]	; (8001518 <_sbrk+0x64>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d102      	bne.n	80014d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014d0:	4b11      	ldr	r3, [pc, #68]	; (8001518 <_sbrk+0x64>)
 80014d2:	4a12      	ldr	r2, [pc, #72]	; (800151c <_sbrk+0x68>)
 80014d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014d6:	4b10      	ldr	r3, [pc, #64]	; (8001518 <_sbrk+0x64>)
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4413      	add	r3, r2
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d207      	bcs.n	80014f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014e4:	f005 f952 	bl	800678c <__errno>
 80014e8:	4603      	mov	r3, r0
 80014ea:	220c      	movs	r2, #12
 80014ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014ee:	f04f 33ff 	mov.w	r3, #4294967295
 80014f2:	e009      	b.n	8001508 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014f4:	4b08      	ldr	r3, [pc, #32]	; (8001518 <_sbrk+0x64>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014fa:	4b07      	ldr	r3, [pc, #28]	; (8001518 <_sbrk+0x64>)
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4413      	add	r3, r2
 8001502:	4a05      	ldr	r2, [pc, #20]	; (8001518 <_sbrk+0x64>)
 8001504:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001506:	68fb      	ldr	r3, [r7, #12]
}
 8001508:	4618      	mov	r0, r3
 800150a:	3718      	adds	r7, #24
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	20020000 	.word	0x20020000
 8001514:	00000400 	.word	0x00000400
 8001518:	200009b4 	.word	0x200009b4
 800151c:	200053e0 	.word	0x200053e0

08001520 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001524:	4b06      	ldr	r3, [pc, #24]	; (8001540 <SystemInit+0x20>)
 8001526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800152a:	4a05      	ldr	r2, [pc, #20]	; (8001540 <SystemInit+0x20>)
 800152c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001530:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001534:	bf00      	nop
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	e000ed00 	.word	0xe000ed00

08001544 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001544:	f8df d034 	ldr.w	sp, [pc, #52]	; 800157c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001548:	480d      	ldr	r0, [pc, #52]	; (8001580 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800154a:	490e      	ldr	r1, [pc, #56]	; (8001584 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800154c:	4a0e      	ldr	r2, [pc, #56]	; (8001588 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800154e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001550:	e002      	b.n	8001558 <LoopCopyDataInit>

08001552 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001552:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001554:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001556:	3304      	adds	r3, #4

08001558 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001558:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800155a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800155c:	d3f9      	bcc.n	8001552 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800155e:	4a0b      	ldr	r2, [pc, #44]	; (800158c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001560:	4c0b      	ldr	r4, [pc, #44]	; (8001590 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001562:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001564:	e001      	b.n	800156a <LoopFillZerobss>

08001566 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001566:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001568:	3204      	adds	r2, #4

0800156a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800156a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800156c:	d3fb      	bcc.n	8001566 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800156e:	f7ff ffd7 	bl	8001520 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001572:	f005 fa07 	bl	8006984 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001576:	f7ff fb35 	bl	8000be4 <main>
  bx  lr    
 800157a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800157c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001580:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001584:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001588:	080086bc 	.word	0x080086bc
  ldr r2, =_sbss
 800158c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001590:	200053dc 	.word	0x200053dc

08001594 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001594:	e7fe      	b.n	8001594 <ADC_IRQHandler>
	...

08001598 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800159c:	4b0e      	ldr	r3, [pc, #56]	; (80015d8 <HAL_Init+0x40>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a0d      	ldr	r2, [pc, #52]	; (80015d8 <HAL_Init+0x40>)
 80015a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015a8:	4b0b      	ldr	r3, [pc, #44]	; (80015d8 <HAL_Init+0x40>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a0a      	ldr	r2, [pc, #40]	; (80015d8 <HAL_Init+0x40>)
 80015ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015b4:	4b08      	ldr	r3, [pc, #32]	; (80015d8 <HAL_Init+0x40>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a07      	ldr	r2, [pc, #28]	; (80015d8 <HAL_Init+0x40>)
 80015ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015c0:	2003      	movs	r0, #3
 80015c2:	f000 f8fc 	bl	80017be <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015c6:	200f      	movs	r0, #15
 80015c8:	f7ff fe74 	bl	80012b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015cc:	f7ff fdb6 	bl	800113c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40023c00 	.word	0x40023c00

080015dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015e0:	4b06      	ldr	r3, [pc, #24]	; (80015fc <HAL_IncTick+0x20>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	461a      	mov	r2, r3
 80015e6:	4b06      	ldr	r3, [pc, #24]	; (8001600 <HAL_IncTick+0x24>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4413      	add	r3, r2
 80015ec:	4a04      	ldr	r2, [pc, #16]	; (8001600 <HAL_IncTick+0x24>)
 80015ee:	6013      	str	r3, [r2, #0]
}
 80015f0:	bf00      	nop
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	20000010 	.word	0x20000010
 8001600:	200009b8 	.word	0x200009b8

08001604 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  return uwTick;
 8001608:	4b03      	ldr	r3, [pc, #12]	; (8001618 <HAL_GetTick+0x14>)
 800160a:	681b      	ldr	r3, [r3, #0]
}
 800160c:	4618      	mov	r0, r3
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	200009b8 	.word	0x200009b8

0800161c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001624:	f7ff ffee 	bl	8001604 <HAL_GetTick>
 8001628:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001634:	d005      	beq.n	8001642 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001636:	4b0a      	ldr	r3, [pc, #40]	; (8001660 <HAL_Delay+0x44>)
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	461a      	mov	r2, r3
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	4413      	add	r3, r2
 8001640:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001642:	bf00      	nop
 8001644:	f7ff ffde 	bl	8001604 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	429a      	cmp	r2, r3
 8001652:	d8f7      	bhi.n	8001644 <HAL_Delay+0x28>
  {
  }
}
 8001654:	bf00      	nop
 8001656:	bf00      	nop
 8001658:	3710      	adds	r7, #16
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	20000010 	.word	0x20000010

08001664 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001664:	b480      	push	{r7}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f003 0307 	and.w	r3, r3, #7
 8001672:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001674:	4b0c      	ldr	r3, [pc, #48]	; (80016a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800167a:	68ba      	ldr	r2, [r7, #8]
 800167c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001680:	4013      	ands	r3, r2
 8001682:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800168c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001690:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001694:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001696:	4a04      	ldr	r2, [pc, #16]	; (80016a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	60d3      	str	r3, [r2, #12]
}
 800169c:	bf00      	nop
 800169e:	3714      	adds	r7, #20
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr
 80016a8:	e000ed00 	.word	0xe000ed00

080016ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016b0:	4b04      	ldr	r3, [pc, #16]	; (80016c4 <__NVIC_GetPriorityGrouping+0x18>)
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	0a1b      	lsrs	r3, r3, #8
 80016b6:	f003 0307 	and.w	r3, r3, #7
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	e000ed00 	.word	0xe000ed00

080016c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	4603      	mov	r3, r0
 80016d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	db0b      	blt.n	80016f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016da:	79fb      	ldrb	r3, [r7, #7]
 80016dc:	f003 021f 	and.w	r2, r3, #31
 80016e0:	4907      	ldr	r1, [pc, #28]	; (8001700 <__NVIC_EnableIRQ+0x38>)
 80016e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e6:	095b      	lsrs	r3, r3, #5
 80016e8:	2001      	movs	r0, #1
 80016ea:	fa00 f202 	lsl.w	r2, r0, r2
 80016ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016f2:	bf00      	nop
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	e000e100 	.word	0xe000e100

08001704 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	6039      	str	r1, [r7, #0]
 800170e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001714:	2b00      	cmp	r3, #0
 8001716:	db0a      	blt.n	800172e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	b2da      	uxtb	r2, r3
 800171c:	490c      	ldr	r1, [pc, #48]	; (8001750 <__NVIC_SetPriority+0x4c>)
 800171e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001722:	0112      	lsls	r2, r2, #4
 8001724:	b2d2      	uxtb	r2, r2
 8001726:	440b      	add	r3, r1
 8001728:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800172c:	e00a      	b.n	8001744 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	b2da      	uxtb	r2, r3
 8001732:	4908      	ldr	r1, [pc, #32]	; (8001754 <__NVIC_SetPriority+0x50>)
 8001734:	79fb      	ldrb	r3, [r7, #7]
 8001736:	f003 030f 	and.w	r3, r3, #15
 800173a:	3b04      	subs	r3, #4
 800173c:	0112      	lsls	r2, r2, #4
 800173e:	b2d2      	uxtb	r2, r2
 8001740:	440b      	add	r3, r1
 8001742:	761a      	strb	r2, [r3, #24]
}
 8001744:	bf00      	nop
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr
 8001750:	e000e100 	.word	0xe000e100
 8001754:	e000ed00 	.word	0xe000ed00

08001758 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001758:	b480      	push	{r7}
 800175a:	b089      	sub	sp, #36	; 0x24
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	f003 0307 	and.w	r3, r3, #7
 800176a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	f1c3 0307 	rsb	r3, r3, #7
 8001772:	2b04      	cmp	r3, #4
 8001774:	bf28      	it	cs
 8001776:	2304      	movcs	r3, #4
 8001778:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	3304      	adds	r3, #4
 800177e:	2b06      	cmp	r3, #6
 8001780:	d902      	bls.n	8001788 <NVIC_EncodePriority+0x30>
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	3b03      	subs	r3, #3
 8001786:	e000      	b.n	800178a <NVIC_EncodePriority+0x32>
 8001788:	2300      	movs	r3, #0
 800178a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800178c:	f04f 32ff 	mov.w	r2, #4294967295
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	fa02 f303 	lsl.w	r3, r2, r3
 8001796:	43da      	mvns	r2, r3
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	401a      	ands	r2, r3
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017a0:	f04f 31ff 	mov.w	r1, #4294967295
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	fa01 f303 	lsl.w	r3, r1, r3
 80017aa:	43d9      	mvns	r1, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b0:	4313      	orrs	r3, r2
         );
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3724      	adds	r7, #36	; 0x24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr

080017be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	b082      	sub	sp, #8
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f7ff ff4c 	bl	8001664 <__NVIC_SetPriorityGrouping>
}
 80017cc:	bf00      	nop
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b086      	sub	sp, #24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	60b9      	str	r1, [r7, #8]
 80017de:	607a      	str	r2, [r7, #4]
 80017e0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017e2:	2300      	movs	r3, #0
 80017e4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017e6:	f7ff ff61 	bl	80016ac <__NVIC_GetPriorityGrouping>
 80017ea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	68b9      	ldr	r1, [r7, #8]
 80017f0:	6978      	ldr	r0, [r7, #20]
 80017f2:	f7ff ffb1 	bl	8001758 <NVIC_EncodePriority>
 80017f6:	4602      	mov	r2, r0
 80017f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017fc:	4611      	mov	r1, r2
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff ff80 	bl	8001704 <__NVIC_SetPriority>
}
 8001804:	bf00      	nop
 8001806:	3718      	adds	r7, #24
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}

0800180c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff ff54 	bl	80016c8 <__NVIC_EnableIRQ>
}
 8001820:	bf00      	nop
 8001822:	3708      	adds	r7, #8
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}

08001828 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001828:	b480      	push	{r7}
 800182a:	b089      	sub	sp, #36	; 0x24
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001832:	2300      	movs	r3, #0
 8001834:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001836:	2300      	movs	r3, #0
 8001838:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800183a:	2300      	movs	r3, #0
 800183c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800183e:	2300      	movs	r3, #0
 8001840:	61fb      	str	r3, [r7, #28]
 8001842:	e159      	b.n	8001af8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001844:	2201      	movs	r2, #1
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	697a      	ldr	r2, [r7, #20]
 8001854:	4013      	ands	r3, r2
 8001856:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001858:	693a      	ldr	r2, [r7, #16]
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	429a      	cmp	r2, r3
 800185e:	f040 8148 	bne.w	8001af2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f003 0303 	and.w	r3, r3, #3
 800186a:	2b01      	cmp	r3, #1
 800186c:	d005      	beq.n	800187a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001876:	2b02      	cmp	r3, #2
 8001878:	d130      	bne.n	80018dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	2203      	movs	r2, #3
 8001886:	fa02 f303 	lsl.w	r3, r2, r3
 800188a:	43db      	mvns	r3, r3
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	4013      	ands	r3, r2
 8001890:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	68da      	ldr	r2, [r3, #12]
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018b0:	2201      	movs	r2, #1
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	43db      	mvns	r3, r3
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	4013      	ands	r3, r2
 80018be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	091b      	lsrs	r3, r3, #4
 80018c6:	f003 0201 	and.w	r2, r3, #1
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f003 0303 	and.w	r3, r3, #3
 80018e4:	2b03      	cmp	r3, #3
 80018e6:	d017      	beq.n	8001918 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	2203      	movs	r2, #3
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	43db      	mvns	r3, r3
 80018fa:	69ba      	ldr	r2, [r7, #24]
 80018fc:	4013      	ands	r3, r2
 80018fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	689a      	ldr	r2, [r3, #8]
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	4313      	orrs	r3, r2
 8001910:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f003 0303 	and.w	r3, r3, #3
 8001920:	2b02      	cmp	r3, #2
 8001922:	d123      	bne.n	800196c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	08da      	lsrs	r2, r3, #3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	3208      	adds	r2, #8
 800192c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001930:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	f003 0307 	and.w	r3, r3, #7
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	220f      	movs	r2, #15
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	43db      	mvns	r3, r3
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	4013      	ands	r3, r2
 8001946:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	691a      	ldr	r2, [r3, #16]
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	f003 0307 	and.w	r3, r3, #7
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	4313      	orrs	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	08da      	lsrs	r2, r3, #3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	3208      	adds	r2, #8
 8001966:	69b9      	ldr	r1, [r7, #24]
 8001968:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	2203      	movs	r2, #3
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	43db      	mvns	r3, r3
 800197e:	69ba      	ldr	r2, [r7, #24]
 8001980:	4013      	ands	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f003 0203 	and.w	r2, r3, #3
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	4313      	orrs	r3, r2
 8001998:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	f000 80a2 	beq.w	8001af2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	60fb      	str	r3, [r7, #12]
 80019b2:	4b57      	ldr	r3, [pc, #348]	; (8001b10 <HAL_GPIO_Init+0x2e8>)
 80019b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b6:	4a56      	ldr	r2, [pc, #344]	; (8001b10 <HAL_GPIO_Init+0x2e8>)
 80019b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019bc:	6453      	str	r3, [r2, #68]	; 0x44
 80019be:	4b54      	ldr	r3, [pc, #336]	; (8001b10 <HAL_GPIO_Init+0x2e8>)
 80019c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019c6:	60fb      	str	r3, [r7, #12]
 80019c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019ca:	4a52      	ldr	r2, [pc, #328]	; (8001b14 <HAL_GPIO_Init+0x2ec>)
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	089b      	lsrs	r3, r3, #2
 80019d0:	3302      	adds	r3, #2
 80019d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	f003 0303 	and.w	r3, r3, #3
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	220f      	movs	r2, #15
 80019e2:	fa02 f303 	lsl.w	r3, r2, r3
 80019e6:	43db      	mvns	r3, r3
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	4013      	ands	r3, r2
 80019ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a49      	ldr	r2, [pc, #292]	; (8001b18 <HAL_GPIO_Init+0x2f0>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d019      	beq.n	8001a2a <HAL_GPIO_Init+0x202>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a48      	ldr	r2, [pc, #288]	; (8001b1c <HAL_GPIO_Init+0x2f4>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d013      	beq.n	8001a26 <HAL_GPIO_Init+0x1fe>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a47      	ldr	r2, [pc, #284]	; (8001b20 <HAL_GPIO_Init+0x2f8>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d00d      	beq.n	8001a22 <HAL_GPIO_Init+0x1fa>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a46      	ldr	r2, [pc, #280]	; (8001b24 <HAL_GPIO_Init+0x2fc>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d007      	beq.n	8001a1e <HAL_GPIO_Init+0x1f6>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a45      	ldr	r2, [pc, #276]	; (8001b28 <HAL_GPIO_Init+0x300>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d101      	bne.n	8001a1a <HAL_GPIO_Init+0x1f2>
 8001a16:	2304      	movs	r3, #4
 8001a18:	e008      	b.n	8001a2c <HAL_GPIO_Init+0x204>
 8001a1a:	2307      	movs	r3, #7
 8001a1c:	e006      	b.n	8001a2c <HAL_GPIO_Init+0x204>
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e004      	b.n	8001a2c <HAL_GPIO_Init+0x204>
 8001a22:	2302      	movs	r3, #2
 8001a24:	e002      	b.n	8001a2c <HAL_GPIO_Init+0x204>
 8001a26:	2301      	movs	r3, #1
 8001a28:	e000      	b.n	8001a2c <HAL_GPIO_Init+0x204>
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	69fa      	ldr	r2, [r7, #28]
 8001a2e:	f002 0203 	and.w	r2, r2, #3
 8001a32:	0092      	lsls	r2, r2, #2
 8001a34:	4093      	lsls	r3, r2
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a3c:	4935      	ldr	r1, [pc, #212]	; (8001b14 <HAL_GPIO_Init+0x2ec>)
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	089b      	lsrs	r3, r3, #2
 8001a42:	3302      	adds	r3, #2
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a4a:	4b38      	ldr	r3, [pc, #224]	; (8001b2c <HAL_GPIO_Init+0x304>)
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	43db      	mvns	r3, r3
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	4013      	ands	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d003      	beq.n	8001a6e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001a66:	69ba      	ldr	r2, [r7, #24]
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a6e:	4a2f      	ldr	r2, [pc, #188]	; (8001b2c <HAL_GPIO_Init+0x304>)
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a74:	4b2d      	ldr	r3, [pc, #180]	; (8001b2c <HAL_GPIO_Init+0x304>)
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	4013      	ands	r3, r2
 8001a82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d003      	beq.n	8001a98 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a98:	4a24      	ldr	r2, [pc, #144]	; (8001b2c <HAL_GPIO_Init+0x304>)
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a9e:	4b23      	ldr	r3, [pc, #140]	; (8001b2c <HAL_GPIO_Init+0x304>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d003      	beq.n	8001ac2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ac2:	4a1a      	ldr	r2, [pc, #104]	; (8001b2c <HAL_GPIO_Init+0x304>)
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ac8:	4b18      	ldr	r3, [pc, #96]	; (8001b2c <HAL_GPIO_Init+0x304>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d003      	beq.n	8001aec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001aec:	4a0f      	ldr	r2, [pc, #60]	; (8001b2c <HAL_GPIO_Init+0x304>)
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	3301      	adds	r3, #1
 8001af6:	61fb      	str	r3, [r7, #28]
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	2b0f      	cmp	r3, #15
 8001afc:	f67f aea2 	bls.w	8001844 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b00:	bf00      	nop
 8001b02:	bf00      	nop
 8001b04:	3724      	adds	r7, #36	; 0x24
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	40023800 	.word	0x40023800
 8001b14:	40013800 	.word	0x40013800
 8001b18:	40020000 	.word	0x40020000
 8001b1c:	40020400 	.word	0x40020400
 8001b20:	40020800 	.word	0x40020800
 8001b24:	40020c00 	.word	0x40020c00
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	40013c00 	.word	0x40013c00

08001b30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	460b      	mov	r3, r1
 8001b3a:	807b      	strh	r3, [r7, #2]
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b40:	787b      	ldrb	r3, [r7, #1]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d003      	beq.n	8001b4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b46:	887a      	ldrh	r2, [r7, #2]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b4c:	e003      	b.n	8001b56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b4e:	887b      	ldrh	r3, [r7, #2]
 8001b50:	041a      	lsls	r2, r3, #16
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	619a      	str	r2, [r3, #24]
}
 8001b56:	bf00      	nop
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
	...

08001b64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d101      	bne.n	8001b76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e12b      	b.n	8001dce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d106      	bne.n	8001b90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2200      	movs	r2, #0
 8001b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f7ff fb02 	bl	8001194 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2224      	movs	r2, #36	; 0x24
 8001b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f022 0201 	bic.w	r2, r2, #1
 8001ba6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001bb6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001bc6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001bc8:	f001 f986 	bl	8002ed8 <HAL_RCC_GetPCLK1Freq>
 8001bcc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	4a81      	ldr	r2, [pc, #516]	; (8001dd8 <HAL_I2C_Init+0x274>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d807      	bhi.n	8001be8 <HAL_I2C_Init+0x84>
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	4a80      	ldr	r2, [pc, #512]	; (8001ddc <HAL_I2C_Init+0x278>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	bf94      	ite	ls
 8001be0:	2301      	movls	r3, #1
 8001be2:	2300      	movhi	r3, #0
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	e006      	b.n	8001bf6 <HAL_I2C_Init+0x92>
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	4a7d      	ldr	r2, [pc, #500]	; (8001de0 <HAL_I2C_Init+0x27c>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	bf94      	ite	ls
 8001bf0:	2301      	movls	r3, #1
 8001bf2:	2300      	movhi	r3, #0
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e0e7      	b.n	8001dce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	4a78      	ldr	r2, [pc, #480]	; (8001de4 <HAL_I2C_Init+0x280>)
 8001c02:	fba2 2303 	umull	r2, r3, r2, r3
 8001c06:	0c9b      	lsrs	r3, r3, #18
 8001c08:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	68ba      	ldr	r2, [r7, #8]
 8001c1a:	430a      	orrs	r2, r1
 8001c1c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	6a1b      	ldr	r3, [r3, #32]
 8001c24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	4a6a      	ldr	r2, [pc, #424]	; (8001dd8 <HAL_I2C_Init+0x274>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d802      	bhi.n	8001c38 <HAL_I2C_Init+0xd4>
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	3301      	adds	r3, #1
 8001c36:	e009      	b.n	8001c4c <HAL_I2C_Init+0xe8>
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001c3e:	fb02 f303 	mul.w	r3, r2, r3
 8001c42:	4a69      	ldr	r2, [pc, #420]	; (8001de8 <HAL_I2C_Init+0x284>)
 8001c44:	fba2 2303 	umull	r2, r3, r2, r3
 8001c48:	099b      	lsrs	r3, r3, #6
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	6812      	ldr	r2, [r2, #0]
 8001c50:	430b      	orrs	r3, r1
 8001c52:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	69db      	ldr	r3, [r3, #28]
 8001c5a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001c5e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	495c      	ldr	r1, [pc, #368]	; (8001dd8 <HAL_I2C_Init+0x274>)
 8001c68:	428b      	cmp	r3, r1
 8001c6a:	d819      	bhi.n	8001ca0 <HAL_I2C_Init+0x13c>
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	1e59      	subs	r1, r3, #1
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c7a:	1c59      	adds	r1, r3, #1
 8001c7c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001c80:	400b      	ands	r3, r1
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d00a      	beq.n	8001c9c <HAL_I2C_Init+0x138>
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	1e59      	subs	r1, r3, #1
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c94:	3301      	adds	r3, #1
 8001c96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c9a:	e051      	b.n	8001d40 <HAL_I2C_Init+0x1dc>
 8001c9c:	2304      	movs	r3, #4
 8001c9e:	e04f      	b.n	8001d40 <HAL_I2C_Init+0x1dc>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d111      	bne.n	8001ccc <HAL_I2C_Init+0x168>
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	1e58      	subs	r0, r3, #1
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6859      	ldr	r1, [r3, #4]
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	440b      	add	r3, r1
 8001cb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cba:	3301      	adds	r3, #1
 8001cbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	bf0c      	ite	eq
 8001cc4:	2301      	moveq	r3, #1
 8001cc6:	2300      	movne	r3, #0
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	e012      	b.n	8001cf2 <HAL_I2C_Init+0x18e>
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	1e58      	subs	r0, r3, #1
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6859      	ldr	r1, [r3, #4]
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	440b      	add	r3, r1
 8001cda:	0099      	lsls	r1, r3, #2
 8001cdc:	440b      	add	r3, r1
 8001cde:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	bf0c      	ite	eq
 8001cec:	2301      	moveq	r3, #1
 8001cee:	2300      	movne	r3, #0
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <HAL_I2C_Init+0x196>
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e022      	b.n	8001d40 <HAL_I2C_Init+0x1dc>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d10e      	bne.n	8001d20 <HAL_I2C_Init+0x1bc>
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	1e58      	subs	r0, r3, #1
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6859      	ldr	r1, [r3, #4]
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	440b      	add	r3, r1
 8001d10:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d14:	3301      	adds	r3, #1
 8001d16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d1e:	e00f      	b.n	8001d40 <HAL_I2C_Init+0x1dc>
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	1e58      	subs	r0, r3, #1
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6859      	ldr	r1, [r3, #4]
 8001d28:	460b      	mov	r3, r1
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	440b      	add	r3, r1
 8001d2e:	0099      	lsls	r1, r3, #2
 8001d30:	440b      	add	r3, r1
 8001d32:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d36:	3301      	adds	r3, #1
 8001d38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d40:	6879      	ldr	r1, [r7, #4]
 8001d42:	6809      	ldr	r1, [r1, #0]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	69da      	ldr	r2, [r3, #28]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6a1b      	ldr	r3, [r3, #32]
 8001d5a:	431a      	orrs	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	430a      	orrs	r2, r1
 8001d62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001d6e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	6911      	ldr	r1, [r2, #16]
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	68d2      	ldr	r2, [r2, #12]
 8001d7a:	4311      	orrs	r1, r2
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	6812      	ldr	r2, [r2, #0]
 8001d80:	430b      	orrs	r3, r1
 8001d82:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	695a      	ldr	r2, [r3, #20]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	431a      	orrs	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f042 0201 	orr.w	r2, r2, #1
 8001dae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2220      	movs	r2, #32
 8001dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3710      	adds	r7, #16
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	000186a0 	.word	0x000186a0
 8001ddc:	001e847f 	.word	0x001e847f
 8001de0:	003d08ff 	.word	0x003d08ff
 8001de4:	431bde83 	.word	0x431bde83
 8001de8:	10624dd3 	.word	0x10624dd3

08001dec <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b088      	sub	sp, #32
 8001df0:	af02      	add	r7, sp, #8
 8001df2:	60f8      	str	r0, [r7, #12]
 8001df4:	4608      	mov	r0, r1
 8001df6:	4611      	mov	r1, r2
 8001df8:	461a      	mov	r2, r3
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	817b      	strh	r3, [r7, #10]
 8001dfe:	460b      	mov	r3, r1
 8001e00:	813b      	strh	r3, [r7, #8]
 8001e02:	4613      	mov	r3, r2
 8001e04:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e06:	f7ff fbfd 	bl	8001604 <HAL_GetTick>
 8001e0a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	2b20      	cmp	r3, #32
 8001e16:	f040 80d9 	bne.w	8001fcc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	9300      	str	r3, [sp, #0]
 8001e1e:	2319      	movs	r3, #25
 8001e20:	2201      	movs	r2, #1
 8001e22:	496d      	ldr	r1, [pc, #436]	; (8001fd8 <HAL_I2C_Mem_Write+0x1ec>)
 8001e24:	68f8      	ldr	r0, [r7, #12]
 8001e26:	f000 fa9f 	bl	8002368 <I2C_WaitOnFlagUntilTimeout>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001e30:	2302      	movs	r3, #2
 8001e32:	e0cc      	b.n	8001fce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d101      	bne.n	8001e42 <HAL_I2C_Mem_Write+0x56>
 8001e3e:	2302      	movs	r3, #2
 8001e40:	e0c5      	b.n	8001fce <HAL_I2C_Mem_Write+0x1e2>
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2201      	movs	r2, #1
 8001e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d007      	beq.n	8001e68 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f042 0201 	orr.w	r2, r2, #1
 8001e66:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e76:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2221      	movs	r2, #33	; 0x21
 8001e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2240      	movs	r2, #64	; 0x40
 8001e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	6a3a      	ldr	r2, [r7, #32]
 8001e92:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001e98:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e9e:	b29a      	uxth	r2, r3
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	4a4d      	ldr	r2, [pc, #308]	; (8001fdc <HAL_I2C_Mem_Write+0x1f0>)
 8001ea8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001eaa:	88f8      	ldrh	r0, [r7, #6]
 8001eac:	893a      	ldrh	r2, [r7, #8]
 8001eae:	8979      	ldrh	r1, [r7, #10]
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	9301      	str	r3, [sp, #4]
 8001eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eb6:	9300      	str	r3, [sp, #0]
 8001eb8:	4603      	mov	r3, r0
 8001eba:	68f8      	ldr	r0, [r7, #12]
 8001ebc:	f000 f9be 	bl	800223c <I2C_RequestMemoryWrite>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d052      	beq.n	8001f6c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e081      	b.n	8001fce <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001eca:	697a      	ldr	r2, [r7, #20]
 8001ecc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ece:	68f8      	ldr	r0, [r7, #12]
 8001ed0:	f000 fb20 	bl	8002514 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d00d      	beq.n	8001ef6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ede:	2b04      	cmp	r3, #4
 8001ee0:	d107      	bne.n	8001ef2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ef0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e06b      	b.n	8001fce <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efa:	781a      	ldrb	r2, [r3, #0]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f06:	1c5a      	adds	r2, r3, #1
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f10:	3b01      	subs	r3, #1
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	b29a      	uxth	r2, r3
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	695b      	ldr	r3, [r3, #20]
 8001f2c:	f003 0304 	and.w	r3, r3, #4
 8001f30:	2b04      	cmp	r3, #4
 8001f32:	d11b      	bne.n	8001f6c <HAL_I2C_Mem_Write+0x180>
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d017      	beq.n	8001f6c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f40:	781a      	ldrb	r2, [r3, #0]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4c:	1c5a      	adds	r2, r3, #1
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f56:	3b01      	subs	r3, #1
 8001f58:	b29a      	uxth	r2, r3
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	3b01      	subs	r3, #1
 8001f66:	b29a      	uxth	r2, r3
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d1aa      	bne.n	8001eca <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f74:	697a      	ldr	r2, [r7, #20]
 8001f76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f78:	68f8      	ldr	r0, [r7, #12]
 8001f7a:	f000 fb0c 	bl	8002596 <I2C_WaitOnBTFFlagUntilTimeout>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d00d      	beq.n	8001fa0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f88:	2b04      	cmp	r3, #4
 8001f8a:	d107      	bne.n	8001f9c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f9a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e016      	b.n	8001fce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2220      	movs	r2, #32
 8001fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	e000      	b.n	8001fce <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001fcc:	2302      	movs	r3, #2
  }
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3718      	adds	r7, #24
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	00100002 	.word	0x00100002
 8001fdc:	ffff0000 	.word	0xffff0000

08001fe0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b08a      	sub	sp, #40	; 0x28
 8001fe4:	af02      	add	r7, sp, #8
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	607a      	str	r2, [r7, #4]
 8001fea:	603b      	str	r3, [r7, #0]
 8001fec:	460b      	mov	r3, r1
 8001fee:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001ff0:	f7ff fb08 	bl	8001604 <HAL_GetTick>
 8001ff4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002000:	b2db      	uxtb	r3, r3
 8002002:	2b20      	cmp	r3, #32
 8002004:	f040 8111 	bne.w	800222a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	9300      	str	r3, [sp, #0]
 800200c:	2319      	movs	r3, #25
 800200e:	2201      	movs	r2, #1
 8002010:	4988      	ldr	r1, [pc, #544]	; (8002234 <HAL_I2C_IsDeviceReady+0x254>)
 8002012:	68f8      	ldr	r0, [r7, #12]
 8002014:	f000 f9a8 	bl	8002368 <I2C_WaitOnFlagUntilTimeout>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800201e:	2302      	movs	r3, #2
 8002020:	e104      	b.n	800222c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002028:	2b01      	cmp	r3, #1
 800202a:	d101      	bne.n	8002030 <HAL_I2C_IsDeviceReady+0x50>
 800202c:	2302      	movs	r3, #2
 800202e:	e0fd      	b.n	800222c <HAL_I2C_IsDeviceReady+0x24c>
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	2b01      	cmp	r3, #1
 8002044:	d007      	beq.n	8002056 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f042 0201 	orr.w	r2, r2, #1
 8002054:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002064:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2224      	movs	r2, #36	; 0x24
 800206a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2200      	movs	r2, #0
 8002072:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	4a70      	ldr	r2, [pc, #448]	; (8002238 <HAL_I2C_IsDeviceReady+0x258>)
 8002078:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002088:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	9300      	str	r3, [sp, #0]
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	2200      	movs	r2, #0
 8002092:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002096:	68f8      	ldr	r0, [r7, #12]
 8002098:	f000 f966 	bl	8002368 <I2C_WaitOnFlagUntilTimeout>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d00d      	beq.n	80020be <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020b0:	d103      	bne.n	80020ba <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020b8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e0b6      	b.n	800222c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80020be:	897b      	ldrh	r3, [r7, #10]
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	461a      	mov	r2, r3
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80020cc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80020ce:	f7ff fa99 	bl	8001604 <HAL_GetTick>
 80020d2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	695b      	ldr	r3, [r3, #20]
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	2b02      	cmp	r3, #2
 80020e0:	bf0c      	ite	eq
 80020e2:	2301      	moveq	r3, #1
 80020e4:	2300      	movne	r3, #0
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	695b      	ldr	r3, [r3, #20]
 80020f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020f8:	bf0c      	ite	eq
 80020fa:	2301      	moveq	r3, #1
 80020fc:	2300      	movne	r3, #0
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002102:	e025      	b.n	8002150 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002104:	f7ff fa7e 	bl	8001604 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	683a      	ldr	r2, [r7, #0]
 8002110:	429a      	cmp	r2, r3
 8002112:	d302      	bcc.n	800211a <HAL_I2C_IsDeviceReady+0x13a>
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d103      	bne.n	8002122 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	22a0      	movs	r2, #160	; 0xa0
 800211e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	695b      	ldr	r3, [r3, #20]
 8002128:	f003 0302 	and.w	r3, r3, #2
 800212c:	2b02      	cmp	r3, #2
 800212e:	bf0c      	ite	eq
 8002130:	2301      	moveq	r3, #1
 8002132:	2300      	movne	r3, #0
 8002134:	b2db      	uxtb	r3, r3
 8002136:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	695b      	ldr	r3, [r3, #20]
 800213e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002142:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002146:	bf0c      	ite	eq
 8002148:	2301      	moveq	r3, #1
 800214a:	2300      	movne	r3, #0
 800214c:	b2db      	uxtb	r3, r3
 800214e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002156:	b2db      	uxtb	r3, r3
 8002158:	2ba0      	cmp	r3, #160	; 0xa0
 800215a:	d005      	beq.n	8002168 <HAL_I2C_IsDeviceReady+0x188>
 800215c:	7dfb      	ldrb	r3, [r7, #23]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d102      	bne.n	8002168 <HAL_I2C_IsDeviceReady+0x188>
 8002162:	7dbb      	ldrb	r3, [r7, #22]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d0cd      	beq.n	8002104 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2220      	movs	r2, #32
 800216c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	695b      	ldr	r3, [r3, #20]
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	2b02      	cmp	r3, #2
 800217c:	d129      	bne.n	80021d2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800218c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800218e:	2300      	movs	r3, #0
 8002190:	613b      	str	r3, [r7, #16]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	695b      	ldr	r3, [r3, #20]
 8002198:	613b      	str	r3, [r7, #16]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	613b      	str	r3, [r7, #16]
 80021a2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	9300      	str	r3, [sp, #0]
 80021a8:	2319      	movs	r3, #25
 80021aa:	2201      	movs	r2, #1
 80021ac:	4921      	ldr	r1, [pc, #132]	; (8002234 <HAL_I2C_IsDeviceReady+0x254>)
 80021ae:	68f8      	ldr	r0, [r7, #12]
 80021b0:	f000 f8da 	bl	8002368 <I2C_WaitOnFlagUntilTimeout>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e036      	b.n	800222c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2220      	movs	r2, #32
 80021c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80021ce:	2300      	movs	r3, #0
 80021d0:	e02c      	b.n	800222c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021e0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80021ea:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	9300      	str	r3, [sp, #0]
 80021f0:	2319      	movs	r3, #25
 80021f2:	2201      	movs	r2, #1
 80021f4:	490f      	ldr	r1, [pc, #60]	; (8002234 <HAL_I2C_IsDeviceReady+0x254>)
 80021f6:	68f8      	ldr	r0, [r7, #12]
 80021f8:	f000 f8b6 	bl	8002368 <I2C_WaitOnFlagUntilTimeout>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e012      	b.n	800222c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	3301      	adds	r3, #1
 800220a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	429a      	cmp	r2, r3
 8002212:	f4ff af32 	bcc.w	800207a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2220      	movs	r2, #32
 800221a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e000      	b.n	800222c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800222a:	2302      	movs	r3, #2
  }
}
 800222c:	4618      	mov	r0, r3
 800222e:	3720      	adds	r7, #32
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	00100002 	.word	0x00100002
 8002238:	ffff0000 	.word	0xffff0000

0800223c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b088      	sub	sp, #32
 8002240:	af02      	add	r7, sp, #8
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	4608      	mov	r0, r1
 8002246:	4611      	mov	r1, r2
 8002248:	461a      	mov	r2, r3
 800224a:	4603      	mov	r3, r0
 800224c:	817b      	strh	r3, [r7, #10]
 800224e:	460b      	mov	r3, r1
 8002250:	813b      	strh	r3, [r7, #8]
 8002252:	4613      	mov	r3, r2
 8002254:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002264:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002268:	9300      	str	r3, [sp, #0]
 800226a:	6a3b      	ldr	r3, [r7, #32]
 800226c:	2200      	movs	r2, #0
 800226e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002272:	68f8      	ldr	r0, [r7, #12]
 8002274:	f000 f878 	bl	8002368 <I2C_WaitOnFlagUntilTimeout>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d00d      	beq.n	800229a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002288:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800228c:	d103      	bne.n	8002296 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002294:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e05f      	b.n	800235a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800229a:	897b      	ldrh	r3, [r7, #10]
 800229c:	b2db      	uxtb	r3, r3
 800229e:	461a      	mov	r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80022a8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80022aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ac:	6a3a      	ldr	r2, [r7, #32]
 80022ae:	492d      	ldr	r1, [pc, #180]	; (8002364 <I2C_RequestMemoryWrite+0x128>)
 80022b0:	68f8      	ldr	r0, [r7, #12]
 80022b2:	f000 f8b0 	bl	8002416 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e04c      	b.n	800235a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022c0:	2300      	movs	r3, #0
 80022c2:	617b      	str	r3, [r7, #20]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	695b      	ldr	r3, [r3, #20]
 80022ca:	617b      	str	r3, [r7, #20]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	699b      	ldr	r3, [r3, #24]
 80022d2:	617b      	str	r3, [r7, #20]
 80022d4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022d8:	6a39      	ldr	r1, [r7, #32]
 80022da:	68f8      	ldr	r0, [r7, #12]
 80022dc:	f000 f91a 	bl	8002514 <I2C_WaitOnTXEFlagUntilTimeout>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d00d      	beq.n	8002302 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ea:	2b04      	cmp	r3, #4
 80022ec:	d107      	bne.n	80022fe <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022fc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e02b      	b.n	800235a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002302:	88fb      	ldrh	r3, [r7, #6]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d105      	bne.n	8002314 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002308:	893b      	ldrh	r3, [r7, #8]
 800230a:	b2da      	uxtb	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	611a      	str	r2, [r3, #16]
 8002312:	e021      	b.n	8002358 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002314:	893b      	ldrh	r3, [r7, #8]
 8002316:	0a1b      	lsrs	r3, r3, #8
 8002318:	b29b      	uxth	r3, r3
 800231a:	b2da      	uxtb	r2, r3
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002322:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002324:	6a39      	ldr	r1, [r7, #32]
 8002326:	68f8      	ldr	r0, [r7, #12]
 8002328:	f000 f8f4 	bl	8002514 <I2C_WaitOnTXEFlagUntilTimeout>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d00d      	beq.n	800234e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002336:	2b04      	cmp	r3, #4
 8002338:	d107      	bne.n	800234a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002348:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e005      	b.n	800235a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800234e:	893b      	ldrh	r3, [r7, #8]
 8002350:	b2da      	uxtb	r2, r3
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3718      	adds	r7, #24
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	00010002 	.word	0x00010002

08002368 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	603b      	str	r3, [r7, #0]
 8002374:	4613      	mov	r3, r2
 8002376:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002378:	e025      	b.n	80023c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002380:	d021      	beq.n	80023c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002382:	f7ff f93f 	bl	8001604 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	683a      	ldr	r2, [r7, #0]
 800238e:	429a      	cmp	r2, r3
 8002390:	d302      	bcc.n	8002398 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d116      	bne.n	80023c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2200      	movs	r2, #0
 800239c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2220      	movs	r2, #32
 80023a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2200      	movs	r2, #0
 80023aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b2:	f043 0220 	orr.w	r2, r3, #32
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e023      	b.n	800240e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	0c1b      	lsrs	r3, r3, #16
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d10d      	bne.n	80023ec <I2C_WaitOnFlagUntilTimeout+0x84>
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	695b      	ldr	r3, [r3, #20]
 80023d6:	43da      	mvns	r2, r3
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	4013      	ands	r3, r2
 80023dc:	b29b      	uxth	r3, r3
 80023de:	2b00      	cmp	r3, #0
 80023e0:	bf0c      	ite	eq
 80023e2:	2301      	moveq	r3, #1
 80023e4:	2300      	movne	r3, #0
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	461a      	mov	r2, r3
 80023ea:	e00c      	b.n	8002406 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	43da      	mvns	r2, r3
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	4013      	ands	r3, r2
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	bf0c      	ite	eq
 80023fe:	2301      	moveq	r3, #1
 8002400:	2300      	movne	r3, #0
 8002402:	b2db      	uxtb	r3, r3
 8002404:	461a      	mov	r2, r3
 8002406:	79fb      	ldrb	r3, [r7, #7]
 8002408:	429a      	cmp	r2, r3
 800240a:	d0b6      	beq.n	800237a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}

08002416 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002416:	b580      	push	{r7, lr}
 8002418:	b084      	sub	sp, #16
 800241a:	af00      	add	r7, sp, #0
 800241c:	60f8      	str	r0, [r7, #12]
 800241e:	60b9      	str	r1, [r7, #8]
 8002420:	607a      	str	r2, [r7, #4]
 8002422:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002424:	e051      	b.n	80024ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	695b      	ldr	r3, [r3, #20]
 800242c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002430:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002434:	d123      	bne.n	800247e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002444:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800244e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2200      	movs	r2, #0
 8002454:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2220      	movs	r2, #32
 800245a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2200      	movs	r2, #0
 8002462:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246a:	f043 0204 	orr.w	r2, r3, #4
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2200      	movs	r2, #0
 8002476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e046      	b.n	800250c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002484:	d021      	beq.n	80024ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002486:	f7ff f8bd 	bl	8001604 <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	429a      	cmp	r2, r3
 8002494:	d302      	bcc.n	800249c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d116      	bne.n	80024ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2200      	movs	r2, #0
 80024a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2220      	movs	r2, #32
 80024a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b6:	f043 0220 	orr.w	r2, r3, #32
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e020      	b.n	800250c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	0c1b      	lsrs	r3, r3, #16
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d10c      	bne.n	80024ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	43da      	mvns	r2, r3
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	4013      	ands	r3, r2
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	bf14      	ite	ne
 80024e6:	2301      	movne	r3, #1
 80024e8:	2300      	moveq	r3, #0
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	e00b      	b.n	8002506 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	43da      	mvns	r2, r3
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	4013      	ands	r3, r2
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	bf14      	ite	ne
 8002500:	2301      	movne	r3, #1
 8002502:	2300      	moveq	r3, #0
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b00      	cmp	r3, #0
 8002508:	d18d      	bne.n	8002426 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800250a:	2300      	movs	r3, #0
}
 800250c:	4618      	mov	r0, r3
 800250e:	3710      	adds	r7, #16
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}

08002514 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002520:	e02d      	b.n	800257e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002522:	68f8      	ldr	r0, [r7, #12]
 8002524:	f000 f878 	bl	8002618 <I2C_IsAcknowledgeFailed>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e02d      	b.n	800258e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002538:	d021      	beq.n	800257e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800253a:	f7ff f863 	bl	8001604 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	68ba      	ldr	r2, [r7, #8]
 8002546:	429a      	cmp	r2, r3
 8002548:	d302      	bcc.n	8002550 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d116      	bne.n	800257e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2200      	movs	r2, #0
 8002554:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2220      	movs	r2, #32
 800255a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256a:	f043 0220 	orr.w	r2, r3, #32
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2200      	movs	r2, #0
 8002576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e007      	b.n	800258e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	695b      	ldr	r3, [r3, #20]
 8002584:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002588:	2b80      	cmp	r3, #128	; 0x80
 800258a:	d1ca      	bne.n	8002522 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3710      	adds	r7, #16
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002596:	b580      	push	{r7, lr}
 8002598:	b084      	sub	sp, #16
 800259a:	af00      	add	r7, sp, #0
 800259c:	60f8      	str	r0, [r7, #12]
 800259e:	60b9      	str	r1, [r7, #8]
 80025a0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80025a2:	e02d      	b.n	8002600 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80025a4:	68f8      	ldr	r0, [r7, #12]
 80025a6:	f000 f837 	bl	8002618 <I2C_IsAcknowledgeFailed>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d001      	beq.n	80025b4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e02d      	b.n	8002610 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ba:	d021      	beq.n	8002600 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025bc:	f7ff f822 	bl	8001604 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	68ba      	ldr	r2, [r7, #8]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d302      	bcc.n	80025d2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d116      	bne.n	8002600 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2200      	movs	r2, #0
 80025d6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2220      	movs	r2, #32
 80025dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ec:	f043 0220 	orr.w	r2, r3, #32
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e007      	b.n	8002610 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	695b      	ldr	r3, [r3, #20]
 8002606:	f003 0304 	and.w	r3, r3, #4
 800260a:	2b04      	cmp	r3, #4
 800260c:	d1ca      	bne.n	80025a4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800260e:	2300      	movs	r3, #0
}
 8002610:	4618      	mov	r0, r3
 8002612:	3710      	adds	r7, #16
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	695b      	ldr	r3, [r3, #20]
 8002626:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800262a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800262e:	d11b      	bne.n	8002668 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002638:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2220      	movs	r2, #32
 8002644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002654:	f043 0204 	orr.w	r2, r3, #4
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e000      	b.n	800266a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
	...

08002678 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b086      	sub	sp, #24
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d101      	bne.n	800268a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e267      	b.n	8002b5a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0301 	and.w	r3, r3, #1
 8002692:	2b00      	cmp	r3, #0
 8002694:	d075      	beq.n	8002782 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002696:	4b88      	ldr	r3, [pc, #544]	; (80028b8 <HAL_RCC_OscConfig+0x240>)
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f003 030c 	and.w	r3, r3, #12
 800269e:	2b04      	cmp	r3, #4
 80026a0:	d00c      	beq.n	80026bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026a2:	4b85      	ldr	r3, [pc, #532]	; (80028b8 <HAL_RCC_OscConfig+0x240>)
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026aa:	2b08      	cmp	r3, #8
 80026ac:	d112      	bne.n	80026d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026ae:	4b82      	ldr	r3, [pc, #520]	; (80028b8 <HAL_RCC_OscConfig+0x240>)
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026ba:	d10b      	bne.n	80026d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026bc:	4b7e      	ldr	r3, [pc, #504]	; (80028b8 <HAL_RCC_OscConfig+0x240>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d05b      	beq.n	8002780 <HAL_RCC_OscConfig+0x108>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d157      	bne.n	8002780 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e242      	b.n	8002b5a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026dc:	d106      	bne.n	80026ec <HAL_RCC_OscConfig+0x74>
 80026de:	4b76      	ldr	r3, [pc, #472]	; (80028b8 <HAL_RCC_OscConfig+0x240>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a75      	ldr	r2, [pc, #468]	; (80028b8 <HAL_RCC_OscConfig+0x240>)
 80026e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026e8:	6013      	str	r3, [r2, #0]
 80026ea:	e01d      	b.n	8002728 <HAL_RCC_OscConfig+0xb0>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026f4:	d10c      	bne.n	8002710 <HAL_RCC_OscConfig+0x98>
 80026f6:	4b70      	ldr	r3, [pc, #448]	; (80028b8 <HAL_RCC_OscConfig+0x240>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a6f      	ldr	r2, [pc, #444]	; (80028b8 <HAL_RCC_OscConfig+0x240>)
 80026fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002700:	6013      	str	r3, [r2, #0]
 8002702:	4b6d      	ldr	r3, [pc, #436]	; (80028b8 <HAL_RCC_OscConfig+0x240>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a6c      	ldr	r2, [pc, #432]	; (80028b8 <HAL_RCC_OscConfig+0x240>)
 8002708:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800270c:	6013      	str	r3, [r2, #0]
 800270e:	e00b      	b.n	8002728 <HAL_RCC_OscConfig+0xb0>
 8002710:	4b69      	ldr	r3, [pc, #420]	; (80028b8 <HAL_RCC_OscConfig+0x240>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a68      	ldr	r2, [pc, #416]	; (80028b8 <HAL_RCC_OscConfig+0x240>)
 8002716:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800271a:	6013      	str	r3, [r2, #0]
 800271c:	4b66      	ldr	r3, [pc, #408]	; (80028b8 <HAL_RCC_OscConfig+0x240>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a65      	ldr	r2, [pc, #404]	; (80028b8 <HAL_RCC_OscConfig+0x240>)
 8002722:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002726:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d013      	beq.n	8002758 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002730:	f7fe ff68 	bl	8001604 <HAL_GetTick>
 8002734:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002736:	e008      	b.n	800274a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002738:	f7fe ff64 	bl	8001604 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b64      	cmp	r3, #100	; 0x64
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e207      	b.n	8002b5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800274a:	4b5b      	ldr	r3, [pc, #364]	; (80028b8 <HAL_RCC_OscConfig+0x240>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d0f0      	beq.n	8002738 <HAL_RCC_OscConfig+0xc0>
 8002756:	e014      	b.n	8002782 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002758:	f7fe ff54 	bl	8001604 <HAL_GetTick>
 800275c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800275e:	e008      	b.n	8002772 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002760:	f7fe ff50 	bl	8001604 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b64      	cmp	r3, #100	; 0x64
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e1f3      	b.n	8002b5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002772:	4b51      	ldr	r3, [pc, #324]	; (80028b8 <HAL_RCC_OscConfig+0x240>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d1f0      	bne.n	8002760 <HAL_RCC_OscConfig+0xe8>
 800277e:	e000      	b.n	8002782 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002780:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d063      	beq.n	8002856 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800278e:	4b4a      	ldr	r3, [pc, #296]	; (80028b8 <HAL_RCC_OscConfig+0x240>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f003 030c 	and.w	r3, r3, #12
 8002796:	2b00      	cmp	r3, #0
 8002798:	d00b      	beq.n	80027b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800279a:	4b47      	ldr	r3, [pc, #284]	; (80028b8 <HAL_RCC_OscConfig+0x240>)
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027a2:	2b08      	cmp	r3, #8
 80027a4:	d11c      	bne.n	80027e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027a6:	4b44      	ldr	r3, [pc, #272]	; (80028b8 <HAL_RCC_OscConfig+0x240>)
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d116      	bne.n	80027e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027b2:	4b41      	ldr	r3, [pc, #260]	; (80028b8 <HAL_RCC_OscConfig+0x240>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d005      	beq.n	80027ca <HAL_RCC_OscConfig+0x152>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d001      	beq.n	80027ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e1c7      	b.n	8002b5a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ca:	4b3b      	ldr	r3, [pc, #236]	; (80028b8 <HAL_RCC_OscConfig+0x240>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	00db      	lsls	r3, r3, #3
 80027d8:	4937      	ldr	r1, [pc, #220]	; (80028b8 <HAL_RCC_OscConfig+0x240>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027de:	e03a      	b.n	8002856 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d020      	beq.n	800282a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027e8:	4b34      	ldr	r3, [pc, #208]	; (80028bc <HAL_RCC_OscConfig+0x244>)
 80027ea:	2201      	movs	r2, #1
 80027ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ee:	f7fe ff09 	bl	8001604 <HAL_GetTick>
 80027f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027f4:	e008      	b.n	8002808 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027f6:	f7fe ff05 	bl	8001604 <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	2b02      	cmp	r3, #2
 8002802:	d901      	bls.n	8002808 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e1a8      	b.n	8002b5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002808:	4b2b      	ldr	r3, [pc, #172]	; (80028b8 <HAL_RCC_OscConfig+0x240>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0302 	and.w	r3, r3, #2
 8002810:	2b00      	cmp	r3, #0
 8002812:	d0f0      	beq.n	80027f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002814:	4b28      	ldr	r3, [pc, #160]	; (80028b8 <HAL_RCC_OscConfig+0x240>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	691b      	ldr	r3, [r3, #16]
 8002820:	00db      	lsls	r3, r3, #3
 8002822:	4925      	ldr	r1, [pc, #148]	; (80028b8 <HAL_RCC_OscConfig+0x240>)
 8002824:	4313      	orrs	r3, r2
 8002826:	600b      	str	r3, [r1, #0]
 8002828:	e015      	b.n	8002856 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800282a:	4b24      	ldr	r3, [pc, #144]	; (80028bc <HAL_RCC_OscConfig+0x244>)
 800282c:	2200      	movs	r2, #0
 800282e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002830:	f7fe fee8 	bl	8001604 <HAL_GetTick>
 8002834:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002836:	e008      	b.n	800284a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002838:	f7fe fee4 	bl	8001604 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	2b02      	cmp	r3, #2
 8002844:	d901      	bls.n	800284a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e187      	b.n	8002b5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800284a:	4b1b      	ldr	r3, [pc, #108]	; (80028b8 <HAL_RCC_OscConfig+0x240>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	2b00      	cmp	r3, #0
 8002854:	d1f0      	bne.n	8002838 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0308 	and.w	r3, r3, #8
 800285e:	2b00      	cmp	r3, #0
 8002860:	d036      	beq.n	80028d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	695b      	ldr	r3, [r3, #20]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d016      	beq.n	8002898 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800286a:	4b15      	ldr	r3, [pc, #84]	; (80028c0 <HAL_RCC_OscConfig+0x248>)
 800286c:	2201      	movs	r2, #1
 800286e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002870:	f7fe fec8 	bl	8001604 <HAL_GetTick>
 8002874:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002876:	e008      	b.n	800288a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002878:	f7fe fec4 	bl	8001604 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b02      	cmp	r3, #2
 8002884:	d901      	bls.n	800288a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e167      	b.n	8002b5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800288a:	4b0b      	ldr	r3, [pc, #44]	; (80028b8 <HAL_RCC_OscConfig+0x240>)
 800288c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d0f0      	beq.n	8002878 <HAL_RCC_OscConfig+0x200>
 8002896:	e01b      	b.n	80028d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002898:	4b09      	ldr	r3, [pc, #36]	; (80028c0 <HAL_RCC_OscConfig+0x248>)
 800289a:	2200      	movs	r2, #0
 800289c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800289e:	f7fe feb1 	bl	8001604 <HAL_GetTick>
 80028a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028a4:	e00e      	b.n	80028c4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028a6:	f7fe fead 	bl	8001604 <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d907      	bls.n	80028c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e150      	b.n	8002b5a <HAL_RCC_OscConfig+0x4e2>
 80028b8:	40023800 	.word	0x40023800
 80028bc:	42470000 	.word	0x42470000
 80028c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028c4:	4b88      	ldr	r3, [pc, #544]	; (8002ae8 <HAL_RCC_OscConfig+0x470>)
 80028c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028c8:	f003 0302 	and.w	r3, r3, #2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d1ea      	bne.n	80028a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0304 	and.w	r3, r3, #4
 80028d8:	2b00      	cmp	r3, #0
 80028da:	f000 8097 	beq.w	8002a0c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028de:	2300      	movs	r3, #0
 80028e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028e2:	4b81      	ldr	r3, [pc, #516]	; (8002ae8 <HAL_RCC_OscConfig+0x470>)
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d10f      	bne.n	800290e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028ee:	2300      	movs	r3, #0
 80028f0:	60bb      	str	r3, [r7, #8]
 80028f2:	4b7d      	ldr	r3, [pc, #500]	; (8002ae8 <HAL_RCC_OscConfig+0x470>)
 80028f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f6:	4a7c      	ldr	r2, [pc, #496]	; (8002ae8 <HAL_RCC_OscConfig+0x470>)
 80028f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028fc:	6413      	str	r3, [r2, #64]	; 0x40
 80028fe:	4b7a      	ldr	r3, [pc, #488]	; (8002ae8 <HAL_RCC_OscConfig+0x470>)
 8002900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002906:	60bb      	str	r3, [r7, #8]
 8002908:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800290a:	2301      	movs	r3, #1
 800290c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800290e:	4b77      	ldr	r3, [pc, #476]	; (8002aec <HAL_RCC_OscConfig+0x474>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002916:	2b00      	cmp	r3, #0
 8002918:	d118      	bne.n	800294c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800291a:	4b74      	ldr	r3, [pc, #464]	; (8002aec <HAL_RCC_OscConfig+0x474>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a73      	ldr	r2, [pc, #460]	; (8002aec <HAL_RCC_OscConfig+0x474>)
 8002920:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002924:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002926:	f7fe fe6d 	bl	8001604 <HAL_GetTick>
 800292a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800292c:	e008      	b.n	8002940 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800292e:	f7fe fe69 	bl	8001604 <HAL_GetTick>
 8002932:	4602      	mov	r2, r0
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	2b02      	cmp	r3, #2
 800293a:	d901      	bls.n	8002940 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e10c      	b.n	8002b5a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002940:	4b6a      	ldr	r3, [pc, #424]	; (8002aec <HAL_RCC_OscConfig+0x474>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002948:	2b00      	cmp	r3, #0
 800294a:	d0f0      	beq.n	800292e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	2b01      	cmp	r3, #1
 8002952:	d106      	bne.n	8002962 <HAL_RCC_OscConfig+0x2ea>
 8002954:	4b64      	ldr	r3, [pc, #400]	; (8002ae8 <HAL_RCC_OscConfig+0x470>)
 8002956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002958:	4a63      	ldr	r2, [pc, #396]	; (8002ae8 <HAL_RCC_OscConfig+0x470>)
 800295a:	f043 0301 	orr.w	r3, r3, #1
 800295e:	6713      	str	r3, [r2, #112]	; 0x70
 8002960:	e01c      	b.n	800299c <HAL_RCC_OscConfig+0x324>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	2b05      	cmp	r3, #5
 8002968:	d10c      	bne.n	8002984 <HAL_RCC_OscConfig+0x30c>
 800296a:	4b5f      	ldr	r3, [pc, #380]	; (8002ae8 <HAL_RCC_OscConfig+0x470>)
 800296c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800296e:	4a5e      	ldr	r2, [pc, #376]	; (8002ae8 <HAL_RCC_OscConfig+0x470>)
 8002970:	f043 0304 	orr.w	r3, r3, #4
 8002974:	6713      	str	r3, [r2, #112]	; 0x70
 8002976:	4b5c      	ldr	r3, [pc, #368]	; (8002ae8 <HAL_RCC_OscConfig+0x470>)
 8002978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800297a:	4a5b      	ldr	r2, [pc, #364]	; (8002ae8 <HAL_RCC_OscConfig+0x470>)
 800297c:	f043 0301 	orr.w	r3, r3, #1
 8002980:	6713      	str	r3, [r2, #112]	; 0x70
 8002982:	e00b      	b.n	800299c <HAL_RCC_OscConfig+0x324>
 8002984:	4b58      	ldr	r3, [pc, #352]	; (8002ae8 <HAL_RCC_OscConfig+0x470>)
 8002986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002988:	4a57      	ldr	r2, [pc, #348]	; (8002ae8 <HAL_RCC_OscConfig+0x470>)
 800298a:	f023 0301 	bic.w	r3, r3, #1
 800298e:	6713      	str	r3, [r2, #112]	; 0x70
 8002990:	4b55      	ldr	r3, [pc, #340]	; (8002ae8 <HAL_RCC_OscConfig+0x470>)
 8002992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002994:	4a54      	ldr	r2, [pc, #336]	; (8002ae8 <HAL_RCC_OscConfig+0x470>)
 8002996:	f023 0304 	bic.w	r3, r3, #4
 800299a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d015      	beq.n	80029d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029a4:	f7fe fe2e 	bl	8001604 <HAL_GetTick>
 80029a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029aa:	e00a      	b.n	80029c2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029ac:	f7fe fe2a 	bl	8001604 <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e0cb      	b.n	8002b5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029c2:	4b49      	ldr	r3, [pc, #292]	; (8002ae8 <HAL_RCC_OscConfig+0x470>)
 80029c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d0ee      	beq.n	80029ac <HAL_RCC_OscConfig+0x334>
 80029ce:	e014      	b.n	80029fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029d0:	f7fe fe18 	bl	8001604 <HAL_GetTick>
 80029d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029d6:	e00a      	b.n	80029ee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029d8:	f7fe fe14 	bl	8001604 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e0b5      	b.n	8002b5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029ee:	4b3e      	ldr	r3, [pc, #248]	; (8002ae8 <HAL_RCC_OscConfig+0x470>)
 80029f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d1ee      	bne.n	80029d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029fa:	7dfb      	ldrb	r3, [r7, #23]
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d105      	bne.n	8002a0c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a00:	4b39      	ldr	r3, [pc, #228]	; (8002ae8 <HAL_RCC_OscConfig+0x470>)
 8002a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a04:	4a38      	ldr	r2, [pc, #224]	; (8002ae8 <HAL_RCC_OscConfig+0x470>)
 8002a06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a0a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	f000 80a1 	beq.w	8002b58 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a16:	4b34      	ldr	r3, [pc, #208]	; (8002ae8 <HAL_RCC_OscConfig+0x470>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f003 030c 	and.w	r3, r3, #12
 8002a1e:	2b08      	cmp	r3, #8
 8002a20:	d05c      	beq.n	8002adc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	699b      	ldr	r3, [r3, #24]
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d141      	bne.n	8002aae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a2a:	4b31      	ldr	r3, [pc, #196]	; (8002af0 <HAL_RCC_OscConfig+0x478>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a30:	f7fe fde8 	bl	8001604 <HAL_GetTick>
 8002a34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a36:	e008      	b.n	8002a4a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a38:	f7fe fde4 	bl	8001604 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e087      	b.n	8002b5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a4a:	4b27      	ldr	r3, [pc, #156]	; (8002ae8 <HAL_RCC_OscConfig+0x470>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1f0      	bne.n	8002a38 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	69da      	ldr	r2, [r3, #28]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a1b      	ldr	r3, [r3, #32]
 8002a5e:	431a      	orrs	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a64:	019b      	lsls	r3, r3, #6
 8002a66:	431a      	orrs	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a6c:	085b      	lsrs	r3, r3, #1
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	041b      	lsls	r3, r3, #16
 8002a72:	431a      	orrs	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a78:	061b      	lsls	r3, r3, #24
 8002a7a:	491b      	ldr	r1, [pc, #108]	; (8002ae8 <HAL_RCC_OscConfig+0x470>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a80:	4b1b      	ldr	r3, [pc, #108]	; (8002af0 <HAL_RCC_OscConfig+0x478>)
 8002a82:	2201      	movs	r2, #1
 8002a84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a86:	f7fe fdbd 	bl	8001604 <HAL_GetTick>
 8002a8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a8c:	e008      	b.n	8002aa0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a8e:	f7fe fdb9 	bl	8001604 <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d901      	bls.n	8002aa0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e05c      	b.n	8002b5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aa0:	4b11      	ldr	r3, [pc, #68]	; (8002ae8 <HAL_RCC_OscConfig+0x470>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d0f0      	beq.n	8002a8e <HAL_RCC_OscConfig+0x416>
 8002aac:	e054      	b.n	8002b58 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aae:	4b10      	ldr	r3, [pc, #64]	; (8002af0 <HAL_RCC_OscConfig+0x478>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab4:	f7fe fda6 	bl	8001604 <HAL_GetTick>
 8002ab8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aba:	e008      	b.n	8002ace <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002abc:	f7fe fda2 	bl	8001604 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e045      	b.n	8002b5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ace:	4b06      	ldr	r3, [pc, #24]	; (8002ae8 <HAL_RCC_OscConfig+0x470>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d1f0      	bne.n	8002abc <HAL_RCC_OscConfig+0x444>
 8002ada:	e03d      	b.n	8002b58 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	699b      	ldr	r3, [r3, #24]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d107      	bne.n	8002af4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e038      	b.n	8002b5a <HAL_RCC_OscConfig+0x4e2>
 8002ae8:	40023800 	.word	0x40023800
 8002aec:	40007000 	.word	0x40007000
 8002af0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002af4:	4b1b      	ldr	r3, [pc, #108]	; (8002b64 <HAL_RCC_OscConfig+0x4ec>)
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d028      	beq.n	8002b54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d121      	bne.n	8002b54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d11a      	bne.n	8002b54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b1e:	68fa      	ldr	r2, [r7, #12]
 8002b20:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b24:	4013      	ands	r3, r2
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b2a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d111      	bne.n	8002b54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b3a:	085b      	lsrs	r3, r3, #1
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d107      	bne.n	8002b54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b4e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d001      	beq.n	8002b58 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e000      	b.n	8002b5a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3718      	adds	r7, #24
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	40023800 	.word	0x40023800

08002b68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d101      	bne.n	8002b7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e0cc      	b.n	8002d16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b7c:	4b68      	ldr	r3, [pc, #416]	; (8002d20 <HAL_RCC_ClockConfig+0x1b8>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0307 	and.w	r3, r3, #7
 8002b84:	683a      	ldr	r2, [r7, #0]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d90c      	bls.n	8002ba4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b8a:	4b65      	ldr	r3, [pc, #404]	; (8002d20 <HAL_RCC_ClockConfig+0x1b8>)
 8002b8c:	683a      	ldr	r2, [r7, #0]
 8002b8e:	b2d2      	uxtb	r2, r2
 8002b90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b92:	4b63      	ldr	r3, [pc, #396]	; (8002d20 <HAL_RCC_ClockConfig+0x1b8>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0307 	and.w	r3, r3, #7
 8002b9a:	683a      	ldr	r2, [r7, #0]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d001      	beq.n	8002ba4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e0b8      	b.n	8002d16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0302 	and.w	r3, r3, #2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d020      	beq.n	8002bf2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0304 	and.w	r3, r3, #4
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d005      	beq.n	8002bc8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bbc:	4b59      	ldr	r3, [pc, #356]	; (8002d24 <HAL_RCC_ClockConfig+0x1bc>)
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	4a58      	ldr	r2, [pc, #352]	; (8002d24 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002bc6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0308 	and.w	r3, r3, #8
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d005      	beq.n	8002be0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bd4:	4b53      	ldr	r3, [pc, #332]	; (8002d24 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	4a52      	ldr	r2, [pc, #328]	; (8002d24 <HAL_RCC_ClockConfig+0x1bc>)
 8002bda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002bde:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002be0:	4b50      	ldr	r3, [pc, #320]	; (8002d24 <HAL_RCC_ClockConfig+0x1bc>)
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	494d      	ldr	r1, [pc, #308]	; (8002d24 <HAL_RCC_ClockConfig+0x1bc>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d044      	beq.n	8002c88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d107      	bne.n	8002c16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c06:	4b47      	ldr	r3, [pc, #284]	; (8002d24 <HAL_RCC_ClockConfig+0x1bc>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d119      	bne.n	8002c46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e07f      	b.n	8002d16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d003      	beq.n	8002c26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c22:	2b03      	cmp	r3, #3
 8002c24:	d107      	bne.n	8002c36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c26:	4b3f      	ldr	r3, [pc, #252]	; (8002d24 <HAL_RCC_ClockConfig+0x1bc>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d109      	bne.n	8002c46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e06f      	b.n	8002d16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c36:	4b3b      	ldr	r3, [pc, #236]	; (8002d24 <HAL_RCC_ClockConfig+0x1bc>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d101      	bne.n	8002c46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e067      	b.n	8002d16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c46:	4b37      	ldr	r3, [pc, #220]	; (8002d24 <HAL_RCC_ClockConfig+0x1bc>)
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f023 0203 	bic.w	r2, r3, #3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	4934      	ldr	r1, [pc, #208]	; (8002d24 <HAL_RCC_ClockConfig+0x1bc>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c58:	f7fe fcd4 	bl	8001604 <HAL_GetTick>
 8002c5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c5e:	e00a      	b.n	8002c76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c60:	f7fe fcd0 	bl	8001604 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d901      	bls.n	8002c76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e04f      	b.n	8002d16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c76:	4b2b      	ldr	r3, [pc, #172]	; (8002d24 <HAL_RCC_ClockConfig+0x1bc>)
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f003 020c 	and.w	r2, r3, #12
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d1eb      	bne.n	8002c60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c88:	4b25      	ldr	r3, [pc, #148]	; (8002d20 <HAL_RCC_ClockConfig+0x1b8>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0307 	and.w	r3, r3, #7
 8002c90:	683a      	ldr	r2, [r7, #0]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d20c      	bcs.n	8002cb0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c96:	4b22      	ldr	r3, [pc, #136]	; (8002d20 <HAL_RCC_ClockConfig+0x1b8>)
 8002c98:	683a      	ldr	r2, [r7, #0]
 8002c9a:	b2d2      	uxtb	r2, r2
 8002c9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c9e:	4b20      	ldr	r3, [pc, #128]	; (8002d20 <HAL_RCC_ClockConfig+0x1b8>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0307 	and.w	r3, r3, #7
 8002ca6:	683a      	ldr	r2, [r7, #0]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d001      	beq.n	8002cb0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e032      	b.n	8002d16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0304 	and.w	r3, r3, #4
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d008      	beq.n	8002cce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cbc:	4b19      	ldr	r3, [pc, #100]	; (8002d24 <HAL_RCC_ClockConfig+0x1bc>)
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	4916      	ldr	r1, [pc, #88]	; (8002d24 <HAL_RCC_ClockConfig+0x1bc>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0308 	and.w	r3, r3, #8
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d009      	beq.n	8002cee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cda:	4b12      	ldr	r3, [pc, #72]	; (8002d24 <HAL_RCC_ClockConfig+0x1bc>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	490e      	ldr	r1, [pc, #56]	; (8002d24 <HAL_RCC_ClockConfig+0x1bc>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002cee:	f000 f821 	bl	8002d34 <HAL_RCC_GetSysClockFreq>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	4b0b      	ldr	r3, [pc, #44]	; (8002d24 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	091b      	lsrs	r3, r3, #4
 8002cfa:	f003 030f 	and.w	r3, r3, #15
 8002cfe:	490a      	ldr	r1, [pc, #40]	; (8002d28 <HAL_RCC_ClockConfig+0x1c0>)
 8002d00:	5ccb      	ldrb	r3, [r1, r3]
 8002d02:	fa22 f303 	lsr.w	r3, r2, r3
 8002d06:	4a09      	ldr	r2, [pc, #36]	; (8002d2c <HAL_RCC_ClockConfig+0x1c4>)
 8002d08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d0a:	4b09      	ldr	r3, [pc, #36]	; (8002d30 <HAL_RCC_ClockConfig+0x1c8>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7fe fad0 	bl	80012b4 <HAL_InitTick>

  return HAL_OK;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3710      	adds	r7, #16
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	40023c00 	.word	0x40023c00
 8002d24:	40023800 	.word	0x40023800
 8002d28:	080085f8 	.word	0x080085f8
 8002d2c:	20000008 	.word	0x20000008
 8002d30:	2000000c 	.word	0x2000000c

08002d34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d38:	b090      	sub	sp, #64	; 0x40
 8002d3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	637b      	str	r3, [r7, #52]	; 0x34
 8002d40:	2300      	movs	r3, #0
 8002d42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d44:	2300      	movs	r3, #0
 8002d46:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d4c:	4b59      	ldr	r3, [pc, #356]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f003 030c 	and.w	r3, r3, #12
 8002d54:	2b08      	cmp	r3, #8
 8002d56:	d00d      	beq.n	8002d74 <HAL_RCC_GetSysClockFreq+0x40>
 8002d58:	2b08      	cmp	r3, #8
 8002d5a:	f200 80a1 	bhi.w	8002ea0 <HAL_RCC_GetSysClockFreq+0x16c>
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d002      	beq.n	8002d68 <HAL_RCC_GetSysClockFreq+0x34>
 8002d62:	2b04      	cmp	r3, #4
 8002d64:	d003      	beq.n	8002d6e <HAL_RCC_GetSysClockFreq+0x3a>
 8002d66:	e09b      	b.n	8002ea0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d68:	4b53      	ldr	r3, [pc, #332]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002d6a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002d6c:	e09b      	b.n	8002ea6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d6e:	4b53      	ldr	r3, [pc, #332]	; (8002ebc <HAL_RCC_GetSysClockFreq+0x188>)
 8002d70:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d72:	e098      	b.n	8002ea6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d74:	4b4f      	ldr	r3, [pc, #316]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d7c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d7e:	4b4d      	ldr	r3, [pc, #308]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d028      	beq.n	8002ddc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d8a:	4b4a      	ldr	r3, [pc, #296]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	099b      	lsrs	r3, r3, #6
 8002d90:	2200      	movs	r2, #0
 8002d92:	623b      	str	r3, [r7, #32]
 8002d94:	627a      	str	r2, [r7, #36]	; 0x24
 8002d96:	6a3b      	ldr	r3, [r7, #32]
 8002d98:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	4b47      	ldr	r3, [pc, #284]	; (8002ebc <HAL_RCC_GetSysClockFreq+0x188>)
 8002da0:	fb03 f201 	mul.w	r2, r3, r1
 8002da4:	2300      	movs	r3, #0
 8002da6:	fb00 f303 	mul.w	r3, r0, r3
 8002daa:	4413      	add	r3, r2
 8002dac:	4a43      	ldr	r2, [pc, #268]	; (8002ebc <HAL_RCC_GetSysClockFreq+0x188>)
 8002dae:	fba0 1202 	umull	r1, r2, r0, r2
 8002db2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002db4:	460a      	mov	r2, r1
 8002db6:	62ba      	str	r2, [r7, #40]	; 0x28
 8002db8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dba:	4413      	add	r3, r2
 8002dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	61bb      	str	r3, [r7, #24]
 8002dc4:	61fa      	str	r2, [r7, #28]
 8002dc6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002dca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002dce:	f7fd fa57 	bl	8000280 <__aeabi_uldivmod>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dda:	e053      	b.n	8002e84 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ddc:	4b35      	ldr	r3, [pc, #212]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	099b      	lsrs	r3, r3, #6
 8002de2:	2200      	movs	r2, #0
 8002de4:	613b      	str	r3, [r7, #16]
 8002de6:	617a      	str	r2, [r7, #20]
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002dee:	f04f 0b00 	mov.w	fp, #0
 8002df2:	4652      	mov	r2, sl
 8002df4:	465b      	mov	r3, fp
 8002df6:	f04f 0000 	mov.w	r0, #0
 8002dfa:	f04f 0100 	mov.w	r1, #0
 8002dfe:	0159      	lsls	r1, r3, #5
 8002e00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e04:	0150      	lsls	r0, r2, #5
 8002e06:	4602      	mov	r2, r0
 8002e08:	460b      	mov	r3, r1
 8002e0a:	ebb2 080a 	subs.w	r8, r2, sl
 8002e0e:	eb63 090b 	sbc.w	r9, r3, fp
 8002e12:	f04f 0200 	mov.w	r2, #0
 8002e16:	f04f 0300 	mov.w	r3, #0
 8002e1a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002e1e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002e22:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002e26:	ebb2 0408 	subs.w	r4, r2, r8
 8002e2a:	eb63 0509 	sbc.w	r5, r3, r9
 8002e2e:	f04f 0200 	mov.w	r2, #0
 8002e32:	f04f 0300 	mov.w	r3, #0
 8002e36:	00eb      	lsls	r3, r5, #3
 8002e38:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e3c:	00e2      	lsls	r2, r4, #3
 8002e3e:	4614      	mov	r4, r2
 8002e40:	461d      	mov	r5, r3
 8002e42:	eb14 030a 	adds.w	r3, r4, sl
 8002e46:	603b      	str	r3, [r7, #0]
 8002e48:	eb45 030b 	adc.w	r3, r5, fp
 8002e4c:	607b      	str	r3, [r7, #4]
 8002e4e:	f04f 0200 	mov.w	r2, #0
 8002e52:	f04f 0300 	mov.w	r3, #0
 8002e56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e5a:	4629      	mov	r1, r5
 8002e5c:	028b      	lsls	r3, r1, #10
 8002e5e:	4621      	mov	r1, r4
 8002e60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e64:	4621      	mov	r1, r4
 8002e66:	028a      	lsls	r2, r1, #10
 8002e68:	4610      	mov	r0, r2
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e6e:	2200      	movs	r2, #0
 8002e70:	60bb      	str	r3, [r7, #8]
 8002e72:	60fa      	str	r2, [r7, #12]
 8002e74:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e78:	f7fd fa02 	bl	8000280 <__aeabi_uldivmod>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	460b      	mov	r3, r1
 8002e80:	4613      	mov	r3, r2
 8002e82:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e84:	4b0b      	ldr	r3, [pc, #44]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	0c1b      	lsrs	r3, r3, #16
 8002e8a:	f003 0303 	and.w	r3, r3, #3
 8002e8e:	3301      	adds	r3, #1
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002e94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e9c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002e9e:	e002      	b.n	8002ea6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ea0:	4b05      	ldr	r3, [pc, #20]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002ea2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002ea4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3740      	adds	r7, #64	; 0x40
 8002eac:	46bd      	mov	sp, r7
 8002eae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002eb2:	bf00      	nop
 8002eb4:	40023800 	.word	0x40023800
 8002eb8:	00f42400 	.word	0x00f42400
 8002ebc:	017d7840 	.word	0x017d7840

08002ec0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ec4:	4b03      	ldr	r3, [pc, #12]	; (8002ed4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	20000008 	.word	0x20000008

08002ed8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002edc:	f7ff fff0 	bl	8002ec0 <HAL_RCC_GetHCLKFreq>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	4b05      	ldr	r3, [pc, #20]	; (8002ef8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	0a9b      	lsrs	r3, r3, #10
 8002ee8:	f003 0307 	and.w	r3, r3, #7
 8002eec:	4903      	ldr	r1, [pc, #12]	; (8002efc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002eee:	5ccb      	ldrb	r3, [r1, r3]
 8002ef0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	40023800 	.word	0x40023800
 8002efc:	08008608 	.word	0x08008608

08002f00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f04:	f7ff ffdc 	bl	8002ec0 <HAL_RCC_GetHCLKFreq>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	4b05      	ldr	r3, [pc, #20]	; (8002f20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	0b5b      	lsrs	r3, r3, #13
 8002f10:	f003 0307 	and.w	r3, r3, #7
 8002f14:	4903      	ldr	r1, [pc, #12]	; (8002f24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f16:	5ccb      	ldrb	r3, [r1, r3]
 8002f18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	40023800 	.word	0x40023800
 8002f24:	08008608 	.word	0x08008608

08002f28 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	220f      	movs	r2, #15
 8002f36:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002f38:	4b12      	ldr	r3, [pc, #72]	; (8002f84 <HAL_RCC_GetClockConfig+0x5c>)
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	f003 0203 	and.w	r2, r3, #3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002f44:	4b0f      	ldr	r3, [pc, #60]	; (8002f84 <HAL_RCC_GetClockConfig+0x5c>)
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002f50:	4b0c      	ldr	r3, [pc, #48]	; (8002f84 <HAL_RCC_GetClockConfig+0x5c>)
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002f5c:	4b09      	ldr	r3, [pc, #36]	; (8002f84 <HAL_RCC_GetClockConfig+0x5c>)
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	08db      	lsrs	r3, r3, #3
 8002f62:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002f6a:	4b07      	ldr	r3, [pc, #28]	; (8002f88 <HAL_RCC_GetClockConfig+0x60>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0207 	and.w	r2, r3, #7
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	601a      	str	r2, [r3, #0]
}
 8002f76:	bf00      	nop
 8002f78:	370c      	adds	r7, #12
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	40023800 	.word	0x40023800
 8002f88:	40023c00 	.word	0x40023c00

08002f8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e041      	b.n	8003022 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d106      	bne.n	8002fb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f000 f839 	bl	800302a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2202      	movs	r2, #2
 8002fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	3304      	adds	r3, #4
 8002fc8:	4619      	mov	r1, r3
 8002fca:	4610      	mov	r0, r2
 8002fcc:	f000 f9ca 	bl	8003364 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3708      	adds	r7, #8
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}

0800302a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800302a:	b480      	push	{r7}
 800302c:	b083      	sub	sp, #12
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003032:	bf00      	nop
 8003034:	370c      	adds	r7, #12
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
	...

08003040 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003040:	b480      	push	{r7}
 8003042:	b085      	sub	sp, #20
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800304e:	b2db      	uxtb	r3, r3
 8003050:	2b01      	cmp	r3, #1
 8003052:	d001      	beq.n	8003058 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e044      	b.n	80030e2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2202      	movs	r2, #2
 800305c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68da      	ldr	r2, [r3, #12]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f042 0201 	orr.w	r2, r2, #1
 800306e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a1e      	ldr	r2, [pc, #120]	; (80030f0 <HAL_TIM_Base_Start_IT+0xb0>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d018      	beq.n	80030ac <HAL_TIM_Base_Start_IT+0x6c>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003082:	d013      	beq.n	80030ac <HAL_TIM_Base_Start_IT+0x6c>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a1a      	ldr	r2, [pc, #104]	; (80030f4 <HAL_TIM_Base_Start_IT+0xb4>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d00e      	beq.n	80030ac <HAL_TIM_Base_Start_IT+0x6c>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a19      	ldr	r2, [pc, #100]	; (80030f8 <HAL_TIM_Base_Start_IT+0xb8>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d009      	beq.n	80030ac <HAL_TIM_Base_Start_IT+0x6c>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a17      	ldr	r2, [pc, #92]	; (80030fc <HAL_TIM_Base_Start_IT+0xbc>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d004      	beq.n	80030ac <HAL_TIM_Base_Start_IT+0x6c>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a16      	ldr	r2, [pc, #88]	; (8003100 <HAL_TIM_Base_Start_IT+0xc0>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d111      	bne.n	80030d0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f003 0307 	and.w	r3, r3, #7
 80030b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2b06      	cmp	r3, #6
 80030bc:	d010      	beq.n	80030e0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f042 0201 	orr.w	r2, r2, #1
 80030cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030ce:	e007      	b.n	80030e0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f042 0201 	orr.w	r2, r2, #1
 80030de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3714      	adds	r7, #20
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop
 80030f0:	40010000 	.word	0x40010000
 80030f4:	40000400 	.word	0x40000400
 80030f8:	40000800 	.word	0x40000800
 80030fc:	40000c00 	.word	0x40000c00
 8003100:	40014000 	.word	0x40014000

08003104 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	f003 0302 	and.w	r3, r3, #2
 8003116:	2b02      	cmp	r3, #2
 8003118:	d122      	bne.n	8003160 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	f003 0302 	and.w	r3, r3, #2
 8003124:	2b02      	cmp	r3, #2
 8003126:	d11b      	bne.n	8003160 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f06f 0202 	mvn.w	r2, #2
 8003130:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2201      	movs	r2, #1
 8003136:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	699b      	ldr	r3, [r3, #24]
 800313e:	f003 0303 	and.w	r3, r3, #3
 8003142:	2b00      	cmp	r3, #0
 8003144:	d003      	beq.n	800314e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 f8ee 	bl	8003328 <HAL_TIM_IC_CaptureCallback>
 800314c:	e005      	b.n	800315a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 f8e0 	bl	8003314 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f000 f8f1 	bl	800333c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	f003 0304 	and.w	r3, r3, #4
 800316a:	2b04      	cmp	r3, #4
 800316c:	d122      	bne.n	80031b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	f003 0304 	and.w	r3, r3, #4
 8003178:	2b04      	cmp	r3, #4
 800317a:	d11b      	bne.n	80031b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f06f 0204 	mvn.w	r2, #4
 8003184:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2202      	movs	r2, #2
 800318a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003196:	2b00      	cmp	r3, #0
 8003198:	d003      	beq.n	80031a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 f8c4 	bl	8003328 <HAL_TIM_IC_CaptureCallback>
 80031a0:	e005      	b.n	80031ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 f8b6 	bl	8003314 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f000 f8c7 	bl	800333c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	f003 0308 	and.w	r3, r3, #8
 80031be:	2b08      	cmp	r3, #8
 80031c0:	d122      	bne.n	8003208 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	f003 0308 	and.w	r3, r3, #8
 80031cc:	2b08      	cmp	r3, #8
 80031ce:	d11b      	bne.n	8003208 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f06f 0208 	mvn.w	r2, #8
 80031d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2204      	movs	r2, #4
 80031de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	69db      	ldr	r3, [r3, #28]
 80031e6:	f003 0303 	and.w	r3, r3, #3
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d003      	beq.n	80031f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 f89a 	bl	8003328 <HAL_TIM_IC_CaptureCallback>
 80031f4:	e005      	b.n	8003202 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 f88c 	bl	8003314 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 f89d 	bl	800333c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	f003 0310 	and.w	r3, r3, #16
 8003212:	2b10      	cmp	r3, #16
 8003214:	d122      	bne.n	800325c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	f003 0310 	and.w	r3, r3, #16
 8003220:	2b10      	cmp	r3, #16
 8003222:	d11b      	bne.n	800325c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f06f 0210 	mvn.w	r2, #16
 800322c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2208      	movs	r2, #8
 8003232:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	69db      	ldr	r3, [r3, #28]
 800323a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800323e:	2b00      	cmp	r3, #0
 8003240:	d003      	beq.n	800324a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 f870 	bl	8003328 <HAL_TIM_IC_CaptureCallback>
 8003248:	e005      	b.n	8003256 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 f862 	bl	8003314 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f000 f873 	bl	800333c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	2b01      	cmp	r3, #1
 8003268:	d10e      	bne.n	8003288 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	f003 0301 	and.w	r3, r3, #1
 8003274:	2b01      	cmp	r3, #1
 8003276:	d107      	bne.n	8003288 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f06f 0201 	mvn.w	r2, #1
 8003280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f7fd ff1e 	bl	80010c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003292:	2b80      	cmp	r3, #128	; 0x80
 8003294:	d10e      	bne.n	80032b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032a0:	2b80      	cmp	r3, #128	; 0x80
 80032a2:	d107      	bne.n	80032b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80032ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 f8e2 	bl	8003478 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032be:	2b40      	cmp	r3, #64	; 0x40
 80032c0:	d10e      	bne.n	80032e0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032cc:	2b40      	cmp	r3, #64	; 0x40
 80032ce:	d107      	bne.n	80032e0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 f838 	bl	8003350 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	f003 0320 	and.w	r3, r3, #32
 80032ea:	2b20      	cmp	r3, #32
 80032ec:	d10e      	bne.n	800330c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	f003 0320 	and.w	r3, r3, #32
 80032f8:	2b20      	cmp	r3, #32
 80032fa:	d107      	bne.n	800330c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f06f 0220 	mvn.w	r2, #32
 8003304:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 f8ac 	bl	8003464 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800330c:	bf00      	nop
 800330e:	3708      	adds	r7, #8
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800331c:	bf00      	nop
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003330:	bf00      	nop
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003344:	bf00      	nop
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003358:	bf00      	nop
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003364:	b480      	push	{r7}
 8003366:	b085      	sub	sp, #20
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4a34      	ldr	r2, [pc, #208]	; (8003448 <TIM_Base_SetConfig+0xe4>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d00f      	beq.n	800339c <TIM_Base_SetConfig+0x38>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003382:	d00b      	beq.n	800339c <TIM_Base_SetConfig+0x38>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4a31      	ldr	r2, [pc, #196]	; (800344c <TIM_Base_SetConfig+0xe8>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d007      	beq.n	800339c <TIM_Base_SetConfig+0x38>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4a30      	ldr	r2, [pc, #192]	; (8003450 <TIM_Base_SetConfig+0xec>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d003      	beq.n	800339c <TIM_Base_SetConfig+0x38>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a2f      	ldr	r2, [pc, #188]	; (8003454 <TIM_Base_SetConfig+0xf0>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d108      	bne.n	80033ae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a25      	ldr	r2, [pc, #148]	; (8003448 <TIM_Base_SetConfig+0xe4>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d01b      	beq.n	80033ee <TIM_Base_SetConfig+0x8a>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033bc:	d017      	beq.n	80033ee <TIM_Base_SetConfig+0x8a>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a22      	ldr	r2, [pc, #136]	; (800344c <TIM_Base_SetConfig+0xe8>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d013      	beq.n	80033ee <TIM_Base_SetConfig+0x8a>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a21      	ldr	r2, [pc, #132]	; (8003450 <TIM_Base_SetConfig+0xec>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d00f      	beq.n	80033ee <TIM_Base_SetConfig+0x8a>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a20      	ldr	r2, [pc, #128]	; (8003454 <TIM_Base_SetConfig+0xf0>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d00b      	beq.n	80033ee <TIM_Base_SetConfig+0x8a>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a1f      	ldr	r2, [pc, #124]	; (8003458 <TIM_Base_SetConfig+0xf4>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d007      	beq.n	80033ee <TIM_Base_SetConfig+0x8a>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a1e      	ldr	r2, [pc, #120]	; (800345c <TIM_Base_SetConfig+0xf8>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d003      	beq.n	80033ee <TIM_Base_SetConfig+0x8a>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a1d      	ldr	r2, [pc, #116]	; (8003460 <TIM_Base_SetConfig+0xfc>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d108      	bne.n	8003400 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	68fa      	ldr	r2, [r7, #12]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	4313      	orrs	r3, r2
 800340c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	68fa      	ldr	r2, [r7, #12]
 8003412:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	689a      	ldr	r2, [r3, #8]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a08      	ldr	r2, [pc, #32]	; (8003448 <TIM_Base_SetConfig+0xe4>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d103      	bne.n	8003434 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	691a      	ldr	r2, [r3, #16]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	615a      	str	r2, [r3, #20]
}
 800343a:	bf00      	nop
 800343c:	3714      	adds	r7, #20
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	40010000 	.word	0x40010000
 800344c:	40000400 	.word	0x40000400
 8003450:	40000800 	.word	0x40000800
 8003454:	40000c00 	.word	0x40000c00
 8003458:	40014000 	.word	0x40014000
 800345c:	40014400 	.word	0x40014400
 8003460:	40014800 	.word	0x40014800

08003464 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800346c:	bf00      	nop
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003480:	bf00      	nop
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d101      	bne.n	800349e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e03f      	b.n	800351e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d106      	bne.n	80034b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f7fd feb6 	bl	8001224 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2224      	movs	r2, #36	; 0x24
 80034bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68da      	ldr	r2, [r3, #12]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f000 f929 	bl	8003728 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	691a      	ldr	r2, [r3, #16]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	695a      	ldr	r2, [r3, #20]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68da      	ldr	r2, [r3, #12]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003504:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2220      	movs	r2, #32
 8003510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2220      	movs	r2, #32
 8003518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3708      	adds	r7, #8
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003526:	b580      	push	{r7, lr}
 8003528:	b08a      	sub	sp, #40	; 0x28
 800352a:	af02      	add	r7, sp, #8
 800352c:	60f8      	str	r0, [r7, #12]
 800352e:	60b9      	str	r1, [r7, #8]
 8003530:	603b      	str	r3, [r7, #0]
 8003532:	4613      	mov	r3, r2
 8003534:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003536:	2300      	movs	r3, #0
 8003538:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003540:	b2db      	uxtb	r3, r3
 8003542:	2b20      	cmp	r3, #32
 8003544:	d17c      	bne.n	8003640 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d002      	beq.n	8003552 <HAL_UART_Transmit+0x2c>
 800354c:	88fb      	ldrh	r3, [r7, #6]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d101      	bne.n	8003556 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e075      	b.n	8003642 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800355c:	2b01      	cmp	r3, #1
 800355e:	d101      	bne.n	8003564 <HAL_UART_Transmit+0x3e>
 8003560:	2302      	movs	r3, #2
 8003562:	e06e      	b.n	8003642 <HAL_UART_Transmit+0x11c>
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2200      	movs	r2, #0
 8003570:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2221      	movs	r2, #33	; 0x21
 8003576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800357a:	f7fe f843 	bl	8001604 <HAL_GetTick>
 800357e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	88fa      	ldrh	r2, [r7, #6]
 8003584:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	88fa      	ldrh	r2, [r7, #6]
 800358a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003594:	d108      	bne.n	80035a8 <HAL_UART_Transmit+0x82>
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d104      	bne.n	80035a8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800359e:	2300      	movs	r3, #0
 80035a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	61bb      	str	r3, [r7, #24]
 80035a6:	e003      	b.n	80035b0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035ac:	2300      	movs	r3, #0
 80035ae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80035b8:	e02a      	b.n	8003610 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	9300      	str	r3, [sp, #0]
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	2200      	movs	r2, #0
 80035c2:	2180      	movs	r1, #128	; 0x80
 80035c4:	68f8      	ldr	r0, [r7, #12]
 80035c6:	f000 f840 	bl	800364a <UART_WaitOnFlagUntilTimeout>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d001      	beq.n	80035d4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e036      	b.n	8003642 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d10b      	bne.n	80035f2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	881b      	ldrh	r3, [r3, #0]
 80035de:	461a      	mov	r2, r3
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	3302      	adds	r3, #2
 80035ee:	61bb      	str	r3, [r7, #24]
 80035f0:	e007      	b.n	8003602 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	781a      	ldrb	r2, [r3, #0]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	3301      	adds	r3, #1
 8003600:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003606:	b29b      	uxth	r3, r3
 8003608:	3b01      	subs	r3, #1
 800360a:	b29a      	uxth	r2, r3
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003614:	b29b      	uxth	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1cf      	bne.n	80035ba <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	9300      	str	r3, [sp, #0]
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	2200      	movs	r2, #0
 8003622:	2140      	movs	r1, #64	; 0x40
 8003624:	68f8      	ldr	r0, [r7, #12]
 8003626:	f000 f810 	bl	800364a <UART_WaitOnFlagUntilTimeout>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d001      	beq.n	8003634 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e006      	b.n	8003642 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2220      	movs	r2, #32
 8003638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800363c:	2300      	movs	r3, #0
 800363e:	e000      	b.n	8003642 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003640:	2302      	movs	r3, #2
  }
}
 8003642:	4618      	mov	r0, r3
 8003644:	3720      	adds	r7, #32
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}

0800364a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800364a:	b580      	push	{r7, lr}
 800364c:	b090      	sub	sp, #64	; 0x40
 800364e:	af00      	add	r7, sp, #0
 8003650:	60f8      	str	r0, [r7, #12]
 8003652:	60b9      	str	r1, [r7, #8]
 8003654:	603b      	str	r3, [r7, #0]
 8003656:	4613      	mov	r3, r2
 8003658:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800365a:	e050      	b.n	80036fe <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800365c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800365e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003662:	d04c      	beq.n	80036fe <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003664:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003666:	2b00      	cmp	r3, #0
 8003668:	d007      	beq.n	800367a <UART_WaitOnFlagUntilTimeout+0x30>
 800366a:	f7fd ffcb 	bl	8001604 <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003676:	429a      	cmp	r2, r3
 8003678:	d241      	bcs.n	80036fe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	330c      	adds	r3, #12
 8003680:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003684:	e853 3f00 	ldrex	r3, [r3]
 8003688:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800368a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003690:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	330c      	adds	r3, #12
 8003698:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800369a:	637a      	str	r2, [r7, #52]	; 0x34
 800369c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800369e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80036a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036a2:	e841 2300 	strex	r3, r2, [r1]
 80036a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80036a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1e5      	bne.n	800367a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	3314      	adds	r3, #20
 80036b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	e853 3f00 	ldrex	r3, [r3]
 80036bc:	613b      	str	r3, [r7, #16]
   return(result);
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	f023 0301 	bic.w	r3, r3, #1
 80036c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	3314      	adds	r3, #20
 80036cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036ce:	623a      	str	r2, [r7, #32]
 80036d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d2:	69f9      	ldr	r1, [r7, #28]
 80036d4:	6a3a      	ldr	r2, [r7, #32]
 80036d6:	e841 2300 	strex	r3, r2, [r1]
 80036da:	61bb      	str	r3, [r7, #24]
   return(result);
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d1e5      	bne.n	80036ae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2220      	movs	r2, #32
 80036e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2220      	movs	r2, #32
 80036ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e00f      	b.n	800371e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	4013      	ands	r3, r2
 8003708:	68ba      	ldr	r2, [r7, #8]
 800370a:	429a      	cmp	r2, r3
 800370c:	bf0c      	ite	eq
 800370e:	2301      	moveq	r3, #1
 8003710:	2300      	movne	r3, #0
 8003712:	b2db      	uxtb	r3, r3
 8003714:	461a      	mov	r2, r3
 8003716:	79fb      	ldrb	r3, [r7, #7]
 8003718:	429a      	cmp	r2, r3
 800371a:	d09f      	beq.n	800365c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	3740      	adds	r7, #64	; 0x40
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
	...

08003728 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003728:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800372c:	b0c0      	sub	sp, #256	; 0x100
 800372e:	af00      	add	r7, sp, #0
 8003730:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	691b      	ldr	r3, [r3, #16]
 800373c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003744:	68d9      	ldr	r1, [r3, #12]
 8003746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	ea40 0301 	orr.w	r3, r0, r1
 8003750:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003756:	689a      	ldr	r2, [r3, #8]
 8003758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	431a      	orrs	r2, r3
 8003760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003764:	695b      	ldr	r3, [r3, #20]
 8003766:	431a      	orrs	r2, r3
 8003768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800376c:	69db      	ldr	r3, [r3, #28]
 800376e:	4313      	orrs	r3, r2
 8003770:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003780:	f021 010c 	bic.w	r1, r1, #12
 8003784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800378e:	430b      	orrs	r3, r1
 8003790:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	695b      	ldr	r3, [r3, #20]
 800379a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800379e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037a2:	6999      	ldr	r1, [r3, #24]
 80037a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	ea40 0301 	orr.w	r3, r0, r1
 80037ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80037b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	4b8f      	ldr	r3, [pc, #572]	; (80039f4 <UART_SetConfig+0x2cc>)
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d005      	beq.n	80037c8 <UART_SetConfig+0xa0>
 80037bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	4b8d      	ldr	r3, [pc, #564]	; (80039f8 <UART_SetConfig+0x2d0>)
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d104      	bne.n	80037d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80037c8:	f7ff fb9a 	bl	8002f00 <HAL_RCC_GetPCLK2Freq>
 80037cc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80037d0:	e003      	b.n	80037da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80037d2:	f7ff fb81 	bl	8002ed8 <HAL_RCC_GetPCLK1Freq>
 80037d6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037de:	69db      	ldr	r3, [r3, #28]
 80037e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037e4:	f040 810c 	bne.w	8003a00 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80037e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037ec:	2200      	movs	r2, #0
 80037ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80037f2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80037f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80037fa:	4622      	mov	r2, r4
 80037fc:	462b      	mov	r3, r5
 80037fe:	1891      	adds	r1, r2, r2
 8003800:	65b9      	str	r1, [r7, #88]	; 0x58
 8003802:	415b      	adcs	r3, r3
 8003804:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003806:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800380a:	4621      	mov	r1, r4
 800380c:	eb12 0801 	adds.w	r8, r2, r1
 8003810:	4629      	mov	r1, r5
 8003812:	eb43 0901 	adc.w	r9, r3, r1
 8003816:	f04f 0200 	mov.w	r2, #0
 800381a:	f04f 0300 	mov.w	r3, #0
 800381e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003822:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003826:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800382a:	4690      	mov	r8, r2
 800382c:	4699      	mov	r9, r3
 800382e:	4623      	mov	r3, r4
 8003830:	eb18 0303 	adds.w	r3, r8, r3
 8003834:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003838:	462b      	mov	r3, r5
 800383a:	eb49 0303 	adc.w	r3, r9, r3
 800383e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800384e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003852:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003856:	460b      	mov	r3, r1
 8003858:	18db      	adds	r3, r3, r3
 800385a:	653b      	str	r3, [r7, #80]	; 0x50
 800385c:	4613      	mov	r3, r2
 800385e:	eb42 0303 	adc.w	r3, r2, r3
 8003862:	657b      	str	r3, [r7, #84]	; 0x54
 8003864:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003868:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800386c:	f7fc fd08 	bl	8000280 <__aeabi_uldivmod>
 8003870:	4602      	mov	r2, r0
 8003872:	460b      	mov	r3, r1
 8003874:	4b61      	ldr	r3, [pc, #388]	; (80039fc <UART_SetConfig+0x2d4>)
 8003876:	fba3 2302 	umull	r2, r3, r3, r2
 800387a:	095b      	lsrs	r3, r3, #5
 800387c:	011c      	lsls	r4, r3, #4
 800387e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003882:	2200      	movs	r2, #0
 8003884:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003888:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800388c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003890:	4642      	mov	r2, r8
 8003892:	464b      	mov	r3, r9
 8003894:	1891      	adds	r1, r2, r2
 8003896:	64b9      	str	r1, [r7, #72]	; 0x48
 8003898:	415b      	adcs	r3, r3
 800389a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800389c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80038a0:	4641      	mov	r1, r8
 80038a2:	eb12 0a01 	adds.w	sl, r2, r1
 80038a6:	4649      	mov	r1, r9
 80038a8:	eb43 0b01 	adc.w	fp, r3, r1
 80038ac:	f04f 0200 	mov.w	r2, #0
 80038b0:	f04f 0300 	mov.w	r3, #0
 80038b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80038b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80038bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038c0:	4692      	mov	sl, r2
 80038c2:	469b      	mov	fp, r3
 80038c4:	4643      	mov	r3, r8
 80038c6:	eb1a 0303 	adds.w	r3, sl, r3
 80038ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80038ce:	464b      	mov	r3, r9
 80038d0:	eb4b 0303 	adc.w	r3, fp, r3
 80038d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80038d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80038e4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80038e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80038ec:	460b      	mov	r3, r1
 80038ee:	18db      	adds	r3, r3, r3
 80038f0:	643b      	str	r3, [r7, #64]	; 0x40
 80038f2:	4613      	mov	r3, r2
 80038f4:	eb42 0303 	adc.w	r3, r2, r3
 80038f8:	647b      	str	r3, [r7, #68]	; 0x44
 80038fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80038fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003902:	f7fc fcbd 	bl	8000280 <__aeabi_uldivmod>
 8003906:	4602      	mov	r2, r0
 8003908:	460b      	mov	r3, r1
 800390a:	4611      	mov	r1, r2
 800390c:	4b3b      	ldr	r3, [pc, #236]	; (80039fc <UART_SetConfig+0x2d4>)
 800390e:	fba3 2301 	umull	r2, r3, r3, r1
 8003912:	095b      	lsrs	r3, r3, #5
 8003914:	2264      	movs	r2, #100	; 0x64
 8003916:	fb02 f303 	mul.w	r3, r2, r3
 800391a:	1acb      	subs	r3, r1, r3
 800391c:	00db      	lsls	r3, r3, #3
 800391e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003922:	4b36      	ldr	r3, [pc, #216]	; (80039fc <UART_SetConfig+0x2d4>)
 8003924:	fba3 2302 	umull	r2, r3, r3, r2
 8003928:	095b      	lsrs	r3, r3, #5
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003930:	441c      	add	r4, r3
 8003932:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003936:	2200      	movs	r2, #0
 8003938:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800393c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003940:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003944:	4642      	mov	r2, r8
 8003946:	464b      	mov	r3, r9
 8003948:	1891      	adds	r1, r2, r2
 800394a:	63b9      	str	r1, [r7, #56]	; 0x38
 800394c:	415b      	adcs	r3, r3
 800394e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003950:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003954:	4641      	mov	r1, r8
 8003956:	1851      	adds	r1, r2, r1
 8003958:	6339      	str	r1, [r7, #48]	; 0x30
 800395a:	4649      	mov	r1, r9
 800395c:	414b      	adcs	r3, r1
 800395e:	637b      	str	r3, [r7, #52]	; 0x34
 8003960:	f04f 0200 	mov.w	r2, #0
 8003964:	f04f 0300 	mov.w	r3, #0
 8003968:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800396c:	4659      	mov	r1, fp
 800396e:	00cb      	lsls	r3, r1, #3
 8003970:	4651      	mov	r1, sl
 8003972:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003976:	4651      	mov	r1, sl
 8003978:	00ca      	lsls	r2, r1, #3
 800397a:	4610      	mov	r0, r2
 800397c:	4619      	mov	r1, r3
 800397e:	4603      	mov	r3, r0
 8003980:	4642      	mov	r2, r8
 8003982:	189b      	adds	r3, r3, r2
 8003984:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003988:	464b      	mov	r3, r9
 800398a:	460a      	mov	r2, r1
 800398c:	eb42 0303 	adc.w	r3, r2, r3
 8003990:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80039a0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80039a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80039a8:	460b      	mov	r3, r1
 80039aa:	18db      	adds	r3, r3, r3
 80039ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80039ae:	4613      	mov	r3, r2
 80039b0:	eb42 0303 	adc.w	r3, r2, r3
 80039b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80039ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80039be:	f7fc fc5f 	bl	8000280 <__aeabi_uldivmod>
 80039c2:	4602      	mov	r2, r0
 80039c4:	460b      	mov	r3, r1
 80039c6:	4b0d      	ldr	r3, [pc, #52]	; (80039fc <UART_SetConfig+0x2d4>)
 80039c8:	fba3 1302 	umull	r1, r3, r3, r2
 80039cc:	095b      	lsrs	r3, r3, #5
 80039ce:	2164      	movs	r1, #100	; 0x64
 80039d0:	fb01 f303 	mul.w	r3, r1, r3
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	00db      	lsls	r3, r3, #3
 80039d8:	3332      	adds	r3, #50	; 0x32
 80039da:	4a08      	ldr	r2, [pc, #32]	; (80039fc <UART_SetConfig+0x2d4>)
 80039dc:	fba2 2303 	umull	r2, r3, r2, r3
 80039e0:	095b      	lsrs	r3, r3, #5
 80039e2:	f003 0207 	and.w	r2, r3, #7
 80039e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4422      	add	r2, r4
 80039ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80039f0:	e105      	b.n	8003bfe <UART_SetConfig+0x4d6>
 80039f2:	bf00      	nop
 80039f4:	40011000 	.word	0x40011000
 80039f8:	40011400 	.word	0x40011400
 80039fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a04:	2200      	movs	r2, #0
 8003a06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003a0a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003a0e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003a12:	4642      	mov	r2, r8
 8003a14:	464b      	mov	r3, r9
 8003a16:	1891      	adds	r1, r2, r2
 8003a18:	6239      	str	r1, [r7, #32]
 8003a1a:	415b      	adcs	r3, r3
 8003a1c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a22:	4641      	mov	r1, r8
 8003a24:	1854      	adds	r4, r2, r1
 8003a26:	4649      	mov	r1, r9
 8003a28:	eb43 0501 	adc.w	r5, r3, r1
 8003a2c:	f04f 0200 	mov.w	r2, #0
 8003a30:	f04f 0300 	mov.w	r3, #0
 8003a34:	00eb      	lsls	r3, r5, #3
 8003a36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a3a:	00e2      	lsls	r2, r4, #3
 8003a3c:	4614      	mov	r4, r2
 8003a3e:	461d      	mov	r5, r3
 8003a40:	4643      	mov	r3, r8
 8003a42:	18e3      	adds	r3, r4, r3
 8003a44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003a48:	464b      	mov	r3, r9
 8003a4a:	eb45 0303 	adc.w	r3, r5, r3
 8003a4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003a52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003a5e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003a62:	f04f 0200 	mov.w	r2, #0
 8003a66:	f04f 0300 	mov.w	r3, #0
 8003a6a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003a6e:	4629      	mov	r1, r5
 8003a70:	008b      	lsls	r3, r1, #2
 8003a72:	4621      	mov	r1, r4
 8003a74:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a78:	4621      	mov	r1, r4
 8003a7a:	008a      	lsls	r2, r1, #2
 8003a7c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003a80:	f7fc fbfe 	bl	8000280 <__aeabi_uldivmod>
 8003a84:	4602      	mov	r2, r0
 8003a86:	460b      	mov	r3, r1
 8003a88:	4b60      	ldr	r3, [pc, #384]	; (8003c0c <UART_SetConfig+0x4e4>)
 8003a8a:	fba3 2302 	umull	r2, r3, r3, r2
 8003a8e:	095b      	lsrs	r3, r3, #5
 8003a90:	011c      	lsls	r4, r3, #4
 8003a92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a96:	2200      	movs	r2, #0
 8003a98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003a9c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003aa0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003aa4:	4642      	mov	r2, r8
 8003aa6:	464b      	mov	r3, r9
 8003aa8:	1891      	adds	r1, r2, r2
 8003aaa:	61b9      	str	r1, [r7, #24]
 8003aac:	415b      	adcs	r3, r3
 8003aae:	61fb      	str	r3, [r7, #28]
 8003ab0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ab4:	4641      	mov	r1, r8
 8003ab6:	1851      	adds	r1, r2, r1
 8003ab8:	6139      	str	r1, [r7, #16]
 8003aba:	4649      	mov	r1, r9
 8003abc:	414b      	adcs	r3, r1
 8003abe:	617b      	str	r3, [r7, #20]
 8003ac0:	f04f 0200 	mov.w	r2, #0
 8003ac4:	f04f 0300 	mov.w	r3, #0
 8003ac8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003acc:	4659      	mov	r1, fp
 8003ace:	00cb      	lsls	r3, r1, #3
 8003ad0:	4651      	mov	r1, sl
 8003ad2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ad6:	4651      	mov	r1, sl
 8003ad8:	00ca      	lsls	r2, r1, #3
 8003ada:	4610      	mov	r0, r2
 8003adc:	4619      	mov	r1, r3
 8003ade:	4603      	mov	r3, r0
 8003ae0:	4642      	mov	r2, r8
 8003ae2:	189b      	adds	r3, r3, r2
 8003ae4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ae8:	464b      	mov	r3, r9
 8003aea:	460a      	mov	r2, r1
 8003aec:	eb42 0303 	adc.w	r3, r2, r3
 8003af0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	67bb      	str	r3, [r7, #120]	; 0x78
 8003afe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003b00:	f04f 0200 	mov.w	r2, #0
 8003b04:	f04f 0300 	mov.w	r3, #0
 8003b08:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003b0c:	4649      	mov	r1, r9
 8003b0e:	008b      	lsls	r3, r1, #2
 8003b10:	4641      	mov	r1, r8
 8003b12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b16:	4641      	mov	r1, r8
 8003b18:	008a      	lsls	r2, r1, #2
 8003b1a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003b1e:	f7fc fbaf 	bl	8000280 <__aeabi_uldivmod>
 8003b22:	4602      	mov	r2, r0
 8003b24:	460b      	mov	r3, r1
 8003b26:	4b39      	ldr	r3, [pc, #228]	; (8003c0c <UART_SetConfig+0x4e4>)
 8003b28:	fba3 1302 	umull	r1, r3, r3, r2
 8003b2c:	095b      	lsrs	r3, r3, #5
 8003b2e:	2164      	movs	r1, #100	; 0x64
 8003b30:	fb01 f303 	mul.w	r3, r1, r3
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	011b      	lsls	r3, r3, #4
 8003b38:	3332      	adds	r3, #50	; 0x32
 8003b3a:	4a34      	ldr	r2, [pc, #208]	; (8003c0c <UART_SetConfig+0x4e4>)
 8003b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b40:	095b      	lsrs	r3, r3, #5
 8003b42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b46:	441c      	add	r4, r3
 8003b48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	673b      	str	r3, [r7, #112]	; 0x70
 8003b50:	677a      	str	r2, [r7, #116]	; 0x74
 8003b52:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003b56:	4642      	mov	r2, r8
 8003b58:	464b      	mov	r3, r9
 8003b5a:	1891      	adds	r1, r2, r2
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	415b      	adcs	r3, r3
 8003b60:	60fb      	str	r3, [r7, #12]
 8003b62:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b66:	4641      	mov	r1, r8
 8003b68:	1851      	adds	r1, r2, r1
 8003b6a:	6039      	str	r1, [r7, #0]
 8003b6c:	4649      	mov	r1, r9
 8003b6e:	414b      	adcs	r3, r1
 8003b70:	607b      	str	r3, [r7, #4]
 8003b72:	f04f 0200 	mov.w	r2, #0
 8003b76:	f04f 0300 	mov.w	r3, #0
 8003b7a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003b7e:	4659      	mov	r1, fp
 8003b80:	00cb      	lsls	r3, r1, #3
 8003b82:	4651      	mov	r1, sl
 8003b84:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b88:	4651      	mov	r1, sl
 8003b8a:	00ca      	lsls	r2, r1, #3
 8003b8c:	4610      	mov	r0, r2
 8003b8e:	4619      	mov	r1, r3
 8003b90:	4603      	mov	r3, r0
 8003b92:	4642      	mov	r2, r8
 8003b94:	189b      	adds	r3, r3, r2
 8003b96:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b98:	464b      	mov	r3, r9
 8003b9a:	460a      	mov	r2, r1
 8003b9c:	eb42 0303 	adc.w	r3, r2, r3
 8003ba0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ba2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	663b      	str	r3, [r7, #96]	; 0x60
 8003bac:	667a      	str	r2, [r7, #100]	; 0x64
 8003bae:	f04f 0200 	mov.w	r2, #0
 8003bb2:	f04f 0300 	mov.w	r3, #0
 8003bb6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003bba:	4649      	mov	r1, r9
 8003bbc:	008b      	lsls	r3, r1, #2
 8003bbe:	4641      	mov	r1, r8
 8003bc0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bc4:	4641      	mov	r1, r8
 8003bc6:	008a      	lsls	r2, r1, #2
 8003bc8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003bcc:	f7fc fb58 	bl	8000280 <__aeabi_uldivmod>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	4b0d      	ldr	r3, [pc, #52]	; (8003c0c <UART_SetConfig+0x4e4>)
 8003bd6:	fba3 1302 	umull	r1, r3, r3, r2
 8003bda:	095b      	lsrs	r3, r3, #5
 8003bdc:	2164      	movs	r1, #100	; 0x64
 8003bde:	fb01 f303 	mul.w	r3, r1, r3
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	011b      	lsls	r3, r3, #4
 8003be6:	3332      	adds	r3, #50	; 0x32
 8003be8:	4a08      	ldr	r2, [pc, #32]	; (8003c0c <UART_SetConfig+0x4e4>)
 8003bea:	fba2 2303 	umull	r2, r3, r2, r3
 8003bee:	095b      	lsrs	r3, r3, #5
 8003bf0:	f003 020f 	and.w	r2, r3, #15
 8003bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4422      	add	r2, r4
 8003bfc:	609a      	str	r2, [r3, #8]
}
 8003bfe:	bf00      	nop
 8003c00:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003c04:	46bd      	mov	sp, r7
 8003c06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c0a:	bf00      	nop
 8003c0c:	51eb851f 	.word	0x51eb851f

08003c10 <__NVIC_SetPriority>:
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	4603      	mov	r3, r0
 8003c18:	6039      	str	r1, [r7, #0]
 8003c1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	db0a      	blt.n	8003c3a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	b2da      	uxtb	r2, r3
 8003c28:	490c      	ldr	r1, [pc, #48]	; (8003c5c <__NVIC_SetPriority+0x4c>)
 8003c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c2e:	0112      	lsls	r2, r2, #4
 8003c30:	b2d2      	uxtb	r2, r2
 8003c32:	440b      	add	r3, r1
 8003c34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003c38:	e00a      	b.n	8003c50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	b2da      	uxtb	r2, r3
 8003c3e:	4908      	ldr	r1, [pc, #32]	; (8003c60 <__NVIC_SetPriority+0x50>)
 8003c40:	79fb      	ldrb	r3, [r7, #7]
 8003c42:	f003 030f 	and.w	r3, r3, #15
 8003c46:	3b04      	subs	r3, #4
 8003c48:	0112      	lsls	r2, r2, #4
 8003c4a:	b2d2      	uxtb	r2, r2
 8003c4c:	440b      	add	r3, r1
 8003c4e:	761a      	strb	r2, [r3, #24]
}
 8003c50:	bf00      	nop
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr
 8003c5c:	e000e100 	.word	0xe000e100
 8003c60:	e000ed00 	.word	0xe000ed00

08003c64 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003c64:	b580      	push	{r7, lr}
 8003c66:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003c68:	4b05      	ldr	r3, [pc, #20]	; (8003c80 <SysTick_Handler+0x1c>)
 8003c6a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003c6c:	f001 fd28 	bl	80056c0 <xTaskGetSchedulerState>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d001      	beq.n	8003c7a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003c76:	f002 fb0f 	bl	8006298 <xPortSysTickHandler>
  }
}
 8003c7a:	bf00      	nop
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	e000e010 	.word	0xe000e010

08003c84 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003c84:	b580      	push	{r7, lr}
 8003c86:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003c88:	2100      	movs	r1, #0
 8003c8a:	f06f 0004 	mvn.w	r0, #4
 8003c8e:	f7ff ffbf 	bl	8003c10 <__NVIC_SetPriority>
#endif
}
 8003c92:	bf00      	nop
 8003c94:	bd80      	pop	{r7, pc}
	...

08003c98 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c9e:	f3ef 8305 	mrs	r3, IPSR
 8003ca2:	603b      	str	r3, [r7, #0]
  return(result);
 8003ca4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d003      	beq.n	8003cb2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003caa:	f06f 0305 	mvn.w	r3, #5
 8003cae:	607b      	str	r3, [r7, #4]
 8003cb0:	e00c      	b.n	8003ccc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003cb2:	4b0a      	ldr	r3, [pc, #40]	; (8003cdc <osKernelInitialize+0x44>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d105      	bne.n	8003cc6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003cba:	4b08      	ldr	r3, [pc, #32]	; (8003cdc <osKernelInitialize+0x44>)
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	607b      	str	r3, [r7, #4]
 8003cc4:	e002      	b.n	8003ccc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8003cca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003ccc:	687b      	ldr	r3, [r7, #4]
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	370c      	adds	r7, #12
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	200009bc 	.word	0x200009bc

08003ce0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ce6:	f3ef 8305 	mrs	r3, IPSR
 8003cea:	603b      	str	r3, [r7, #0]
  return(result);
 8003cec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d003      	beq.n	8003cfa <osKernelStart+0x1a>
    stat = osErrorISR;
 8003cf2:	f06f 0305 	mvn.w	r3, #5
 8003cf6:	607b      	str	r3, [r7, #4]
 8003cf8:	e010      	b.n	8003d1c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003cfa:	4b0b      	ldr	r3, [pc, #44]	; (8003d28 <osKernelStart+0x48>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d109      	bne.n	8003d16 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003d02:	f7ff ffbf 	bl	8003c84 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003d06:	4b08      	ldr	r3, [pc, #32]	; (8003d28 <osKernelStart+0x48>)
 8003d08:	2202      	movs	r2, #2
 8003d0a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003d0c:	f001 f87c 	bl	8004e08 <vTaskStartScheduler>
      stat = osOK;
 8003d10:	2300      	movs	r3, #0
 8003d12:	607b      	str	r3, [r7, #4]
 8003d14:	e002      	b.n	8003d1c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003d16:	f04f 33ff 	mov.w	r3, #4294967295
 8003d1a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003d1c:	687b      	ldr	r3, [r7, #4]
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3708      	adds	r7, #8
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	200009bc 	.word	0x200009bc

08003d2c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b08e      	sub	sp, #56	; 0x38
 8003d30:	af04      	add	r7, sp, #16
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d3c:	f3ef 8305 	mrs	r3, IPSR
 8003d40:	617b      	str	r3, [r7, #20]
  return(result);
 8003d42:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d17e      	bne.n	8003e46 <osThreadNew+0x11a>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d07b      	beq.n	8003e46 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003d4e:	2380      	movs	r3, #128	; 0x80
 8003d50:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003d52:	2318      	movs	r3, #24
 8003d54:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003d56:	2300      	movs	r3, #0
 8003d58:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d5e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d045      	beq.n	8003df2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d002      	beq.n	8003d74 <osThreadNew+0x48>
        name = attr->name;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	699b      	ldr	r3, [r3, #24]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d002      	beq.n	8003d82 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	699b      	ldr	r3, [r3, #24]
 8003d80:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d008      	beq.n	8003d9a <osThreadNew+0x6e>
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	2b38      	cmp	r3, #56	; 0x38
 8003d8c:	d805      	bhi.n	8003d9a <osThreadNew+0x6e>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d001      	beq.n	8003d9e <osThreadNew+0x72>
        return (NULL);
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	e054      	b.n	8003e48 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d003      	beq.n	8003dae <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	695b      	ldr	r3, [r3, #20]
 8003daa:	089b      	lsrs	r3, r3, #2
 8003dac:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d00e      	beq.n	8003dd4 <osThreadNew+0xa8>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	2bbb      	cmp	r3, #187	; 0xbb
 8003dbc:	d90a      	bls.n	8003dd4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d006      	beq.n	8003dd4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d002      	beq.n	8003dd4 <osThreadNew+0xa8>
        mem = 1;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	61bb      	str	r3, [r7, #24]
 8003dd2:	e010      	b.n	8003df6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d10c      	bne.n	8003df6 <osThreadNew+0xca>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d108      	bne.n	8003df6 <osThreadNew+0xca>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	691b      	ldr	r3, [r3, #16]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d104      	bne.n	8003df6 <osThreadNew+0xca>
          mem = 0;
 8003dec:	2300      	movs	r3, #0
 8003dee:	61bb      	str	r3, [r7, #24]
 8003df0:	e001      	b.n	8003df6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003df2:	2300      	movs	r3, #0
 8003df4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d110      	bne.n	8003e1e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003e04:	9202      	str	r2, [sp, #8]
 8003e06:	9301      	str	r3, [sp, #4]
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	9300      	str	r3, [sp, #0]
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	6a3a      	ldr	r2, [r7, #32]
 8003e10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e12:	68f8      	ldr	r0, [r7, #12]
 8003e14:	f000 fe0c 	bl	8004a30 <xTaskCreateStatic>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	613b      	str	r3, [r7, #16]
 8003e1c:	e013      	b.n	8003e46 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003e1e:	69bb      	ldr	r3, [r7, #24]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d110      	bne.n	8003e46 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003e24:	6a3b      	ldr	r3, [r7, #32]
 8003e26:	b29a      	uxth	r2, r3
 8003e28:	f107 0310 	add.w	r3, r7, #16
 8003e2c:	9301      	str	r3, [sp, #4]
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	9300      	str	r3, [sp, #0]
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e36:	68f8      	ldr	r0, [r7, #12]
 8003e38:	f000 fe57 	bl	8004aea <xTaskCreate>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d001      	beq.n	8003e46 <osThreadNew+0x11a>
            hTask = NULL;
 8003e42:	2300      	movs	r3, #0
 8003e44:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003e46:	693b      	ldr	r3, [r7, #16]
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3728      	adds	r7, #40	; 0x28
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e58:	f3ef 8305 	mrs	r3, IPSR
 8003e5c:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e5e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d003      	beq.n	8003e6c <osDelay+0x1c>
    stat = osErrorISR;
 8003e64:	f06f 0305 	mvn.w	r3, #5
 8003e68:	60fb      	str	r3, [r7, #12]
 8003e6a:	e007      	b.n	8003e7c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d002      	beq.n	8003e7c <osDelay+0x2c>
      vTaskDelay(ticks);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 ff92 	bl	8004da0 <vTaskDelay>
    }
  }

  return (stat);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3710      	adds	r7, #16
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
	...

08003e88 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003e88:	b480      	push	{r7}
 8003e8a:	b085      	sub	sp, #20
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	4a07      	ldr	r2, [pc, #28]	; (8003eb4 <vApplicationGetIdleTaskMemory+0x2c>)
 8003e98:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	4a06      	ldr	r2, [pc, #24]	; (8003eb8 <vApplicationGetIdleTaskMemory+0x30>)
 8003e9e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2280      	movs	r2, #128	; 0x80
 8003ea4:	601a      	str	r2, [r3, #0]
}
 8003ea6:	bf00      	nop
 8003ea8:	3714      	adds	r7, #20
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	200009c0 	.word	0x200009c0
 8003eb8:	20000a7c 	.word	0x20000a7c

08003ebc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003ebc:	b480      	push	{r7}
 8003ebe:	b085      	sub	sp, #20
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	4a07      	ldr	r2, [pc, #28]	; (8003ee8 <vApplicationGetTimerTaskMemory+0x2c>)
 8003ecc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	4a06      	ldr	r2, [pc, #24]	; (8003eec <vApplicationGetTimerTaskMemory+0x30>)
 8003ed2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003eda:	601a      	str	r2, [r3, #0]
}
 8003edc:	bf00      	nop
 8003ede:	3714      	adds	r7, #20
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr
 8003ee8:	20000c7c 	.word	0x20000c7c
 8003eec:	20000d38 	.word	0x20000d38

08003ef0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f103 0208 	add.w	r2, r3, #8
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f04f 32ff 	mov.w	r2, #4294967295
 8003f08:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f103 0208 	add.w	r2, r3, #8
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f103 0208 	add.w	r2, r3, #8
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003f24:	bf00      	nop
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003f3e:	bf00      	nop
 8003f40:	370c      	adds	r7, #12
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr

08003f4a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f4a:	b480      	push	{r7}
 8003f4c:	b085      	sub	sp, #20
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
 8003f52:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	68fa      	ldr	r2, [r7, #12]
 8003f5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	689a      	ldr	r2, [r3, #8]
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	683a      	ldr	r2, [r7, #0]
 8003f6e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	683a      	ldr	r2, [r7, #0]
 8003f74:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	1c5a      	adds	r2, r3, #1
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	601a      	str	r2, [r3, #0]
}
 8003f86:	bf00      	nop
 8003f88:	3714      	adds	r7, #20
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr

08003f92 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f92:	b480      	push	{r7}
 8003f94:	b085      	sub	sp, #20
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
 8003f9a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fa8:	d103      	bne.n	8003fb2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	60fb      	str	r3, [r7, #12]
 8003fb0:	e00c      	b.n	8003fcc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	3308      	adds	r3, #8
 8003fb6:	60fb      	str	r3, [r7, #12]
 8003fb8:	e002      	b.n	8003fc0 <vListInsert+0x2e>
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	60fb      	str	r3, [r7, #12]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	68ba      	ldr	r2, [r7, #8]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d2f6      	bcs.n	8003fba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	685a      	ldr	r2, [r3, #4]
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	683a      	ldr	r2, [r7, #0]
 8003fda:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	68fa      	ldr	r2, [r7, #12]
 8003fe0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	683a      	ldr	r2, [r7, #0]
 8003fe6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	1c5a      	adds	r2, r3, #1
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	601a      	str	r2, [r3, #0]
}
 8003ff8:	bf00      	nop
 8003ffa:	3714      	adds	r7, #20
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr

08004004 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004004:	b480      	push	{r7}
 8004006:	b085      	sub	sp, #20
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	691b      	ldr	r3, [r3, #16]
 8004010:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	6892      	ldr	r2, [r2, #8]
 800401a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	6852      	ldr	r2, [r2, #4]
 8004024:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	429a      	cmp	r2, r3
 800402e:	d103      	bne.n	8004038 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	689a      	ldr	r2, [r3, #8]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	1e5a      	subs	r2, r3, #1
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
}
 800404c:	4618      	mov	r0, r3
 800404e:	3714      	adds	r7, #20
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d10a      	bne.n	8004082 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800406c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004070:	f383 8811 	msr	BASEPRI, r3
 8004074:	f3bf 8f6f 	isb	sy
 8004078:	f3bf 8f4f 	dsb	sy
 800407c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800407e:	bf00      	nop
 8004080:	e7fe      	b.n	8004080 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004082:	f002 f877 	bl	8006174 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800408e:	68f9      	ldr	r1, [r7, #12]
 8004090:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004092:	fb01 f303 	mul.w	r3, r1, r3
 8004096:	441a      	add	r2, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2200      	movs	r2, #0
 80040a0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040b2:	3b01      	subs	r3, #1
 80040b4:	68f9      	ldr	r1, [r7, #12]
 80040b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80040b8:	fb01 f303 	mul.w	r3, r1, r3
 80040bc:	441a      	add	r2, r3
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	22ff      	movs	r2, #255	; 0xff
 80040c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	22ff      	movs	r2, #255	; 0xff
 80040ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d114      	bne.n	8004102 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	691b      	ldr	r3, [r3, #16]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d01a      	beq.n	8004116 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	3310      	adds	r3, #16
 80040e4:	4618      	mov	r0, r3
 80040e6:	f001 f929 	bl	800533c <xTaskRemoveFromEventList>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d012      	beq.n	8004116 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80040f0:	4b0c      	ldr	r3, [pc, #48]	; (8004124 <xQueueGenericReset+0xcc>)
 80040f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040f6:	601a      	str	r2, [r3, #0]
 80040f8:	f3bf 8f4f 	dsb	sy
 80040fc:	f3bf 8f6f 	isb	sy
 8004100:	e009      	b.n	8004116 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	3310      	adds	r3, #16
 8004106:	4618      	mov	r0, r3
 8004108:	f7ff fef2 	bl	8003ef0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	3324      	adds	r3, #36	; 0x24
 8004110:	4618      	mov	r0, r3
 8004112:	f7ff feed 	bl	8003ef0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004116:	f002 f85d 	bl	80061d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800411a:	2301      	movs	r3, #1
}
 800411c:	4618      	mov	r0, r3
 800411e:	3710      	adds	r7, #16
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}
 8004124:	e000ed04 	.word	0xe000ed04

08004128 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004128:	b580      	push	{r7, lr}
 800412a:	b08e      	sub	sp, #56	; 0x38
 800412c:	af02      	add	r7, sp, #8
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	607a      	str	r2, [r7, #4]
 8004134:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d10a      	bne.n	8004152 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800413c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004140:	f383 8811 	msr	BASEPRI, r3
 8004144:	f3bf 8f6f 	isb	sy
 8004148:	f3bf 8f4f 	dsb	sy
 800414c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800414e:	bf00      	nop
 8004150:	e7fe      	b.n	8004150 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d10a      	bne.n	800416e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800415c:	f383 8811 	msr	BASEPRI, r3
 8004160:	f3bf 8f6f 	isb	sy
 8004164:	f3bf 8f4f 	dsb	sy
 8004168:	627b      	str	r3, [r7, #36]	; 0x24
}
 800416a:	bf00      	nop
 800416c:	e7fe      	b.n	800416c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d002      	beq.n	800417a <xQueueGenericCreateStatic+0x52>
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d001      	beq.n	800417e <xQueueGenericCreateStatic+0x56>
 800417a:	2301      	movs	r3, #1
 800417c:	e000      	b.n	8004180 <xQueueGenericCreateStatic+0x58>
 800417e:	2300      	movs	r3, #0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d10a      	bne.n	800419a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004188:	f383 8811 	msr	BASEPRI, r3
 800418c:	f3bf 8f6f 	isb	sy
 8004190:	f3bf 8f4f 	dsb	sy
 8004194:	623b      	str	r3, [r7, #32]
}
 8004196:	bf00      	nop
 8004198:	e7fe      	b.n	8004198 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d102      	bne.n	80041a6 <xQueueGenericCreateStatic+0x7e>
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d101      	bne.n	80041aa <xQueueGenericCreateStatic+0x82>
 80041a6:	2301      	movs	r3, #1
 80041a8:	e000      	b.n	80041ac <xQueueGenericCreateStatic+0x84>
 80041aa:	2300      	movs	r3, #0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d10a      	bne.n	80041c6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80041b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b4:	f383 8811 	msr	BASEPRI, r3
 80041b8:	f3bf 8f6f 	isb	sy
 80041bc:	f3bf 8f4f 	dsb	sy
 80041c0:	61fb      	str	r3, [r7, #28]
}
 80041c2:	bf00      	nop
 80041c4:	e7fe      	b.n	80041c4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80041c6:	2350      	movs	r3, #80	; 0x50
 80041c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	2b50      	cmp	r3, #80	; 0x50
 80041ce:	d00a      	beq.n	80041e6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80041d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d4:	f383 8811 	msr	BASEPRI, r3
 80041d8:	f3bf 8f6f 	isb	sy
 80041dc:	f3bf 8f4f 	dsb	sy
 80041e0:	61bb      	str	r3, [r7, #24]
}
 80041e2:	bf00      	nop
 80041e4:	e7fe      	b.n	80041e4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80041e6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80041ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d00d      	beq.n	800420e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80041f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041f4:	2201      	movs	r2, #1
 80041f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80041fa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80041fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004200:	9300      	str	r3, [sp, #0]
 8004202:	4613      	mov	r3, r2
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	68b9      	ldr	r1, [r7, #8]
 8004208:	68f8      	ldr	r0, [r7, #12]
 800420a:	f000 f805 	bl	8004218 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800420e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004210:	4618      	mov	r0, r3
 8004212:	3730      	adds	r7, #48	; 0x30
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	607a      	str	r2, [r7, #4]
 8004224:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d103      	bne.n	8004234 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	69ba      	ldr	r2, [r7, #24]
 8004230:	601a      	str	r2, [r3, #0]
 8004232:	e002      	b.n	800423a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	68fa      	ldr	r2, [r7, #12]
 800423e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	68ba      	ldr	r2, [r7, #8]
 8004244:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004246:	2101      	movs	r1, #1
 8004248:	69b8      	ldr	r0, [r7, #24]
 800424a:	f7ff ff05 	bl	8004058 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	78fa      	ldrb	r2, [r7, #3]
 8004252:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004256:	bf00      	nop
 8004258:	3710      	adds	r7, #16
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
	...

08004260 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b08e      	sub	sp, #56	; 0x38
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
 800426c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800426e:	2300      	movs	r3, #0
 8004270:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004278:	2b00      	cmp	r3, #0
 800427a:	d10a      	bne.n	8004292 <xQueueGenericSend+0x32>
	__asm volatile
 800427c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004280:	f383 8811 	msr	BASEPRI, r3
 8004284:	f3bf 8f6f 	isb	sy
 8004288:	f3bf 8f4f 	dsb	sy
 800428c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800428e:	bf00      	nop
 8004290:	e7fe      	b.n	8004290 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d103      	bne.n	80042a0 <xQueueGenericSend+0x40>
 8004298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800429a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429c:	2b00      	cmp	r3, #0
 800429e:	d101      	bne.n	80042a4 <xQueueGenericSend+0x44>
 80042a0:	2301      	movs	r3, #1
 80042a2:	e000      	b.n	80042a6 <xQueueGenericSend+0x46>
 80042a4:	2300      	movs	r3, #0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d10a      	bne.n	80042c0 <xQueueGenericSend+0x60>
	__asm volatile
 80042aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ae:	f383 8811 	msr	BASEPRI, r3
 80042b2:	f3bf 8f6f 	isb	sy
 80042b6:	f3bf 8f4f 	dsb	sy
 80042ba:	627b      	str	r3, [r7, #36]	; 0x24
}
 80042bc:	bf00      	nop
 80042be:	e7fe      	b.n	80042be <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d103      	bne.n	80042ce <xQueueGenericSend+0x6e>
 80042c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d101      	bne.n	80042d2 <xQueueGenericSend+0x72>
 80042ce:	2301      	movs	r3, #1
 80042d0:	e000      	b.n	80042d4 <xQueueGenericSend+0x74>
 80042d2:	2300      	movs	r3, #0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d10a      	bne.n	80042ee <xQueueGenericSend+0x8e>
	__asm volatile
 80042d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042dc:	f383 8811 	msr	BASEPRI, r3
 80042e0:	f3bf 8f6f 	isb	sy
 80042e4:	f3bf 8f4f 	dsb	sy
 80042e8:	623b      	str	r3, [r7, #32]
}
 80042ea:	bf00      	nop
 80042ec:	e7fe      	b.n	80042ec <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80042ee:	f001 f9e7 	bl	80056c0 <xTaskGetSchedulerState>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d102      	bne.n	80042fe <xQueueGenericSend+0x9e>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d101      	bne.n	8004302 <xQueueGenericSend+0xa2>
 80042fe:	2301      	movs	r3, #1
 8004300:	e000      	b.n	8004304 <xQueueGenericSend+0xa4>
 8004302:	2300      	movs	r3, #0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d10a      	bne.n	800431e <xQueueGenericSend+0xbe>
	__asm volatile
 8004308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800430c:	f383 8811 	msr	BASEPRI, r3
 8004310:	f3bf 8f6f 	isb	sy
 8004314:	f3bf 8f4f 	dsb	sy
 8004318:	61fb      	str	r3, [r7, #28]
}
 800431a:	bf00      	nop
 800431c:	e7fe      	b.n	800431c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800431e:	f001 ff29 	bl	8006174 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004324:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800432a:	429a      	cmp	r2, r3
 800432c:	d302      	bcc.n	8004334 <xQueueGenericSend+0xd4>
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	2b02      	cmp	r3, #2
 8004332:	d129      	bne.n	8004388 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004334:	683a      	ldr	r2, [r7, #0]
 8004336:	68b9      	ldr	r1, [r7, #8]
 8004338:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800433a:	f000 fa0b 	bl	8004754 <prvCopyDataToQueue>
 800433e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004344:	2b00      	cmp	r3, #0
 8004346:	d010      	beq.n	800436a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800434a:	3324      	adds	r3, #36	; 0x24
 800434c:	4618      	mov	r0, r3
 800434e:	f000 fff5 	bl	800533c <xTaskRemoveFromEventList>
 8004352:	4603      	mov	r3, r0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d013      	beq.n	8004380 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004358:	4b3f      	ldr	r3, [pc, #252]	; (8004458 <xQueueGenericSend+0x1f8>)
 800435a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800435e:	601a      	str	r2, [r3, #0]
 8004360:	f3bf 8f4f 	dsb	sy
 8004364:	f3bf 8f6f 	isb	sy
 8004368:	e00a      	b.n	8004380 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800436a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800436c:	2b00      	cmp	r3, #0
 800436e:	d007      	beq.n	8004380 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004370:	4b39      	ldr	r3, [pc, #228]	; (8004458 <xQueueGenericSend+0x1f8>)
 8004372:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004376:	601a      	str	r2, [r3, #0]
 8004378:	f3bf 8f4f 	dsb	sy
 800437c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004380:	f001 ff28 	bl	80061d4 <vPortExitCritical>
				return pdPASS;
 8004384:	2301      	movs	r3, #1
 8004386:	e063      	b.n	8004450 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d103      	bne.n	8004396 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800438e:	f001 ff21 	bl	80061d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004392:	2300      	movs	r3, #0
 8004394:	e05c      	b.n	8004450 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004398:	2b00      	cmp	r3, #0
 800439a:	d106      	bne.n	80043aa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800439c:	f107 0314 	add.w	r3, r7, #20
 80043a0:	4618      	mov	r0, r3
 80043a2:	f001 f82f 	bl	8005404 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80043a6:	2301      	movs	r3, #1
 80043a8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80043aa:	f001 ff13 	bl	80061d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80043ae:	f000 fd9b 	bl	8004ee8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80043b2:	f001 fedf 	bl	8006174 <vPortEnterCritical>
 80043b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80043bc:	b25b      	sxtb	r3, r3
 80043be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c2:	d103      	bne.n	80043cc <xQueueGenericSend+0x16c>
 80043c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c6:	2200      	movs	r2, #0
 80043c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043d2:	b25b      	sxtb	r3, r3
 80043d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d8:	d103      	bne.n	80043e2 <xQueueGenericSend+0x182>
 80043da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043dc:	2200      	movs	r2, #0
 80043de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043e2:	f001 fef7 	bl	80061d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80043e6:	1d3a      	adds	r2, r7, #4
 80043e8:	f107 0314 	add.w	r3, r7, #20
 80043ec:	4611      	mov	r1, r2
 80043ee:	4618      	mov	r0, r3
 80043f0:	f001 f81e 	bl	8005430 <xTaskCheckForTimeOut>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d124      	bne.n	8004444 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80043fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043fc:	f000 faa2 	bl	8004944 <prvIsQueueFull>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d018      	beq.n	8004438 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004408:	3310      	adds	r3, #16
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	4611      	mov	r1, r2
 800440e:	4618      	mov	r0, r3
 8004410:	f000 ff44 	bl	800529c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004414:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004416:	f000 fa2d 	bl	8004874 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800441a:	f000 fd73 	bl	8004f04 <xTaskResumeAll>
 800441e:	4603      	mov	r3, r0
 8004420:	2b00      	cmp	r3, #0
 8004422:	f47f af7c 	bne.w	800431e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004426:	4b0c      	ldr	r3, [pc, #48]	; (8004458 <xQueueGenericSend+0x1f8>)
 8004428:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800442c:	601a      	str	r2, [r3, #0]
 800442e:	f3bf 8f4f 	dsb	sy
 8004432:	f3bf 8f6f 	isb	sy
 8004436:	e772      	b.n	800431e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004438:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800443a:	f000 fa1b 	bl	8004874 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800443e:	f000 fd61 	bl	8004f04 <xTaskResumeAll>
 8004442:	e76c      	b.n	800431e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004444:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004446:	f000 fa15 	bl	8004874 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800444a:	f000 fd5b 	bl	8004f04 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800444e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004450:	4618      	mov	r0, r3
 8004452:	3738      	adds	r7, #56	; 0x38
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}
 8004458:	e000ed04 	.word	0xe000ed04

0800445c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b090      	sub	sp, #64	; 0x40
 8004460:	af00      	add	r7, sp, #0
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	607a      	str	r2, [r7, #4]
 8004468:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800446e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004470:	2b00      	cmp	r3, #0
 8004472:	d10a      	bne.n	800448a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004478:	f383 8811 	msr	BASEPRI, r3
 800447c:	f3bf 8f6f 	isb	sy
 8004480:	f3bf 8f4f 	dsb	sy
 8004484:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004486:	bf00      	nop
 8004488:	e7fe      	b.n	8004488 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d103      	bne.n	8004498 <xQueueGenericSendFromISR+0x3c>
 8004490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004494:	2b00      	cmp	r3, #0
 8004496:	d101      	bne.n	800449c <xQueueGenericSendFromISR+0x40>
 8004498:	2301      	movs	r3, #1
 800449a:	e000      	b.n	800449e <xQueueGenericSendFromISR+0x42>
 800449c:	2300      	movs	r3, #0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d10a      	bne.n	80044b8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80044a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a6:	f383 8811 	msr	BASEPRI, r3
 80044aa:	f3bf 8f6f 	isb	sy
 80044ae:	f3bf 8f4f 	dsb	sy
 80044b2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80044b4:	bf00      	nop
 80044b6:	e7fe      	b.n	80044b6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d103      	bne.n	80044c6 <xQueueGenericSendFromISR+0x6a>
 80044be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d101      	bne.n	80044ca <xQueueGenericSendFromISR+0x6e>
 80044c6:	2301      	movs	r3, #1
 80044c8:	e000      	b.n	80044cc <xQueueGenericSendFromISR+0x70>
 80044ca:	2300      	movs	r3, #0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d10a      	bne.n	80044e6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80044d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d4:	f383 8811 	msr	BASEPRI, r3
 80044d8:	f3bf 8f6f 	isb	sy
 80044dc:	f3bf 8f4f 	dsb	sy
 80044e0:	623b      	str	r3, [r7, #32]
}
 80044e2:	bf00      	nop
 80044e4:	e7fe      	b.n	80044e4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80044e6:	f001 ff27 	bl	8006338 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80044ea:	f3ef 8211 	mrs	r2, BASEPRI
 80044ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f2:	f383 8811 	msr	BASEPRI, r3
 80044f6:	f3bf 8f6f 	isb	sy
 80044fa:	f3bf 8f4f 	dsb	sy
 80044fe:	61fa      	str	r2, [r7, #28]
 8004500:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004502:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004504:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004508:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800450a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800450c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800450e:	429a      	cmp	r2, r3
 8004510:	d302      	bcc.n	8004518 <xQueueGenericSendFromISR+0xbc>
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	2b02      	cmp	r3, #2
 8004516:	d12f      	bne.n	8004578 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800451a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800451e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004526:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004528:	683a      	ldr	r2, [r7, #0]
 800452a:	68b9      	ldr	r1, [r7, #8]
 800452c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800452e:	f000 f911 	bl	8004754 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004532:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800453a:	d112      	bne.n	8004562 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800453c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800453e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004540:	2b00      	cmp	r3, #0
 8004542:	d016      	beq.n	8004572 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004546:	3324      	adds	r3, #36	; 0x24
 8004548:	4618      	mov	r0, r3
 800454a:	f000 fef7 	bl	800533c <xTaskRemoveFromEventList>
 800454e:	4603      	mov	r3, r0
 8004550:	2b00      	cmp	r3, #0
 8004552:	d00e      	beq.n	8004572 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00b      	beq.n	8004572 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2201      	movs	r2, #1
 800455e:	601a      	str	r2, [r3, #0]
 8004560:	e007      	b.n	8004572 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004562:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004566:	3301      	adds	r3, #1
 8004568:	b2db      	uxtb	r3, r3
 800456a:	b25a      	sxtb	r2, r3
 800456c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800456e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004572:	2301      	movs	r3, #1
 8004574:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004576:	e001      	b.n	800457c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004578:	2300      	movs	r3, #0
 800457a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800457c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800457e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004586:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800458a:	4618      	mov	r0, r3
 800458c:	3740      	adds	r7, #64	; 0x40
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
	...

08004594 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b08c      	sub	sp, #48	; 0x30
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80045a0:	2300      	movs	r3, #0
 80045a2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80045a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d10a      	bne.n	80045c4 <xQueueReceive+0x30>
	__asm volatile
 80045ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b2:	f383 8811 	msr	BASEPRI, r3
 80045b6:	f3bf 8f6f 	isb	sy
 80045ba:	f3bf 8f4f 	dsb	sy
 80045be:	623b      	str	r3, [r7, #32]
}
 80045c0:	bf00      	nop
 80045c2:	e7fe      	b.n	80045c2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d103      	bne.n	80045d2 <xQueueReceive+0x3e>
 80045ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d101      	bne.n	80045d6 <xQueueReceive+0x42>
 80045d2:	2301      	movs	r3, #1
 80045d4:	e000      	b.n	80045d8 <xQueueReceive+0x44>
 80045d6:	2300      	movs	r3, #0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d10a      	bne.n	80045f2 <xQueueReceive+0x5e>
	__asm volatile
 80045dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e0:	f383 8811 	msr	BASEPRI, r3
 80045e4:	f3bf 8f6f 	isb	sy
 80045e8:	f3bf 8f4f 	dsb	sy
 80045ec:	61fb      	str	r3, [r7, #28]
}
 80045ee:	bf00      	nop
 80045f0:	e7fe      	b.n	80045f0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80045f2:	f001 f865 	bl	80056c0 <xTaskGetSchedulerState>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d102      	bne.n	8004602 <xQueueReceive+0x6e>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d101      	bne.n	8004606 <xQueueReceive+0x72>
 8004602:	2301      	movs	r3, #1
 8004604:	e000      	b.n	8004608 <xQueueReceive+0x74>
 8004606:	2300      	movs	r3, #0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d10a      	bne.n	8004622 <xQueueReceive+0x8e>
	__asm volatile
 800460c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004610:	f383 8811 	msr	BASEPRI, r3
 8004614:	f3bf 8f6f 	isb	sy
 8004618:	f3bf 8f4f 	dsb	sy
 800461c:	61bb      	str	r3, [r7, #24]
}
 800461e:	bf00      	nop
 8004620:	e7fe      	b.n	8004620 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004622:	f001 fda7 	bl	8006174 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800462c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462e:	2b00      	cmp	r3, #0
 8004630:	d01f      	beq.n	8004672 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004632:	68b9      	ldr	r1, [r7, #8]
 8004634:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004636:	f000 f8f7 	bl	8004828 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800463a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463c:	1e5a      	subs	r2, r3, #1
 800463e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004640:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00f      	beq.n	800466a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800464a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800464c:	3310      	adds	r3, #16
 800464e:	4618      	mov	r0, r3
 8004650:	f000 fe74 	bl	800533c <xTaskRemoveFromEventList>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d007      	beq.n	800466a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800465a:	4b3d      	ldr	r3, [pc, #244]	; (8004750 <xQueueReceive+0x1bc>)
 800465c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004660:	601a      	str	r2, [r3, #0]
 8004662:	f3bf 8f4f 	dsb	sy
 8004666:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800466a:	f001 fdb3 	bl	80061d4 <vPortExitCritical>
				return pdPASS;
 800466e:	2301      	movs	r3, #1
 8004670:	e069      	b.n	8004746 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d103      	bne.n	8004680 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004678:	f001 fdac 	bl	80061d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800467c:	2300      	movs	r3, #0
 800467e:	e062      	b.n	8004746 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004682:	2b00      	cmp	r3, #0
 8004684:	d106      	bne.n	8004694 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004686:	f107 0310 	add.w	r3, r7, #16
 800468a:	4618      	mov	r0, r3
 800468c:	f000 feba 	bl	8005404 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004690:	2301      	movs	r3, #1
 8004692:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004694:	f001 fd9e 	bl	80061d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004698:	f000 fc26 	bl	8004ee8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800469c:	f001 fd6a 	bl	8006174 <vPortEnterCritical>
 80046a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80046a6:	b25b      	sxtb	r3, r3
 80046a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ac:	d103      	bne.n	80046b6 <xQueueReceive+0x122>
 80046ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046bc:	b25b      	sxtb	r3, r3
 80046be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c2:	d103      	bne.n	80046cc <xQueueReceive+0x138>
 80046c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c6:	2200      	movs	r2, #0
 80046c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046cc:	f001 fd82 	bl	80061d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80046d0:	1d3a      	adds	r2, r7, #4
 80046d2:	f107 0310 	add.w	r3, r7, #16
 80046d6:	4611      	mov	r1, r2
 80046d8:	4618      	mov	r0, r3
 80046da:	f000 fea9 	bl	8005430 <xTaskCheckForTimeOut>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d123      	bne.n	800472c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80046e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046e6:	f000 f917 	bl	8004918 <prvIsQueueEmpty>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d017      	beq.n	8004720 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80046f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f2:	3324      	adds	r3, #36	; 0x24
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	4611      	mov	r1, r2
 80046f8:	4618      	mov	r0, r3
 80046fa:	f000 fdcf 	bl	800529c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80046fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004700:	f000 f8b8 	bl	8004874 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004704:	f000 fbfe 	bl	8004f04 <xTaskResumeAll>
 8004708:	4603      	mov	r3, r0
 800470a:	2b00      	cmp	r3, #0
 800470c:	d189      	bne.n	8004622 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800470e:	4b10      	ldr	r3, [pc, #64]	; (8004750 <xQueueReceive+0x1bc>)
 8004710:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004714:	601a      	str	r2, [r3, #0]
 8004716:	f3bf 8f4f 	dsb	sy
 800471a:	f3bf 8f6f 	isb	sy
 800471e:	e780      	b.n	8004622 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004720:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004722:	f000 f8a7 	bl	8004874 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004726:	f000 fbed 	bl	8004f04 <xTaskResumeAll>
 800472a:	e77a      	b.n	8004622 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800472c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800472e:	f000 f8a1 	bl	8004874 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004732:	f000 fbe7 	bl	8004f04 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004736:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004738:	f000 f8ee 	bl	8004918 <prvIsQueueEmpty>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	f43f af6f 	beq.w	8004622 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004744:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004746:	4618      	mov	r0, r3
 8004748:	3730      	adds	r7, #48	; 0x30
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	e000ed04 	.word	0xe000ed04

08004754 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b086      	sub	sp, #24
 8004758:	af00      	add	r7, sp, #0
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	60b9      	str	r1, [r7, #8]
 800475e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004760:	2300      	movs	r3, #0
 8004762:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004768:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476e:	2b00      	cmp	r3, #0
 8004770:	d10d      	bne.n	800478e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d14d      	bne.n	8004816 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	4618      	mov	r0, r3
 8004780:	f000 ffbc 	bl	80056fc <xTaskPriorityDisinherit>
 8004784:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2200      	movs	r2, #0
 800478a:	609a      	str	r2, [r3, #8]
 800478c:	e043      	b.n	8004816 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d119      	bne.n	80047c8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6858      	ldr	r0, [r3, #4]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479c:	461a      	mov	r2, r3
 800479e:	68b9      	ldr	r1, [r7, #8]
 80047a0:	f002 f917 	bl	80069d2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	685a      	ldr	r2, [r3, #4]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ac:	441a      	add	r2, r3
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	685a      	ldr	r2, [r3, #4]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d32b      	bcc.n	8004816 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	605a      	str	r2, [r3, #4]
 80047c6:	e026      	b.n	8004816 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	68d8      	ldr	r0, [r3, #12]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d0:	461a      	mov	r2, r3
 80047d2:	68b9      	ldr	r1, [r7, #8]
 80047d4:	f002 f8fd 	bl	80069d2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	68da      	ldr	r2, [r3, #12]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e0:	425b      	negs	r3, r3
 80047e2:	441a      	add	r2, r3
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	68da      	ldr	r2, [r3, #12]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d207      	bcs.n	8004804 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	689a      	ldr	r2, [r3, #8]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fc:	425b      	negs	r3, r3
 80047fe:	441a      	add	r2, r3
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2b02      	cmp	r3, #2
 8004808:	d105      	bne.n	8004816 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d002      	beq.n	8004816 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	3b01      	subs	r3, #1
 8004814:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	1c5a      	adds	r2, r3, #1
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800481e:	697b      	ldr	r3, [r7, #20]
}
 8004820:	4618      	mov	r0, r3
 8004822:	3718      	adds	r7, #24
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}

08004828 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b082      	sub	sp, #8
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004836:	2b00      	cmp	r3, #0
 8004838:	d018      	beq.n	800486c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	68da      	ldr	r2, [r3, #12]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004842:	441a      	add	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	68da      	ldr	r2, [r3, #12]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	429a      	cmp	r2, r3
 8004852:	d303      	bcc.n	800485c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	68d9      	ldr	r1, [r3, #12]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004864:	461a      	mov	r2, r3
 8004866:	6838      	ldr	r0, [r7, #0]
 8004868:	f002 f8b3 	bl	80069d2 <memcpy>
	}
}
 800486c:	bf00      	nop
 800486e:	3708      	adds	r7, #8
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}

08004874 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800487c:	f001 fc7a 	bl	8006174 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004886:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004888:	e011      	b.n	80048ae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488e:	2b00      	cmp	r3, #0
 8004890:	d012      	beq.n	80048b8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	3324      	adds	r3, #36	; 0x24
 8004896:	4618      	mov	r0, r3
 8004898:	f000 fd50 	bl	800533c <xTaskRemoveFromEventList>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d001      	beq.n	80048a6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80048a2:	f000 fe27 	bl	80054f4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80048a6:	7bfb      	ldrb	r3, [r7, #15]
 80048a8:	3b01      	subs	r3, #1
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80048ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	dce9      	bgt.n	800488a <prvUnlockQueue+0x16>
 80048b6:	e000      	b.n	80048ba <prvUnlockQueue+0x46>
					break;
 80048b8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	22ff      	movs	r2, #255	; 0xff
 80048be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80048c2:	f001 fc87 	bl	80061d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80048c6:	f001 fc55 	bl	8006174 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80048d0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80048d2:	e011      	b.n	80048f8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d012      	beq.n	8004902 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	3310      	adds	r3, #16
 80048e0:	4618      	mov	r0, r3
 80048e2:	f000 fd2b 	bl	800533c <xTaskRemoveFromEventList>
 80048e6:	4603      	mov	r3, r0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d001      	beq.n	80048f0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80048ec:	f000 fe02 	bl	80054f4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80048f0:	7bbb      	ldrb	r3, [r7, #14]
 80048f2:	3b01      	subs	r3, #1
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80048f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	dce9      	bgt.n	80048d4 <prvUnlockQueue+0x60>
 8004900:	e000      	b.n	8004904 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004902:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	22ff      	movs	r2, #255	; 0xff
 8004908:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800490c:	f001 fc62 	bl	80061d4 <vPortExitCritical>
}
 8004910:	bf00      	nop
 8004912:	3710      	adds	r7, #16
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}

08004918 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004920:	f001 fc28 	bl	8006174 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004928:	2b00      	cmp	r3, #0
 800492a:	d102      	bne.n	8004932 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800492c:	2301      	movs	r3, #1
 800492e:	60fb      	str	r3, [r7, #12]
 8004930:	e001      	b.n	8004936 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004932:	2300      	movs	r3, #0
 8004934:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004936:	f001 fc4d 	bl	80061d4 <vPortExitCritical>

	return xReturn;
 800493a:	68fb      	ldr	r3, [r7, #12]
}
 800493c:	4618      	mov	r0, r3
 800493e:	3710      	adds	r7, #16
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}

08004944 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800494c:	f001 fc12 	bl	8006174 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004958:	429a      	cmp	r2, r3
 800495a:	d102      	bne.n	8004962 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800495c:	2301      	movs	r3, #1
 800495e:	60fb      	str	r3, [r7, #12]
 8004960:	e001      	b.n	8004966 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004962:	2300      	movs	r3, #0
 8004964:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004966:	f001 fc35 	bl	80061d4 <vPortExitCritical>

	return xReturn;
 800496a:	68fb      	ldr	r3, [r7, #12]
}
 800496c:	4618      	mov	r0, r3
 800496e:	3710      	adds	r7, #16
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004974:	b480      	push	{r7}
 8004976:	b085      	sub	sp, #20
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800497e:	2300      	movs	r3, #0
 8004980:	60fb      	str	r3, [r7, #12]
 8004982:	e014      	b.n	80049ae <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004984:	4a0f      	ldr	r2, [pc, #60]	; (80049c4 <vQueueAddToRegistry+0x50>)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d10b      	bne.n	80049a8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004990:	490c      	ldr	r1, [pc, #48]	; (80049c4 <vQueueAddToRegistry+0x50>)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	683a      	ldr	r2, [r7, #0]
 8004996:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800499a:	4a0a      	ldr	r2, [pc, #40]	; (80049c4 <vQueueAddToRegistry+0x50>)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	00db      	lsls	r3, r3, #3
 80049a0:	4413      	add	r3, r2
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80049a6:	e006      	b.n	80049b6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	3301      	adds	r3, #1
 80049ac:	60fb      	str	r3, [r7, #12]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2b07      	cmp	r3, #7
 80049b2:	d9e7      	bls.n	8004984 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80049b4:	bf00      	nop
 80049b6:	bf00      	nop
 80049b8:	3714      	adds	r7, #20
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr
 80049c2:	bf00      	nop
 80049c4:	20001138 	.word	0x20001138

080049c8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b086      	sub	sp, #24
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80049d8:	f001 fbcc 	bl	8006174 <vPortEnterCritical>
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049e2:	b25b      	sxtb	r3, r3
 80049e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049e8:	d103      	bne.n	80049f2 <vQueueWaitForMessageRestricted+0x2a>
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	2200      	movs	r2, #0
 80049ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049f8:	b25b      	sxtb	r3, r3
 80049fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049fe:	d103      	bne.n	8004a08 <vQueueWaitForMessageRestricted+0x40>
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a08:	f001 fbe4 	bl	80061d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d106      	bne.n	8004a22 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	3324      	adds	r3, #36	; 0x24
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	68b9      	ldr	r1, [r7, #8]
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f000 fc61 	bl	80052e4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004a22:	6978      	ldr	r0, [r7, #20]
 8004a24:	f7ff ff26 	bl	8004874 <prvUnlockQueue>
	}
 8004a28:	bf00      	nop
 8004a2a:	3718      	adds	r7, #24
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b08e      	sub	sp, #56	; 0x38
 8004a34:	af04      	add	r7, sp, #16
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	607a      	str	r2, [r7, #4]
 8004a3c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d10a      	bne.n	8004a5a <xTaskCreateStatic+0x2a>
	__asm volatile
 8004a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a48:	f383 8811 	msr	BASEPRI, r3
 8004a4c:	f3bf 8f6f 	isb	sy
 8004a50:	f3bf 8f4f 	dsb	sy
 8004a54:	623b      	str	r3, [r7, #32]
}
 8004a56:	bf00      	nop
 8004a58:	e7fe      	b.n	8004a58 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d10a      	bne.n	8004a76 <xTaskCreateStatic+0x46>
	__asm volatile
 8004a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a64:	f383 8811 	msr	BASEPRI, r3
 8004a68:	f3bf 8f6f 	isb	sy
 8004a6c:	f3bf 8f4f 	dsb	sy
 8004a70:	61fb      	str	r3, [r7, #28]
}
 8004a72:	bf00      	nop
 8004a74:	e7fe      	b.n	8004a74 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004a76:	23bc      	movs	r3, #188	; 0xbc
 8004a78:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	2bbc      	cmp	r3, #188	; 0xbc
 8004a7e:	d00a      	beq.n	8004a96 <xTaskCreateStatic+0x66>
	__asm volatile
 8004a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a84:	f383 8811 	msr	BASEPRI, r3
 8004a88:	f3bf 8f6f 	isb	sy
 8004a8c:	f3bf 8f4f 	dsb	sy
 8004a90:	61bb      	str	r3, [r7, #24]
}
 8004a92:	bf00      	nop
 8004a94:	e7fe      	b.n	8004a94 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004a96:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d01e      	beq.n	8004adc <xTaskCreateStatic+0xac>
 8004a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d01b      	beq.n	8004adc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aa6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aaa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004aac:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab0:	2202      	movs	r2, #2
 8004ab2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	9303      	str	r3, [sp, #12]
 8004aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004abc:	9302      	str	r3, [sp, #8]
 8004abe:	f107 0314 	add.w	r3, r7, #20
 8004ac2:	9301      	str	r3, [sp, #4]
 8004ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac6:	9300      	str	r3, [sp, #0]
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	68b9      	ldr	r1, [r7, #8]
 8004ace:	68f8      	ldr	r0, [r7, #12]
 8004ad0:	f000 f850 	bl	8004b74 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ad4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ad6:	f000 f8f3 	bl	8004cc0 <prvAddNewTaskToReadyList>
 8004ada:	e001      	b.n	8004ae0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004adc:	2300      	movs	r3, #0
 8004ade:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004ae0:	697b      	ldr	r3, [r7, #20]
	}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3728      	adds	r7, #40	; 0x28
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}

08004aea <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b08c      	sub	sp, #48	; 0x30
 8004aee:	af04      	add	r7, sp, #16
 8004af0:	60f8      	str	r0, [r7, #12]
 8004af2:	60b9      	str	r1, [r7, #8]
 8004af4:	603b      	str	r3, [r7, #0]
 8004af6:	4613      	mov	r3, r2
 8004af8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004afa:	88fb      	ldrh	r3, [r7, #6]
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	4618      	mov	r0, r3
 8004b00:	f001 fc5a 	bl	80063b8 <pvPortMalloc>
 8004b04:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d00e      	beq.n	8004b2a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004b0c:	20bc      	movs	r0, #188	; 0xbc
 8004b0e:	f001 fc53 	bl	80063b8 <pvPortMalloc>
 8004b12:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d003      	beq.n	8004b22 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	697a      	ldr	r2, [r7, #20]
 8004b1e:	631a      	str	r2, [r3, #48]	; 0x30
 8004b20:	e005      	b.n	8004b2e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004b22:	6978      	ldr	r0, [r7, #20]
 8004b24:	f001 fd14 	bl	8006550 <vPortFree>
 8004b28:	e001      	b.n	8004b2e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d017      	beq.n	8004b64 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004b3c:	88fa      	ldrh	r2, [r7, #6]
 8004b3e:	2300      	movs	r3, #0
 8004b40:	9303      	str	r3, [sp, #12]
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	9302      	str	r3, [sp, #8]
 8004b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b48:	9301      	str	r3, [sp, #4]
 8004b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b4c:	9300      	str	r3, [sp, #0]
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	68b9      	ldr	r1, [r7, #8]
 8004b52:	68f8      	ldr	r0, [r7, #12]
 8004b54:	f000 f80e 	bl	8004b74 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004b58:	69f8      	ldr	r0, [r7, #28]
 8004b5a:	f000 f8b1 	bl	8004cc0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	61bb      	str	r3, [r7, #24]
 8004b62:	e002      	b.n	8004b6a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004b64:	f04f 33ff 	mov.w	r3, #4294967295
 8004b68:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004b6a:	69bb      	ldr	r3, [r7, #24]
	}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3720      	adds	r7, #32
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b088      	sub	sp, #32
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	607a      	str	r2, [r7, #4]
 8004b80:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b84:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	21a5      	movs	r1, #165	; 0xa5
 8004b8e:	f001 ff2e 	bl	80069ee <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004b9c:	3b01      	subs	r3, #1
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	4413      	add	r3, r2
 8004ba2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	f023 0307 	bic.w	r3, r3, #7
 8004baa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	f003 0307 	and.w	r3, r3, #7
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d00a      	beq.n	8004bcc <prvInitialiseNewTask+0x58>
	__asm volatile
 8004bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bba:	f383 8811 	msr	BASEPRI, r3
 8004bbe:	f3bf 8f6f 	isb	sy
 8004bc2:	f3bf 8f4f 	dsb	sy
 8004bc6:	617b      	str	r3, [r7, #20]
}
 8004bc8:	bf00      	nop
 8004bca:	e7fe      	b.n	8004bca <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d01f      	beq.n	8004c12 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	61fb      	str	r3, [r7, #28]
 8004bd6:	e012      	b.n	8004bfe <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004bd8:	68ba      	ldr	r2, [r7, #8]
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	4413      	add	r3, r2
 8004bde:	7819      	ldrb	r1, [r3, #0]
 8004be0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	4413      	add	r3, r2
 8004be6:	3334      	adds	r3, #52	; 0x34
 8004be8:	460a      	mov	r2, r1
 8004bea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004bec:	68ba      	ldr	r2, [r7, #8]
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	4413      	add	r3, r2
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d006      	beq.n	8004c06 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	61fb      	str	r3, [r7, #28]
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	2b0f      	cmp	r3, #15
 8004c02:	d9e9      	bls.n	8004bd8 <prvInitialiseNewTask+0x64>
 8004c04:	e000      	b.n	8004c08 <prvInitialiseNewTask+0x94>
			{
				break;
 8004c06:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c10:	e003      	b.n	8004c1a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c1c:	2b37      	cmp	r3, #55	; 0x37
 8004c1e:	d901      	bls.n	8004c24 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004c20:	2337      	movs	r3, #55	; 0x37
 8004c22:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c28:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c2e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c32:	2200      	movs	r2, #0
 8004c34:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c38:	3304      	adds	r3, #4
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f7ff f978 	bl	8003f30 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c42:	3318      	adds	r3, #24
 8004c44:	4618      	mov	r0, r3
 8004c46:	f7ff f973 	bl	8003f30 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c4e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c52:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c58:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c5e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c62:	2200      	movs	r2, #0
 8004c64:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c72:	3354      	adds	r3, #84	; 0x54
 8004c74:	2260      	movs	r2, #96	; 0x60
 8004c76:	2100      	movs	r1, #0
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f001 feb8 	bl	80069ee <memset>
 8004c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c80:	4a0c      	ldr	r2, [pc, #48]	; (8004cb4 <prvInitialiseNewTask+0x140>)
 8004c82:	659a      	str	r2, [r3, #88]	; 0x58
 8004c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c86:	4a0c      	ldr	r2, [pc, #48]	; (8004cb8 <prvInitialiseNewTask+0x144>)
 8004c88:	65da      	str	r2, [r3, #92]	; 0x5c
 8004c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c8c:	4a0b      	ldr	r2, [pc, #44]	; (8004cbc <prvInitialiseNewTask+0x148>)
 8004c8e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004c90:	683a      	ldr	r2, [r7, #0]
 8004c92:	68f9      	ldr	r1, [r7, #12]
 8004c94:	69b8      	ldr	r0, [r7, #24]
 8004c96:	f001 f941 	bl	8005f1c <pxPortInitialiseStack>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c9e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d002      	beq.n	8004cac <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004caa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004cac:	bf00      	nop
 8004cae:	3720      	adds	r7, #32
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}
 8004cb4:	08008630 	.word	0x08008630
 8004cb8:	08008650 	.word	0x08008650
 8004cbc:	08008610 	.word	0x08008610

08004cc0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b082      	sub	sp, #8
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004cc8:	f001 fa54 	bl	8006174 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004ccc:	4b2d      	ldr	r3, [pc, #180]	; (8004d84 <prvAddNewTaskToReadyList+0xc4>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	4a2c      	ldr	r2, [pc, #176]	; (8004d84 <prvAddNewTaskToReadyList+0xc4>)
 8004cd4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004cd6:	4b2c      	ldr	r3, [pc, #176]	; (8004d88 <prvAddNewTaskToReadyList+0xc8>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d109      	bne.n	8004cf2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004cde:	4a2a      	ldr	r2, [pc, #168]	; (8004d88 <prvAddNewTaskToReadyList+0xc8>)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004ce4:	4b27      	ldr	r3, [pc, #156]	; (8004d84 <prvAddNewTaskToReadyList+0xc4>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d110      	bne.n	8004d0e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004cec:	f000 fc26 	bl	800553c <prvInitialiseTaskLists>
 8004cf0:	e00d      	b.n	8004d0e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004cf2:	4b26      	ldr	r3, [pc, #152]	; (8004d8c <prvAddNewTaskToReadyList+0xcc>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d109      	bne.n	8004d0e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004cfa:	4b23      	ldr	r3, [pc, #140]	; (8004d88 <prvAddNewTaskToReadyList+0xc8>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d802      	bhi.n	8004d0e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004d08:	4a1f      	ldr	r2, [pc, #124]	; (8004d88 <prvAddNewTaskToReadyList+0xc8>)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004d0e:	4b20      	ldr	r3, [pc, #128]	; (8004d90 <prvAddNewTaskToReadyList+0xd0>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	3301      	adds	r3, #1
 8004d14:	4a1e      	ldr	r2, [pc, #120]	; (8004d90 <prvAddNewTaskToReadyList+0xd0>)
 8004d16:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004d18:	4b1d      	ldr	r3, [pc, #116]	; (8004d90 <prvAddNewTaskToReadyList+0xd0>)
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d24:	4b1b      	ldr	r3, [pc, #108]	; (8004d94 <prvAddNewTaskToReadyList+0xd4>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d903      	bls.n	8004d34 <prvAddNewTaskToReadyList+0x74>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d30:	4a18      	ldr	r2, [pc, #96]	; (8004d94 <prvAddNewTaskToReadyList+0xd4>)
 8004d32:	6013      	str	r3, [r2, #0]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d38:	4613      	mov	r3, r2
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	4413      	add	r3, r2
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	4a15      	ldr	r2, [pc, #84]	; (8004d98 <prvAddNewTaskToReadyList+0xd8>)
 8004d42:	441a      	add	r2, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	3304      	adds	r3, #4
 8004d48:	4619      	mov	r1, r3
 8004d4a:	4610      	mov	r0, r2
 8004d4c:	f7ff f8fd 	bl	8003f4a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004d50:	f001 fa40 	bl	80061d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004d54:	4b0d      	ldr	r3, [pc, #52]	; (8004d8c <prvAddNewTaskToReadyList+0xcc>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d00e      	beq.n	8004d7a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004d5c:	4b0a      	ldr	r3, [pc, #40]	; (8004d88 <prvAddNewTaskToReadyList+0xc8>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d207      	bcs.n	8004d7a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004d6a:	4b0c      	ldr	r3, [pc, #48]	; (8004d9c <prvAddNewTaskToReadyList+0xdc>)
 8004d6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d70:	601a      	str	r2, [r3, #0]
 8004d72:	f3bf 8f4f 	dsb	sy
 8004d76:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d7a:	bf00      	nop
 8004d7c:	3708      	adds	r7, #8
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	2000164c 	.word	0x2000164c
 8004d88:	20001178 	.word	0x20001178
 8004d8c:	20001658 	.word	0x20001658
 8004d90:	20001668 	.word	0x20001668
 8004d94:	20001654 	.word	0x20001654
 8004d98:	2000117c 	.word	0x2000117c
 8004d9c:	e000ed04 	.word	0xe000ed04

08004da0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004da8:	2300      	movs	r3, #0
 8004daa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d017      	beq.n	8004de2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004db2:	4b13      	ldr	r3, [pc, #76]	; (8004e00 <vTaskDelay+0x60>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d00a      	beq.n	8004dd0 <vTaskDelay+0x30>
	__asm volatile
 8004dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dbe:	f383 8811 	msr	BASEPRI, r3
 8004dc2:	f3bf 8f6f 	isb	sy
 8004dc6:	f3bf 8f4f 	dsb	sy
 8004dca:	60bb      	str	r3, [r7, #8]
}
 8004dcc:	bf00      	nop
 8004dce:	e7fe      	b.n	8004dce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004dd0:	f000 f88a 	bl	8004ee8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004dd4:	2100      	movs	r1, #0
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f000 fcfe 	bl	80057d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004ddc:	f000 f892 	bl	8004f04 <xTaskResumeAll>
 8004de0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d107      	bne.n	8004df8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004de8:	4b06      	ldr	r3, [pc, #24]	; (8004e04 <vTaskDelay+0x64>)
 8004dea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dee:	601a      	str	r2, [r3, #0]
 8004df0:	f3bf 8f4f 	dsb	sy
 8004df4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004df8:	bf00      	nop
 8004dfa:	3710      	adds	r7, #16
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	20001674 	.word	0x20001674
 8004e04:	e000ed04 	.word	0xe000ed04

08004e08 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b08a      	sub	sp, #40	; 0x28
 8004e0c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004e12:	2300      	movs	r3, #0
 8004e14:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004e16:	463a      	mov	r2, r7
 8004e18:	1d39      	adds	r1, r7, #4
 8004e1a:	f107 0308 	add.w	r3, r7, #8
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f7ff f832 	bl	8003e88 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004e24:	6839      	ldr	r1, [r7, #0]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	68ba      	ldr	r2, [r7, #8]
 8004e2a:	9202      	str	r2, [sp, #8]
 8004e2c:	9301      	str	r3, [sp, #4]
 8004e2e:	2300      	movs	r3, #0
 8004e30:	9300      	str	r3, [sp, #0]
 8004e32:	2300      	movs	r3, #0
 8004e34:	460a      	mov	r2, r1
 8004e36:	4924      	ldr	r1, [pc, #144]	; (8004ec8 <vTaskStartScheduler+0xc0>)
 8004e38:	4824      	ldr	r0, [pc, #144]	; (8004ecc <vTaskStartScheduler+0xc4>)
 8004e3a:	f7ff fdf9 	bl	8004a30 <xTaskCreateStatic>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	4a23      	ldr	r2, [pc, #140]	; (8004ed0 <vTaskStartScheduler+0xc8>)
 8004e42:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004e44:	4b22      	ldr	r3, [pc, #136]	; (8004ed0 <vTaskStartScheduler+0xc8>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d002      	beq.n	8004e52 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	617b      	str	r3, [r7, #20]
 8004e50:	e001      	b.n	8004e56 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004e52:	2300      	movs	r3, #0
 8004e54:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d102      	bne.n	8004e62 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004e5c:	f000 fd10 	bl	8005880 <xTimerCreateTimerTask>
 8004e60:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d11b      	bne.n	8004ea0 <vTaskStartScheduler+0x98>
	__asm volatile
 8004e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e6c:	f383 8811 	msr	BASEPRI, r3
 8004e70:	f3bf 8f6f 	isb	sy
 8004e74:	f3bf 8f4f 	dsb	sy
 8004e78:	613b      	str	r3, [r7, #16]
}
 8004e7a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004e7c:	4b15      	ldr	r3, [pc, #84]	; (8004ed4 <vTaskStartScheduler+0xcc>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	3354      	adds	r3, #84	; 0x54
 8004e82:	4a15      	ldr	r2, [pc, #84]	; (8004ed8 <vTaskStartScheduler+0xd0>)
 8004e84:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004e86:	4b15      	ldr	r3, [pc, #84]	; (8004edc <vTaskStartScheduler+0xd4>)
 8004e88:	f04f 32ff 	mov.w	r2, #4294967295
 8004e8c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004e8e:	4b14      	ldr	r3, [pc, #80]	; (8004ee0 <vTaskStartScheduler+0xd8>)
 8004e90:	2201      	movs	r2, #1
 8004e92:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004e94:	4b13      	ldr	r3, [pc, #76]	; (8004ee4 <vTaskStartScheduler+0xdc>)
 8004e96:	2200      	movs	r2, #0
 8004e98:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004e9a:	f001 f8c9 	bl	8006030 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004e9e:	e00e      	b.n	8004ebe <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ea6:	d10a      	bne.n	8004ebe <vTaskStartScheduler+0xb6>
	__asm volatile
 8004ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eac:	f383 8811 	msr	BASEPRI, r3
 8004eb0:	f3bf 8f6f 	isb	sy
 8004eb4:	f3bf 8f4f 	dsb	sy
 8004eb8:	60fb      	str	r3, [r7, #12]
}
 8004eba:	bf00      	nop
 8004ebc:	e7fe      	b.n	8004ebc <vTaskStartScheduler+0xb4>
}
 8004ebe:	bf00      	nop
 8004ec0:	3718      	adds	r7, #24
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	08007e2c 	.word	0x08007e2c
 8004ecc:	0800550d 	.word	0x0800550d
 8004ed0:	20001670 	.word	0x20001670
 8004ed4:	20001178 	.word	0x20001178
 8004ed8:	20000018 	.word	0x20000018
 8004edc:	2000166c 	.word	0x2000166c
 8004ee0:	20001658 	.word	0x20001658
 8004ee4:	20001650 	.word	0x20001650

08004ee8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004ee8:	b480      	push	{r7}
 8004eea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004eec:	4b04      	ldr	r3, [pc, #16]	; (8004f00 <vTaskSuspendAll+0x18>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	3301      	adds	r3, #1
 8004ef2:	4a03      	ldr	r2, [pc, #12]	; (8004f00 <vTaskSuspendAll+0x18>)
 8004ef4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004ef6:	bf00      	nop
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr
 8004f00:	20001674 	.word	0x20001674

08004f04 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004f12:	4b42      	ldr	r3, [pc, #264]	; (800501c <xTaskResumeAll+0x118>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d10a      	bne.n	8004f30 <xTaskResumeAll+0x2c>
	__asm volatile
 8004f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f1e:	f383 8811 	msr	BASEPRI, r3
 8004f22:	f3bf 8f6f 	isb	sy
 8004f26:	f3bf 8f4f 	dsb	sy
 8004f2a:	603b      	str	r3, [r7, #0]
}
 8004f2c:	bf00      	nop
 8004f2e:	e7fe      	b.n	8004f2e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004f30:	f001 f920 	bl	8006174 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004f34:	4b39      	ldr	r3, [pc, #228]	; (800501c <xTaskResumeAll+0x118>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	3b01      	subs	r3, #1
 8004f3a:	4a38      	ldr	r2, [pc, #224]	; (800501c <xTaskResumeAll+0x118>)
 8004f3c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f3e:	4b37      	ldr	r3, [pc, #220]	; (800501c <xTaskResumeAll+0x118>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d162      	bne.n	800500c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004f46:	4b36      	ldr	r3, [pc, #216]	; (8005020 <xTaskResumeAll+0x11c>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d05e      	beq.n	800500c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f4e:	e02f      	b.n	8004fb0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f50:	4b34      	ldr	r3, [pc, #208]	; (8005024 <xTaskResumeAll+0x120>)
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	3318      	adds	r3, #24
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f7ff f851 	bl	8004004 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	3304      	adds	r3, #4
 8004f66:	4618      	mov	r0, r3
 8004f68:	f7ff f84c 	bl	8004004 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f70:	4b2d      	ldr	r3, [pc, #180]	; (8005028 <xTaskResumeAll+0x124>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d903      	bls.n	8004f80 <xTaskResumeAll+0x7c>
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f7c:	4a2a      	ldr	r2, [pc, #168]	; (8005028 <xTaskResumeAll+0x124>)
 8004f7e:	6013      	str	r3, [r2, #0]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f84:	4613      	mov	r3, r2
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	4413      	add	r3, r2
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	4a27      	ldr	r2, [pc, #156]	; (800502c <xTaskResumeAll+0x128>)
 8004f8e:	441a      	add	r2, r3
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	3304      	adds	r3, #4
 8004f94:	4619      	mov	r1, r3
 8004f96:	4610      	mov	r0, r2
 8004f98:	f7fe ffd7 	bl	8003f4a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fa0:	4b23      	ldr	r3, [pc, #140]	; (8005030 <xTaskResumeAll+0x12c>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d302      	bcc.n	8004fb0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004faa:	4b22      	ldr	r3, [pc, #136]	; (8005034 <xTaskResumeAll+0x130>)
 8004fac:	2201      	movs	r2, #1
 8004fae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004fb0:	4b1c      	ldr	r3, [pc, #112]	; (8005024 <xTaskResumeAll+0x120>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d1cb      	bne.n	8004f50 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d001      	beq.n	8004fc2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004fbe:	f000 fb5f 	bl	8005680 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004fc2:	4b1d      	ldr	r3, [pc, #116]	; (8005038 <xTaskResumeAll+0x134>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d010      	beq.n	8004ff0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004fce:	f000 f847 	bl	8005060 <xTaskIncrementTick>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d002      	beq.n	8004fde <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004fd8:	4b16      	ldr	r3, [pc, #88]	; (8005034 <xTaskResumeAll+0x130>)
 8004fda:	2201      	movs	r2, #1
 8004fdc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	3b01      	subs	r3, #1
 8004fe2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d1f1      	bne.n	8004fce <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004fea:	4b13      	ldr	r3, [pc, #76]	; (8005038 <xTaskResumeAll+0x134>)
 8004fec:	2200      	movs	r2, #0
 8004fee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004ff0:	4b10      	ldr	r3, [pc, #64]	; (8005034 <xTaskResumeAll+0x130>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d009      	beq.n	800500c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004ffc:	4b0f      	ldr	r3, [pc, #60]	; (800503c <xTaskResumeAll+0x138>)
 8004ffe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005002:	601a      	str	r2, [r3, #0]
 8005004:	f3bf 8f4f 	dsb	sy
 8005008:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800500c:	f001 f8e2 	bl	80061d4 <vPortExitCritical>

	return xAlreadyYielded;
 8005010:	68bb      	ldr	r3, [r7, #8]
}
 8005012:	4618      	mov	r0, r3
 8005014:	3710      	adds	r7, #16
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop
 800501c:	20001674 	.word	0x20001674
 8005020:	2000164c 	.word	0x2000164c
 8005024:	2000160c 	.word	0x2000160c
 8005028:	20001654 	.word	0x20001654
 800502c:	2000117c 	.word	0x2000117c
 8005030:	20001178 	.word	0x20001178
 8005034:	20001660 	.word	0x20001660
 8005038:	2000165c 	.word	0x2000165c
 800503c:	e000ed04 	.word	0xe000ed04

08005040 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005040:	b480      	push	{r7}
 8005042:	b083      	sub	sp, #12
 8005044:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005046:	4b05      	ldr	r3, [pc, #20]	; (800505c <xTaskGetTickCount+0x1c>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800504c:	687b      	ldr	r3, [r7, #4]
}
 800504e:	4618      	mov	r0, r3
 8005050:	370c      	adds	r7, #12
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr
 800505a:	bf00      	nop
 800505c:	20001650 	.word	0x20001650

08005060 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b086      	sub	sp, #24
 8005064:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005066:	2300      	movs	r3, #0
 8005068:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800506a:	4b4f      	ldr	r3, [pc, #316]	; (80051a8 <xTaskIncrementTick+0x148>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2b00      	cmp	r3, #0
 8005070:	f040 808f 	bne.w	8005192 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005074:	4b4d      	ldr	r3, [pc, #308]	; (80051ac <xTaskIncrementTick+0x14c>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	3301      	adds	r3, #1
 800507a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800507c:	4a4b      	ldr	r2, [pc, #300]	; (80051ac <xTaskIncrementTick+0x14c>)
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d120      	bne.n	80050ca <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005088:	4b49      	ldr	r3, [pc, #292]	; (80051b0 <xTaskIncrementTick+0x150>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d00a      	beq.n	80050a8 <xTaskIncrementTick+0x48>
	__asm volatile
 8005092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005096:	f383 8811 	msr	BASEPRI, r3
 800509a:	f3bf 8f6f 	isb	sy
 800509e:	f3bf 8f4f 	dsb	sy
 80050a2:	603b      	str	r3, [r7, #0]
}
 80050a4:	bf00      	nop
 80050a6:	e7fe      	b.n	80050a6 <xTaskIncrementTick+0x46>
 80050a8:	4b41      	ldr	r3, [pc, #260]	; (80051b0 <xTaskIncrementTick+0x150>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	60fb      	str	r3, [r7, #12]
 80050ae:	4b41      	ldr	r3, [pc, #260]	; (80051b4 <xTaskIncrementTick+0x154>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a3f      	ldr	r2, [pc, #252]	; (80051b0 <xTaskIncrementTick+0x150>)
 80050b4:	6013      	str	r3, [r2, #0]
 80050b6:	4a3f      	ldr	r2, [pc, #252]	; (80051b4 <xTaskIncrementTick+0x154>)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6013      	str	r3, [r2, #0]
 80050bc:	4b3e      	ldr	r3, [pc, #248]	; (80051b8 <xTaskIncrementTick+0x158>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	3301      	adds	r3, #1
 80050c2:	4a3d      	ldr	r2, [pc, #244]	; (80051b8 <xTaskIncrementTick+0x158>)
 80050c4:	6013      	str	r3, [r2, #0]
 80050c6:	f000 fadb 	bl	8005680 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80050ca:	4b3c      	ldr	r3, [pc, #240]	; (80051bc <xTaskIncrementTick+0x15c>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	693a      	ldr	r2, [r7, #16]
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d349      	bcc.n	8005168 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80050d4:	4b36      	ldr	r3, [pc, #216]	; (80051b0 <xTaskIncrementTick+0x150>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d104      	bne.n	80050e8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050de:	4b37      	ldr	r3, [pc, #220]	; (80051bc <xTaskIncrementTick+0x15c>)
 80050e0:	f04f 32ff 	mov.w	r2, #4294967295
 80050e4:	601a      	str	r2, [r3, #0]
					break;
 80050e6:	e03f      	b.n	8005168 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050e8:	4b31      	ldr	r3, [pc, #196]	; (80051b0 <xTaskIncrementTick+0x150>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	68db      	ldr	r3, [r3, #12]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80050f8:	693a      	ldr	r2, [r7, #16]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d203      	bcs.n	8005108 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005100:	4a2e      	ldr	r2, [pc, #184]	; (80051bc <xTaskIncrementTick+0x15c>)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005106:	e02f      	b.n	8005168 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	3304      	adds	r3, #4
 800510c:	4618      	mov	r0, r3
 800510e:	f7fe ff79 	bl	8004004 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005116:	2b00      	cmp	r3, #0
 8005118:	d004      	beq.n	8005124 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	3318      	adds	r3, #24
 800511e:	4618      	mov	r0, r3
 8005120:	f7fe ff70 	bl	8004004 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005128:	4b25      	ldr	r3, [pc, #148]	; (80051c0 <xTaskIncrementTick+0x160>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	429a      	cmp	r2, r3
 800512e:	d903      	bls.n	8005138 <xTaskIncrementTick+0xd8>
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005134:	4a22      	ldr	r2, [pc, #136]	; (80051c0 <xTaskIncrementTick+0x160>)
 8005136:	6013      	str	r3, [r2, #0]
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800513c:	4613      	mov	r3, r2
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	4413      	add	r3, r2
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	4a1f      	ldr	r2, [pc, #124]	; (80051c4 <xTaskIncrementTick+0x164>)
 8005146:	441a      	add	r2, r3
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	3304      	adds	r3, #4
 800514c:	4619      	mov	r1, r3
 800514e:	4610      	mov	r0, r2
 8005150:	f7fe fefb 	bl	8003f4a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005158:	4b1b      	ldr	r3, [pc, #108]	; (80051c8 <xTaskIncrementTick+0x168>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800515e:	429a      	cmp	r2, r3
 8005160:	d3b8      	bcc.n	80050d4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005162:	2301      	movs	r3, #1
 8005164:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005166:	e7b5      	b.n	80050d4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005168:	4b17      	ldr	r3, [pc, #92]	; (80051c8 <xTaskIncrementTick+0x168>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800516e:	4915      	ldr	r1, [pc, #84]	; (80051c4 <xTaskIncrementTick+0x164>)
 8005170:	4613      	mov	r3, r2
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	4413      	add	r3, r2
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	440b      	add	r3, r1
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	2b01      	cmp	r3, #1
 800517e:	d901      	bls.n	8005184 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005180:	2301      	movs	r3, #1
 8005182:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005184:	4b11      	ldr	r3, [pc, #68]	; (80051cc <xTaskIncrementTick+0x16c>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d007      	beq.n	800519c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800518c:	2301      	movs	r3, #1
 800518e:	617b      	str	r3, [r7, #20]
 8005190:	e004      	b.n	800519c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005192:	4b0f      	ldr	r3, [pc, #60]	; (80051d0 <xTaskIncrementTick+0x170>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	3301      	adds	r3, #1
 8005198:	4a0d      	ldr	r2, [pc, #52]	; (80051d0 <xTaskIncrementTick+0x170>)
 800519a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800519c:	697b      	ldr	r3, [r7, #20]
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3718      	adds	r7, #24
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop
 80051a8:	20001674 	.word	0x20001674
 80051ac:	20001650 	.word	0x20001650
 80051b0:	20001604 	.word	0x20001604
 80051b4:	20001608 	.word	0x20001608
 80051b8:	20001664 	.word	0x20001664
 80051bc:	2000166c 	.word	0x2000166c
 80051c0:	20001654 	.word	0x20001654
 80051c4:	2000117c 	.word	0x2000117c
 80051c8:	20001178 	.word	0x20001178
 80051cc:	20001660 	.word	0x20001660
 80051d0:	2000165c 	.word	0x2000165c

080051d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80051d4:	b480      	push	{r7}
 80051d6:	b085      	sub	sp, #20
 80051d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80051da:	4b2a      	ldr	r3, [pc, #168]	; (8005284 <vTaskSwitchContext+0xb0>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d003      	beq.n	80051ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80051e2:	4b29      	ldr	r3, [pc, #164]	; (8005288 <vTaskSwitchContext+0xb4>)
 80051e4:	2201      	movs	r2, #1
 80051e6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80051e8:	e046      	b.n	8005278 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80051ea:	4b27      	ldr	r3, [pc, #156]	; (8005288 <vTaskSwitchContext+0xb4>)
 80051ec:	2200      	movs	r2, #0
 80051ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051f0:	4b26      	ldr	r3, [pc, #152]	; (800528c <vTaskSwitchContext+0xb8>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	60fb      	str	r3, [r7, #12]
 80051f6:	e010      	b.n	800521a <vTaskSwitchContext+0x46>
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d10a      	bne.n	8005214 <vTaskSwitchContext+0x40>
	__asm volatile
 80051fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005202:	f383 8811 	msr	BASEPRI, r3
 8005206:	f3bf 8f6f 	isb	sy
 800520a:	f3bf 8f4f 	dsb	sy
 800520e:	607b      	str	r3, [r7, #4]
}
 8005210:	bf00      	nop
 8005212:	e7fe      	b.n	8005212 <vTaskSwitchContext+0x3e>
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	3b01      	subs	r3, #1
 8005218:	60fb      	str	r3, [r7, #12]
 800521a:	491d      	ldr	r1, [pc, #116]	; (8005290 <vTaskSwitchContext+0xbc>)
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	4613      	mov	r3, r2
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	4413      	add	r3, r2
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	440b      	add	r3, r1
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d0e4      	beq.n	80051f8 <vTaskSwitchContext+0x24>
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	4613      	mov	r3, r2
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	4413      	add	r3, r2
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	4a15      	ldr	r2, [pc, #84]	; (8005290 <vTaskSwitchContext+0xbc>)
 800523a:	4413      	add	r3, r2
 800523c:	60bb      	str	r3, [r7, #8]
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	685a      	ldr	r2, [r3, #4]
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	605a      	str	r2, [r3, #4]
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	685a      	ldr	r2, [r3, #4]
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	3308      	adds	r3, #8
 8005250:	429a      	cmp	r2, r3
 8005252:	d104      	bne.n	800525e <vTaskSwitchContext+0x8a>
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	685a      	ldr	r2, [r3, #4]
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	605a      	str	r2, [r3, #4]
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	4a0b      	ldr	r2, [pc, #44]	; (8005294 <vTaskSwitchContext+0xc0>)
 8005266:	6013      	str	r3, [r2, #0]
 8005268:	4a08      	ldr	r2, [pc, #32]	; (800528c <vTaskSwitchContext+0xb8>)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800526e:	4b09      	ldr	r3, [pc, #36]	; (8005294 <vTaskSwitchContext+0xc0>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	3354      	adds	r3, #84	; 0x54
 8005274:	4a08      	ldr	r2, [pc, #32]	; (8005298 <vTaskSwitchContext+0xc4>)
 8005276:	6013      	str	r3, [r2, #0]
}
 8005278:	bf00      	nop
 800527a:	3714      	adds	r7, #20
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr
 8005284:	20001674 	.word	0x20001674
 8005288:	20001660 	.word	0x20001660
 800528c:	20001654 	.word	0x20001654
 8005290:	2000117c 	.word	0x2000117c
 8005294:	20001178 	.word	0x20001178
 8005298:	20000018 	.word	0x20000018

0800529c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d10a      	bne.n	80052c2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80052ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b0:	f383 8811 	msr	BASEPRI, r3
 80052b4:	f3bf 8f6f 	isb	sy
 80052b8:	f3bf 8f4f 	dsb	sy
 80052bc:	60fb      	str	r3, [r7, #12]
}
 80052be:	bf00      	nop
 80052c0:	e7fe      	b.n	80052c0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80052c2:	4b07      	ldr	r3, [pc, #28]	; (80052e0 <vTaskPlaceOnEventList+0x44>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	3318      	adds	r3, #24
 80052c8:	4619      	mov	r1, r3
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f7fe fe61 	bl	8003f92 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80052d0:	2101      	movs	r1, #1
 80052d2:	6838      	ldr	r0, [r7, #0]
 80052d4:	f000 fa80 	bl	80057d8 <prvAddCurrentTaskToDelayedList>
}
 80052d8:	bf00      	nop
 80052da:	3710      	adds	r7, #16
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}
 80052e0:	20001178 	.word	0x20001178

080052e4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b086      	sub	sp, #24
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d10a      	bne.n	800530c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80052f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052fa:	f383 8811 	msr	BASEPRI, r3
 80052fe:	f3bf 8f6f 	isb	sy
 8005302:	f3bf 8f4f 	dsb	sy
 8005306:	617b      	str	r3, [r7, #20]
}
 8005308:	bf00      	nop
 800530a:	e7fe      	b.n	800530a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800530c:	4b0a      	ldr	r3, [pc, #40]	; (8005338 <vTaskPlaceOnEventListRestricted+0x54>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	3318      	adds	r3, #24
 8005312:	4619      	mov	r1, r3
 8005314:	68f8      	ldr	r0, [r7, #12]
 8005316:	f7fe fe18 	bl	8003f4a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d002      	beq.n	8005326 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005320:	f04f 33ff 	mov.w	r3, #4294967295
 8005324:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005326:	6879      	ldr	r1, [r7, #4]
 8005328:	68b8      	ldr	r0, [r7, #8]
 800532a:	f000 fa55 	bl	80057d8 <prvAddCurrentTaskToDelayedList>
	}
 800532e:	bf00      	nop
 8005330:	3718      	adds	r7, #24
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	20001178 	.word	0x20001178

0800533c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b086      	sub	sp, #24
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d10a      	bne.n	8005368 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005356:	f383 8811 	msr	BASEPRI, r3
 800535a:	f3bf 8f6f 	isb	sy
 800535e:	f3bf 8f4f 	dsb	sy
 8005362:	60fb      	str	r3, [r7, #12]
}
 8005364:	bf00      	nop
 8005366:	e7fe      	b.n	8005366 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	3318      	adds	r3, #24
 800536c:	4618      	mov	r0, r3
 800536e:	f7fe fe49 	bl	8004004 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005372:	4b1e      	ldr	r3, [pc, #120]	; (80053ec <xTaskRemoveFromEventList+0xb0>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d11d      	bne.n	80053b6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	3304      	adds	r3, #4
 800537e:	4618      	mov	r0, r3
 8005380:	f7fe fe40 	bl	8004004 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005388:	4b19      	ldr	r3, [pc, #100]	; (80053f0 <xTaskRemoveFromEventList+0xb4>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	429a      	cmp	r2, r3
 800538e:	d903      	bls.n	8005398 <xTaskRemoveFromEventList+0x5c>
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005394:	4a16      	ldr	r2, [pc, #88]	; (80053f0 <xTaskRemoveFromEventList+0xb4>)
 8005396:	6013      	str	r3, [r2, #0]
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800539c:	4613      	mov	r3, r2
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	4413      	add	r3, r2
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	4a13      	ldr	r2, [pc, #76]	; (80053f4 <xTaskRemoveFromEventList+0xb8>)
 80053a6:	441a      	add	r2, r3
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	3304      	adds	r3, #4
 80053ac:	4619      	mov	r1, r3
 80053ae:	4610      	mov	r0, r2
 80053b0:	f7fe fdcb 	bl	8003f4a <vListInsertEnd>
 80053b4:	e005      	b.n	80053c2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	3318      	adds	r3, #24
 80053ba:	4619      	mov	r1, r3
 80053bc:	480e      	ldr	r0, [pc, #56]	; (80053f8 <xTaskRemoveFromEventList+0xbc>)
 80053be:	f7fe fdc4 	bl	8003f4a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053c6:	4b0d      	ldr	r3, [pc, #52]	; (80053fc <xTaskRemoveFromEventList+0xc0>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d905      	bls.n	80053dc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80053d0:	2301      	movs	r3, #1
 80053d2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80053d4:	4b0a      	ldr	r3, [pc, #40]	; (8005400 <xTaskRemoveFromEventList+0xc4>)
 80053d6:	2201      	movs	r2, #1
 80053d8:	601a      	str	r2, [r3, #0]
 80053da:	e001      	b.n	80053e0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80053dc:	2300      	movs	r3, #0
 80053de:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80053e0:	697b      	ldr	r3, [r7, #20]
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3718      	adds	r7, #24
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	bf00      	nop
 80053ec:	20001674 	.word	0x20001674
 80053f0:	20001654 	.word	0x20001654
 80053f4:	2000117c 	.word	0x2000117c
 80053f8:	2000160c 	.word	0x2000160c
 80053fc:	20001178 	.word	0x20001178
 8005400:	20001660 	.word	0x20001660

08005404 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800540c:	4b06      	ldr	r3, [pc, #24]	; (8005428 <vTaskInternalSetTimeOutState+0x24>)
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005414:	4b05      	ldr	r3, [pc, #20]	; (800542c <vTaskInternalSetTimeOutState+0x28>)
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	605a      	str	r2, [r3, #4]
}
 800541c:	bf00      	nop
 800541e:	370c      	adds	r7, #12
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr
 8005428:	20001664 	.word	0x20001664
 800542c:	20001650 	.word	0x20001650

08005430 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b088      	sub	sp, #32
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d10a      	bne.n	8005456 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005444:	f383 8811 	msr	BASEPRI, r3
 8005448:	f3bf 8f6f 	isb	sy
 800544c:	f3bf 8f4f 	dsb	sy
 8005450:	613b      	str	r3, [r7, #16]
}
 8005452:	bf00      	nop
 8005454:	e7fe      	b.n	8005454 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d10a      	bne.n	8005472 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800545c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005460:	f383 8811 	msr	BASEPRI, r3
 8005464:	f3bf 8f6f 	isb	sy
 8005468:	f3bf 8f4f 	dsb	sy
 800546c:	60fb      	str	r3, [r7, #12]
}
 800546e:	bf00      	nop
 8005470:	e7fe      	b.n	8005470 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005472:	f000 fe7f 	bl	8006174 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005476:	4b1d      	ldr	r3, [pc, #116]	; (80054ec <xTaskCheckForTimeOut+0xbc>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	69ba      	ldr	r2, [r7, #24]
 8005482:	1ad3      	subs	r3, r2, r3
 8005484:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800548e:	d102      	bne.n	8005496 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005490:	2300      	movs	r3, #0
 8005492:	61fb      	str	r3, [r7, #28]
 8005494:	e023      	b.n	80054de <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	4b15      	ldr	r3, [pc, #84]	; (80054f0 <xTaskCheckForTimeOut+0xc0>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	429a      	cmp	r2, r3
 80054a0:	d007      	beq.n	80054b2 <xTaskCheckForTimeOut+0x82>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	69ba      	ldr	r2, [r7, #24]
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d302      	bcc.n	80054b2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80054ac:	2301      	movs	r3, #1
 80054ae:	61fb      	str	r3, [r7, #28]
 80054b0:	e015      	b.n	80054de <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	697a      	ldr	r2, [r7, #20]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d20b      	bcs.n	80054d4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	1ad2      	subs	r2, r2, r3
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f7ff ff9b 	bl	8005404 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80054ce:	2300      	movs	r3, #0
 80054d0:	61fb      	str	r3, [r7, #28]
 80054d2:	e004      	b.n	80054de <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	2200      	movs	r2, #0
 80054d8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80054da:	2301      	movs	r3, #1
 80054dc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80054de:	f000 fe79 	bl	80061d4 <vPortExitCritical>

	return xReturn;
 80054e2:	69fb      	ldr	r3, [r7, #28]
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3720      	adds	r7, #32
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	20001650 	.word	0x20001650
 80054f0:	20001664 	.word	0x20001664

080054f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80054f4:	b480      	push	{r7}
 80054f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80054f8:	4b03      	ldr	r3, [pc, #12]	; (8005508 <vTaskMissedYield+0x14>)
 80054fa:	2201      	movs	r2, #1
 80054fc:	601a      	str	r2, [r3, #0]
}
 80054fe:	bf00      	nop
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr
 8005508:	20001660 	.word	0x20001660

0800550c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b082      	sub	sp, #8
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005514:	f000 f852 	bl	80055bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005518:	4b06      	ldr	r3, [pc, #24]	; (8005534 <prvIdleTask+0x28>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	2b01      	cmp	r3, #1
 800551e:	d9f9      	bls.n	8005514 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005520:	4b05      	ldr	r3, [pc, #20]	; (8005538 <prvIdleTask+0x2c>)
 8005522:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005526:	601a      	str	r2, [r3, #0]
 8005528:	f3bf 8f4f 	dsb	sy
 800552c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005530:	e7f0      	b.n	8005514 <prvIdleTask+0x8>
 8005532:	bf00      	nop
 8005534:	2000117c 	.word	0x2000117c
 8005538:	e000ed04 	.word	0xe000ed04

0800553c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b082      	sub	sp, #8
 8005540:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005542:	2300      	movs	r3, #0
 8005544:	607b      	str	r3, [r7, #4]
 8005546:	e00c      	b.n	8005562 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	4613      	mov	r3, r2
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	4413      	add	r3, r2
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	4a12      	ldr	r2, [pc, #72]	; (800559c <prvInitialiseTaskLists+0x60>)
 8005554:	4413      	add	r3, r2
 8005556:	4618      	mov	r0, r3
 8005558:	f7fe fcca 	bl	8003ef0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	3301      	adds	r3, #1
 8005560:	607b      	str	r3, [r7, #4]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2b37      	cmp	r3, #55	; 0x37
 8005566:	d9ef      	bls.n	8005548 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005568:	480d      	ldr	r0, [pc, #52]	; (80055a0 <prvInitialiseTaskLists+0x64>)
 800556a:	f7fe fcc1 	bl	8003ef0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800556e:	480d      	ldr	r0, [pc, #52]	; (80055a4 <prvInitialiseTaskLists+0x68>)
 8005570:	f7fe fcbe 	bl	8003ef0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005574:	480c      	ldr	r0, [pc, #48]	; (80055a8 <prvInitialiseTaskLists+0x6c>)
 8005576:	f7fe fcbb 	bl	8003ef0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800557a:	480c      	ldr	r0, [pc, #48]	; (80055ac <prvInitialiseTaskLists+0x70>)
 800557c:	f7fe fcb8 	bl	8003ef0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005580:	480b      	ldr	r0, [pc, #44]	; (80055b0 <prvInitialiseTaskLists+0x74>)
 8005582:	f7fe fcb5 	bl	8003ef0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005586:	4b0b      	ldr	r3, [pc, #44]	; (80055b4 <prvInitialiseTaskLists+0x78>)
 8005588:	4a05      	ldr	r2, [pc, #20]	; (80055a0 <prvInitialiseTaskLists+0x64>)
 800558a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800558c:	4b0a      	ldr	r3, [pc, #40]	; (80055b8 <prvInitialiseTaskLists+0x7c>)
 800558e:	4a05      	ldr	r2, [pc, #20]	; (80055a4 <prvInitialiseTaskLists+0x68>)
 8005590:	601a      	str	r2, [r3, #0]
}
 8005592:	bf00      	nop
 8005594:	3708      	adds	r7, #8
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}
 800559a:	bf00      	nop
 800559c:	2000117c 	.word	0x2000117c
 80055a0:	200015dc 	.word	0x200015dc
 80055a4:	200015f0 	.word	0x200015f0
 80055a8:	2000160c 	.word	0x2000160c
 80055ac:	20001620 	.word	0x20001620
 80055b0:	20001638 	.word	0x20001638
 80055b4:	20001604 	.word	0x20001604
 80055b8:	20001608 	.word	0x20001608

080055bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b082      	sub	sp, #8
 80055c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80055c2:	e019      	b.n	80055f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80055c4:	f000 fdd6 	bl	8006174 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055c8:	4b10      	ldr	r3, [pc, #64]	; (800560c <prvCheckTasksWaitingTermination+0x50>)
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	3304      	adds	r3, #4
 80055d4:	4618      	mov	r0, r3
 80055d6:	f7fe fd15 	bl	8004004 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80055da:	4b0d      	ldr	r3, [pc, #52]	; (8005610 <prvCheckTasksWaitingTermination+0x54>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	3b01      	subs	r3, #1
 80055e0:	4a0b      	ldr	r2, [pc, #44]	; (8005610 <prvCheckTasksWaitingTermination+0x54>)
 80055e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80055e4:	4b0b      	ldr	r3, [pc, #44]	; (8005614 <prvCheckTasksWaitingTermination+0x58>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	3b01      	subs	r3, #1
 80055ea:	4a0a      	ldr	r2, [pc, #40]	; (8005614 <prvCheckTasksWaitingTermination+0x58>)
 80055ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80055ee:	f000 fdf1 	bl	80061d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f000 f810 	bl	8005618 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80055f8:	4b06      	ldr	r3, [pc, #24]	; (8005614 <prvCheckTasksWaitingTermination+0x58>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d1e1      	bne.n	80055c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005600:	bf00      	nop
 8005602:	bf00      	nop
 8005604:	3708      	adds	r7, #8
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
 800560a:	bf00      	nop
 800560c:	20001620 	.word	0x20001620
 8005610:	2000164c 	.word	0x2000164c
 8005614:	20001634 	.word	0x20001634

08005618 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005618:	b580      	push	{r7, lr}
 800561a:	b084      	sub	sp, #16
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	3354      	adds	r3, #84	; 0x54
 8005624:	4618      	mov	r0, r3
 8005626:	f001 fb1b 	bl	8006c60 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005630:	2b00      	cmp	r3, #0
 8005632:	d108      	bne.n	8005646 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005638:	4618      	mov	r0, r3
 800563a:	f000 ff89 	bl	8006550 <vPortFree>
				vPortFree( pxTCB );
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 ff86 	bl	8006550 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005644:	e018      	b.n	8005678 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800564c:	2b01      	cmp	r3, #1
 800564e:	d103      	bne.n	8005658 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f000 ff7d 	bl	8006550 <vPortFree>
	}
 8005656:	e00f      	b.n	8005678 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800565e:	2b02      	cmp	r3, #2
 8005660:	d00a      	beq.n	8005678 <prvDeleteTCB+0x60>
	__asm volatile
 8005662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005666:	f383 8811 	msr	BASEPRI, r3
 800566a:	f3bf 8f6f 	isb	sy
 800566e:	f3bf 8f4f 	dsb	sy
 8005672:	60fb      	str	r3, [r7, #12]
}
 8005674:	bf00      	nop
 8005676:	e7fe      	b.n	8005676 <prvDeleteTCB+0x5e>
	}
 8005678:	bf00      	nop
 800567a:	3710      	adds	r7, #16
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}

08005680 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005680:	b480      	push	{r7}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005686:	4b0c      	ldr	r3, [pc, #48]	; (80056b8 <prvResetNextTaskUnblockTime+0x38>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d104      	bne.n	800569a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005690:	4b0a      	ldr	r3, [pc, #40]	; (80056bc <prvResetNextTaskUnblockTime+0x3c>)
 8005692:	f04f 32ff 	mov.w	r2, #4294967295
 8005696:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005698:	e008      	b.n	80056ac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800569a:	4b07      	ldr	r3, [pc, #28]	; (80056b8 <prvResetNextTaskUnblockTime+0x38>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	4a04      	ldr	r2, [pc, #16]	; (80056bc <prvResetNextTaskUnblockTime+0x3c>)
 80056aa:	6013      	str	r3, [r2, #0]
}
 80056ac:	bf00      	nop
 80056ae:	370c      	adds	r7, #12
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr
 80056b8:	20001604 	.word	0x20001604
 80056bc:	2000166c 	.word	0x2000166c

080056c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80056c0:	b480      	push	{r7}
 80056c2:	b083      	sub	sp, #12
 80056c4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80056c6:	4b0b      	ldr	r3, [pc, #44]	; (80056f4 <xTaskGetSchedulerState+0x34>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d102      	bne.n	80056d4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80056ce:	2301      	movs	r3, #1
 80056d0:	607b      	str	r3, [r7, #4]
 80056d2:	e008      	b.n	80056e6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056d4:	4b08      	ldr	r3, [pc, #32]	; (80056f8 <xTaskGetSchedulerState+0x38>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d102      	bne.n	80056e2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80056dc:	2302      	movs	r3, #2
 80056de:	607b      	str	r3, [r7, #4]
 80056e0:	e001      	b.n	80056e6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80056e2:	2300      	movs	r3, #0
 80056e4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80056e6:	687b      	ldr	r3, [r7, #4]
	}
 80056e8:	4618      	mov	r0, r3
 80056ea:	370c      	adds	r7, #12
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr
 80056f4:	20001658 	.word	0x20001658
 80056f8:	20001674 	.word	0x20001674

080056fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b086      	sub	sp, #24
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005708:	2300      	movs	r3, #0
 800570a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d056      	beq.n	80057c0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005712:	4b2e      	ldr	r3, [pc, #184]	; (80057cc <xTaskPriorityDisinherit+0xd0>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	693a      	ldr	r2, [r7, #16]
 8005718:	429a      	cmp	r2, r3
 800571a:	d00a      	beq.n	8005732 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800571c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005720:	f383 8811 	msr	BASEPRI, r3
 8005724:	f3bf 8f6f 	isb	sy
 8005728:	f3bf 8f4f 	dsb	sy
 800572c:	60fb      	str	r3, [r7, #12]
}
 800572e:	bf00      	nop
 8005730:	e7fe      	b.n	8005730 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005736:	2b00      	cmp	r3, #0
 8005738:	d10a      	bne.n	8005750 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800573a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800573e:	f383 8811 	msr	BASEPRI, r3
 8005742:	f3bf 8f6f 	isb	sy
 8005746:	f3bf 8f4f 	dsb	sy
 800574a:	60bb      	str	r3, [r7, #8]
}
 800574c:	bf00      	nop
 800574e:	e7fe      	b.n	800574e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005754:	1e5a      	subs	r2, r3, #1
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005762:	429a      	cmp	r2, r3
 8005764:	d02c      	beq.n	80057c0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800576a:	2b00      	cmp	r3, #0
 800576c:	d128      	bne.n	80057c0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	3304      	adds	r3, #4
 8005772:	4618      	mov	r0, r3
 8005774:	f7fe fc46 	bl	8004004 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005784:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005790:	4b0f      	ldr	r3, [pc, #60]	; (80057d0 <xTaskPriorityDisinherit+0xd4>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	429a      	cmp	r2, r3
 8005796:	d903      	bls.n	80057a0 <xTaskPriorityDisinherit+0xa4>
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800579c:	4a0c      	ldr	r2, [pc, #48]	; (80057d0 <xTaskPriorityDisinherit+0xd4>)
 800579e:	6013      	str	r3, [r2, #0]
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057a4:	4613      	mov	r3, r2
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	4413      	add	r3, r2
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	4a09      	ldr	r2, [pc, #36]	; (80057d4 <xTaskPriorityDisinherit+0xd8>)
 80057ae:	441a      	add	r2, r3
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	3304      	adds	r3, #4
 80057b4:	4619      	mov	r1, r3
 80057b6:	4610      	mov	r0, r2
 80057b8:	f7fe fbc7 	bl	8003f4a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80057bc:	2301      	movs	r3, #1
 80057be:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80057c0:	697b      	ldr	r3, [r7, #20]
	}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3718      	adds	r7, #24
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
 80057ca:	bf00      	nop
 80057cc:	20001178 	.word	0x20001178
 80057d0:	20001654 	.word	0x20001654
 80057d4:	2000117c 	.word	0x2000117c

080057d8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b084      	sub	sp, #16
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80057e2:	4b21      	ldr	r3, [pc, #132]	; (8005868 <prvAddCurrentTaskToDelayedList+0x90>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80057e8:	4b20      	ldr	r3, [pc, #128]	; (800586c <prvAddCurrentTaskToDelayedList+0x94>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	3304      	adds	r3, #4
 80057ee:	4618      	mov	r0, r3
 80057f0:	f7fe fc08 	bl	8004004 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057fa:	d10a      	bne.n	8005812 <prvAddCurrentTaskToDelayedList+0x3a>
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d007      	beq.n	8005812 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005802:	4b1a      	ldr	r3, [pc, #104]	; (800586c <prvAddCurrentTaskToDelayedList+0x94>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	3304      	adds	r3, #4
 8005808:	4619      	mov	r1, r3
 800580a:	4819      	ldr	r0, [pc, #100]	; (8005870 <prvAddCurrentTaskToDelayedList+0x98>)
 800580c:	f7fe fb9d 	bl	8003f4a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005810:	e026      	b.n	8005860 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005812:	68fa      	ldr	r2, [r7, #12]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	4413      	add	r3, r2
 8005818:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800581a:	4b14      	ldr	r3, [pc, #80]	; (800586c <prvAddCurrentTaskToDelayedList+0x94>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	68ba      	ldr	r2, [r7, #8]
 8005820:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005822:	68ba      	ldr	r2, [r7, #8]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	429a      	cmp	r2, r3
 8005828:	d209      	bcs.n	800583e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800582a:	4b12      	ldr	r3, [pc, #72]	; (8005874 <prvAddCurrentTaskToDelayedList+0x9c>)
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	4b0f      	ldr	r3, [pc, #60]	; (800586c <prvAddCurrentTaskToDelayedList+0x94>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	3304      	adds	r3, #4
 8005834:	4619      	mov	r1, r3
 8005836:	4610      	mov	r0, r2
 8005838:	f7fe fbab 	bl	8003f92 <vListInsert>
}
 800583c:	e010      	b.n	8005860 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800583e:	4b0e      	ldr	r3, [pc, #56]	; (8005878 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	4b0a      	ldr	r3, [pc, #40]	; (800586c <prvAddCurrentTaskToDelayedList+0x94>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	3304      	adds	r3, #4
 8005848:	4619      	mov	r1, r3
 800584a:	4610      	mov	r0, r2
 800584c:	f7fe fba1 	bl	8003f92 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005850:	4b0a      	ldr	r3, [pc, #40]	; (800587c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	68ba      	ldr	r2, [r7, #8]
 8005856:	429a      	cmp	r2, r3
 8005858:	d202      	bcs.n	8005860 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800585a:	4a08      	ldr	r2, [pc, #32]	; (800587c <prvAddCurrentTaskToDelayedList+0xa4>)
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	6013      	str	r3, [r2, #0]
}
 8005860:	bf00      	nop
 8005862:	3710      	adds	r7, #16
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}
 8005868:	20001650 	.word	0x20001650
 800586c:	20001178 	.word	0x20001178
 8005870:	20001638 	.word	0x20001638
 8005874:	20001608 	.word	0x20001608
 8005878:	20001604 	.word	0x20001604
 800587c:	2000166c 	.word	0x2000166c

08005880 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b08a      	sub	sp, #40	; 0x28
 8005884:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005886:	2300      	movs	r3, #0
 8005888:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800588a:	f000 fb07 	bl	8005e9c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800588e:	4b1c      	ldr	r3, [pc, #112]	; (8005900 <xTimerCreateTimerTask+0x80>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d021      	beq.n	80058da <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005896:	2300      	movs	r3, #0
 8005898:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800589a:	2300      	movs	r3, #0
 800589c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800589e:	1d3a      	adds	r2, r7, #4
 80058a0:	f107 0108 	add.w	r1, r7, #8
 80058a4:	f107 030c 	add.w	r3, r7, #12
 80058a8:	4618      	mov	r0, r3
 80058aa:	f7fe fb07 	bl	8003ebc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80058ae:	6879      	ldr	r1, [r7, #4]
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	68fa      	ldr	r2, [r7, #12]
 80058b4:	9202      	str	r2, [sp, #8]
 80058b6:	9301      	str	r3, [sp, #4]
 80058b8:	2302      	movs	r3, #2
 80058ba:	9300      	str	r3, [sp, #0]
 80058bc:	2300      	movs	r3, #0
 80058be:	460a      	mov	r2, r1
 80058c0:	4910      	ldr	r1, [pc, #64]	; (8005904 <xTimerCreateTimerTask+0x84>)
 80058c2:	4811      	ldr	r0, [pc, #68]	; (8005908 <xTimerCreateTimerTask+0x88>)
 80058c4:	f7ff f8b4 	bl	8004a30 <xTaskCreateStatic>
 80058c8:	4603      	mov	r3, r0
 80058ca:	4a10      	ldr	r2, [pc, #64]	; (800590c <xTimerCreateTimerTask+0x8c>)
 80058cc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80058ce:	4b0f      	ldr	r3, [pc, #60]	; (800590c <xTimerCreateTimerTask+0x8c>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d001      	beq.n	80058da <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80058d6:	2301      	movs	r3, #1
 80058d8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d10a      	bne.n	80058f6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80058e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e4:	f383 8811 	msr	BASEPRI, r3
 80058e8:	f3bf 8f6f 	isb	sy
 80058ec:	f3bf 8f4f 	dsb	sy
 80058f0:	613b      	str	r3, [r7, #16]
}
 80058f2:	bf00      	nop
 80058f4:	e7fe      	b.n	80058f4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80058f6:	697b      	ldr	r3, [r7, #20]
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3718      	adds	r7, #24
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}
 8005900:	200016a8 	.word	0x200016a8
 8005904:	08007e34 	.word	0x08007e34
 8005908:	08005a45 	.word	0x08005a45
 800590c:	200016ac 	.word	0x200016ac

08005910 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b08a      	sub	sp, #40	; 0x28
 8005914:	af00      	add	r7, sp, #0
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	607a      	str	r2, [r7, #4]
 800591c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800591e:	2300      	movs	r3, #0
 8005920:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d10a      	bne.n	800593e <xTimerGenericCommand+0x2e>
	__asm volatile
 8005928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800592c:	f383 8811 	msr	BASEPRI, r3
 8005930:	f3bf 8f6f 	isb	sy
 8005934:	f3bf 8f4f 	dsb	sy
 8005938:	623b      	str	r3, [r7, #32]
}
 800593a:	bf00      	nop
 800593c:	e7fe      	b.n	800593c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800593e:	4b1a      	ldr	r3, [pc, #104]	; (80059a8 <xTimerGenericCommand+0x98>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d02a      	beq.n	800599c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	2b05      	cmp	r3, #5
 8005956:	dc18      	bgt.n	800598a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005958:	f7ff feb2 	bl	80056c0 <xTaskGetSchedulerState>
 800595c:	4603      	mov	r3, r0
 800595e:	2b02      	cmp	r3, #2
 8005960:	d109      	bne.n	8005976 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005962:	4b11      	ldr	r3, [pc, #68]	; (80059a8 <xTimerGenericCommand+0x98>)
 8005964:	6818      	ldr	r0, [r3, #0]
 8005966:	f107 0110 	add.w	r1, r7, #16
 800596a:	2300      	movs	r3, #0
 800596c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800596e:	f7fe fc77 	bl	8004260 <xQueueGenericSend>
 8005972:	6278      	str	r0, [r7, #36]	; 0x24
 8005974:	e012      	b.n	800599c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005976:	4b0c      	ldr	r3, [pc, #48]	; (80059a8 <xTimerGenericCommand+0x98>)
 8005978:	6818      	ldr	r0, [r3, #0]
 800597a:	f107 0110 	add.w	r1, r7, #16
 800597e:	2300      	movs	r3, #0
 8005980:	2200      	movs	r2, #0
 8005982:	f7fe fc6d 	bl	8004260 <xQueueGenericSend>
 8005986:	6278      	str	r0, [r7, #36]	; 0x24
 8005988:	e008      	b.n	800599c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800598a:	4b07      	ldr	r3, [pc, #28]	; (80059a8 <xTimerGenericCommand+0x98>)
 800598c:	6818      	ldr	r0, [r3, #0]
 800598e:	f107 0110 	add.w	r1, r7, #16
 8005992:	2300      	movs	r3, #0
 8005994:	683a      	ldr	r2, [r7, #0]
 8005996:	f7fe fd61 	bl	800445c <xQueueGenericSendFromISR>
 800599a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800599c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3728      	adds	r7, #40	; 0x28
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}
 80059a6:	bf00      	nop
 80059a8:	200016a8 	.word	0x200016a8

080059ac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b088      	sub	sp, #32
 80059b0:	af02      	add	r7, sp, #8
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059b6:	4b22      	ldr	r3, [pc, #136]	; (8005a40 <prvProcessExpiredTimer+0x94>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	3304      	adds	r3, #4
 80059c4:	4618      	mov	r0, r3
 80059c6:	f7fe fb1d 	bl	8004004 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80059d0:	f003 0304 	and.w	r3, r3, #4
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d022      	beq.n	8005a1e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	699a      	ldr	r2, [r3, #24]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	18d1      	adds	r1, r2, r3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	683a      	ldr	r2, [r7, #0]
 80059e4:	6978      	ldr	r0, [r7, #20]
 80059e6:	f000 f8d1 	bl	8005b8c <prvInsertTimerInActiveList>
 80059ea:	4603      	mov	r3, r0
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d01f      	beq.n	8005a30 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80059f0:	2300      	movs	r3, #0
 80059f2:	9300      	str	r3, [sp, #0]
 80059f4:	2300      	movs	r3, #0
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	2100      	movs	r1, #0
 80059fa:	6978      	ldr	r0, [r7, #20]
 80059fc:	f7ff ff88 	bl	8005910 <xTimerGenericCommand>
 8005a00:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d113      	bne.n	8005a30 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a0c:	f383 8811 	msr	BASEPRI, r3
 8005a10:	f3bf 8f6f 	isb	sy
 8005a14:	f3bf 8f4f 	dsb	sy
 8005a18:	60fb      	str	r3, [r7, #12]
}
 8005a1a:	bf00      	nop
 8005a1c:	e7fe      	b.n	8005a1c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a24:	f023 0301 	bic.w	r3, r3, #1
 8005a28:	b2da      	uxtb	r2, r3
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	6a1b      	ldr	r3, [r3, #32]
 8005a34:	6978      	ldr	r0, [r7, #20]
 8005a36:	4798      	blx	r3
}
 8005a38:	bf00      	nop
 8005a3a:	3718      	adds	r7, #24
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}
 8005a40:	200016a0 	.word	0x200016a0

08005a44 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b084      	sub	sp, #16
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005a4c:	f107 0308 	add.w	r3, r7, #8
 8005a50:	4618      	mov	r0, r3
 8005a52:	f000 f857 	bl	8005b04 <prvGetNextExpireTime>
 8005a56:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	68f8      	ldr	r0, [r7, #12]
 8005a5e:	f000 f803 	bl	8005a68 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005a62:	f000 f8d5 	bl	8005c10 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005a66:	e7f1      	b.n	8005a4c <prvTimerTask+0x8>

08005a68 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005a72:	f7ff fa39 	bl	8004ee8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005a76:	f107 0308 	add.w	r3, r7, #8
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f000 f866 	bl	8005b4c <prvSampleTimeNow>
 8005a80:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d130      	bne.n	8005aea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d10a      	bne.n	8005aa4 <prvProcessTimerOrBlockTask+0x3c>
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d806      	bhi.n	8005aa4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005a96:	f7ff fa35 	bl	8004f04 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005a9a:	68f9      	ldr	r1, [r7, #12]
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f7ff ff85 	bl	80059ac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005aa2:	e024      	b.n	8005aee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d008      	beq.n	8005abc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005aaa:	4b13      	ldr	r3, [pc, #76]	; (8005af8 <prvProcessTimerOrBlockTask+0x90>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d101      	bne.n	8005ab8 <prvProcessTimerOrBlockTask+0x50>
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e000      	b.n	8005aba <prvProcessTimerOrBlockTask+0x52>
 8005ab8:	2300      	movs	r3, #0
 8005aba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005abc:	4b0f      	ldr	r3, [pc, #60]	; (8005afc <prvProcessTimerOrBlockTask+0x94>)
 8005abe:	6818      	ldr	r0, [r3, #0]
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	1ad3      	subs	r3, r2, r3
 8005ac6:	683a      	ldr	r2, [r7, #0]
 8005ac8:	4619      	mov	r1, r3
 8005aca:	f7fe ff7d 	bl	80049c8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005ace:	f7ff fa19 	bl	8004f04 <xTaskResumeAll>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d10a      	bne.n	8005aee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005ad8:	4b09      	ldr	r3, [pc, #36]	; (8005b00 <prvProcessTimerOrBlockTask+0x98>)
 8005ada:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ade:	601a      	str	r2, [r3, #0]
 8005ae0:	f3bf 8f4f 	dsb	sy
 8005ae4:	f3bf 8f6f 	isb	sy
}
 8005ae8:	e001      	b.n	8005aee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005aea:	f7ff fa0b 	bl	8004f04 <xTaskResumeAll>
}
 8005aee:	bf00      	nop
 8005af0:	3710      	adds	r7, #16
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	200016a4 	.word	0x200016a4
 8005afc:	200016a8 	.word	0x200016a8
 8005b00:	e000ed04 	.word	0xe000ed04

08005b04 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005b04:	b480      	push	{r7}
 8005b06:	b085      	sub	sp, #20
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005b0c:	4b0e      	ldr	r3, [pc, #56]	; (8005b48 <prvGetNextExpireTime+0x44>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d101      	bne.n	8005b1a <prvGetNextExpireTime+0x16>
 8005b16:	2201      	movs	r2, #1
 8005b18:	e000      	b.n	8005b1c <prvGetNextExpireTime+0x18>
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d105      	bne.n	8005b34 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005b28:	4b07      	ldr	r3, [pc, #28]	; (8005b48 <prvGetNextExpireTime+0x44>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	60fb      	str	r3, [r7, #12]
 8005b32:	e001      	b.n	8005b38 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005b34:	2300      	movs	r3, #0
 8005b36:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005b38:	68fb      	ldr	r3, [r7, #12]
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3714      	adds	r7, #20
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b44:	4770      	bx	lr
 8005b46:	bf00      	nop
 8005b48:	200016a0 	.word	0x200016a0

08005b4c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005b54:	f7ff fa74 	bl	8005040 <xTaskGetTickCount>
 8005b58:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005b5a:	4b0b      	ldr	r3, [pc, #44]	; (8005b88 <prvSampleTimeNow+0x3c>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	68fa      	ldr	r2, [r7, #12]
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d205      	bcs.n	8005b70 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005b64:	f000 f936 	bl	8005dd4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	601a      	str	r2, [r3, #0]
 8005b6e:	e002      	b.n	8005b76 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005b76:	4a04      	ldr	r2, [pc, #16]	; (8005b88 <prvSampleTimeNow+0x3c>)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3710      	adds	r7, #16
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
 8005b86:	bf00      	nop
 8005b88:	200016b0 	.word	0x200016b0

08005b8c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b086      	sub	sp, #24
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	607a      	str	r2, [r7, #4]
 8005b98:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	68ba      	ldr	r2, [r7, #8]
 8005ba2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	68fa      	ldr	r2, [r7, #12]
 8005ba8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005baa:	68ba      	ldr	r2, [r7, #8]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d812      	bhi.n	8005bd8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	1ad2      	subs	r2, r2, r3
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	699b      	ldr	r3, [r3, #24]
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d302      	bcc.n	8005bc6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	617b      	str	r3, [r7, #20]
 8005bc4:	e01b      	b.n	8005bfe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005bc6:	4b10      	ldr	r3, [pc, #64]	; (8005c08 <prvInsertTimerInActiveList+0x7c>)
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	3304      	adds	r3, #4
 8005bce:	4619      	mov	r1, r3
 8005bd0:	4610      	mov	r0, r2
 8005bd2:	f7fe f9de 	bl	8003f92 <vListInsert>
 8005bd6:	e012      	b.n	8005bfe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d206      	bcs.n	8005bee <prvInsertTimerInActiveList+0x62>
 8005be0:	68ba      	ldr	r2, [r7, #8]
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d302      	bcc.n	8005bee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005be8:	2301      	movs	r3, #1
 8005bea:	617b      	str	r3, [r7, #20]
 8005bec:	e007      	b.n	8005bfe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005bee:	4b07      	ldr	r3, [pc, #28]	; (8005c0c <prvInsertTimerInActiveList+0x80>)
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	3304      	adds	r3, #4
 8005bf6:	4619      	mov	r1, r3
 8005bf8:	4610      	mov	r0, r2
 8005bfa:	f7fe f9ca 	bl	8003f92 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005bfe:	697b      	ldr	r3, [r7, #20]
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3718      	adds	r7, #24
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}
 8005c08:	200016a4 	.word	0x200016a4
 8005c0c:	200016a0 	.word	0x200016a0

08005c10 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b08e      	sub	sp, #56	; 0x38
 8005c14:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005c16:	e0ca      	b.n	8005dae <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	da18      	bge.n	8005c50 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005c1e:	1d3b      	adds	r3, r7, #4
 8005c20:	3304      	adds	r3, #4
 8005c22:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d10a      	bne.n	8005c40 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c2e:	f383 8811 	msr	BASEPRI, r3
 8005c32:	f3bf 8f6f 	isb	sy
 8005c36:	f3bf 8f4f 	dsb	sy
 8005c3a:	61fb      	str	r3, [r7, #28]
}
 8005c3c:	bf00      	nop
 8005c3e:	e7fe      	b.n	8005c3e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c46:	6850      	ldr	r0, [r2, #4]
 8005c48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c4a:	6892      	ldr	r2, [r2, #8]
 8005c4c:	4611      	mov	r1, r2
 8005c4e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	f2c0 80aa 	blt.w	8005dac <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c5e:	695b      	ldr	r3, [r3, #20]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d004      	beq.n	8005c6e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c66:	3304      	adds	r3, #4
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f7fe f9cb 	bl	8004004 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005c6e:	463b      	mov	r3, r7
 8005c70:	4618      	mov	r0, r3
 8005c72:	f7ff ff6b 	bl	8005b4c <prvSampleTimeNow>
 8005c76:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2b09      	cmp	r3, #9
 8005c7c:	f200 8097 	bhi.w	8005dae <prvProcessReceivedCommands+0x19e>
 8005c80:	a201      	add	r2, pc, #4	; (adr r2, 8005c88 <prvProcessReceivedCommands+0x78>)
 8005c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c86:	bf00      	nop
 8005c88:	08005cb1 	.word	0x08005cb1
 8005c8c:	08005cb1 	.word	0x08005cb1
 8005c90:	08005cb1 	.word	0x08005cb1
 8005c94:	08005d25 	.word	0x08005d25
 8005c98:	08005d39 	.word	0x08005d39
 8005c9c:	08005d83 	.word	0x08005d83
 8005ca0:	08005cb1 	.word	0x08005cb1
 8005ca4:	08005cb1 	.word	0x08005cb1
 8005ca8:	08005d25 	.word	0x08005d25
 8005cac:	08005d39 	.word	0x08005d39
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005cb6:	f043 0301 	orr.w	r3, r3, #1
 8005cba:	b2da      	uxtb	r2, r3
 8005cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cbe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005cc2:	68ba      	ldr	r2, [r7, #8]
 8005cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc6:	699b      	ldr	r3, [r3, #24]
 8005cc8:	18d1      	adds	r1, r2, r3
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cd0:	f7ff ff5c 	bl	8005b8c <prvInsertTimerInActiveList>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d069      	beq.n	8005dae <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cdc:	6a1b      	ldr	r3, [r3, #32]
 8005cde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ce0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ce8:	f003 0304 	and.w	r3, r3, #4
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d05e      	beq.n	8005dae <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005cf0:	68ba      	ldr	r2, [r7, #8]
 8005cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf4:	699b      	ldr	r3, [r3, #24]
 8005cf6:	441a      	add	r2, r3
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	9300      	str	r3, [sp, #0]
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	2100      	movs	r1, #0
 8005d00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d02:	f7ff fe05 	bl	8005910 <xTimerGenericCommand>
 8005d06:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005d08:	6a3b      	ldr	r3, [r7, #32]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d14f      	bne.n	8005dae <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d12:	f383 8811 	msr	BASEPRI, r3
 8005d16:	f3bf 8f6f 	isb	sy
 8005d1a:	f3bf 8f4f 	dsb	sy
 8005d1e:	61bb      	str	r3, [r7, #24]
}
 8005d20:	bf00      	nop
 8005d22:	e7fe      	b.n	8005d22 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d2a:	f023 0301 	bic.w	r3, r3, #1
 8005d2e:	b2da      	uxtb	r2, r3
 8005d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005d36:	e03a      	b.n	8005dae <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d3e:	f043 0301 	orr.w	r3, r3, #1
 8005d42:	b2da      	uxtb	r2, r3
 8005d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005d4a:	68ba      	ldr	r2, [r7, #8]
 8005d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d4e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d52:	699b      	ldr	r3, [r3, #24]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d10a      	bne.n	8005d6e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d5c:	f383 8811 	msr	BASEPRI, r3
 8005d60:	f3bf 8f6f 	isb	sy
 8005d64:	f3bf 8f4f 	dsb	sy
 8005d68:	617b      	str	r3, [r7, #20]
}
 8005d6a:	bf00      	nop
 8005d6c:	e7fe      	b.n	8005d6c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d70:	699a      	ldr	r2, [r3, #24]
 8005d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d74:	18d1      	adds	r1, r2, r3
 8005d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d7c:	f7ff ff06 	bl	8005b8c <prvInsertTimerInActiveList>
					break;
 8005d80:	e015      	b.n	8005dae <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d88:	f003 0302 	and.w	r3, r3, #2
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d103      	bne.n	8005d98 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005d90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d92:	f000 fbdd 	bl	8006550 <vPortFree>
 8005d96:	e00a      	b.n	8005dae <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d9e:	f023 0301 	bic.w	r3, r3, #1
 8005da2:	b2da      	uxtb	r2, r3
 8005da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005daa:	e000      	b.n	8005dae <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005dac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005dae:	4b08      	ldr	r3, [pc, #32]	; (8005dd0 <prvProcessReceivedCommands+0x1c0>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	1d39      	adds	r1, r7, #4
 8005db4:	2200      	movs	r2, #0
 8005db6:	4618      	mov	r0, r3
 8005db8:	f7fe fbec 	bl	8004594 <xQueueReceive>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	f47f af2a 	bne.w	8005c18 <prvProcessReceivedCommands+0x8>
	}
}
 8005dc4:	bf00      	nop
 8005dc6:	bf00      	nop
 8005dc8:	3730      	adds	r7, #48	; 0x30
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	200016a8 	.word	0x200016a8

08005dd4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b088      	sub	sp, #32
 8005dd8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005dda:	e048      	b.n	8005e6e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005ddc:	4b2d      	ldr	r3, [pc, #180]	; (8005e94 <prvSwitchTimerLists+0xc0>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005de6:	4b2b      	ldr	r3, [pc, #172]	; (8005e94 <prvSwitchTimerLists+0xc0>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	3304      	adds	r3, #4
 8005df4:	4618      	mov	r0, r3
 8005df6:	f7fe f905 	bl	8004004 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	6a1b      	ldr	r3, [r3, #32]
 8005dfe:	68f8      	ldr	r0, [r7, #12]
 8005e00:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e08:	f003 0304 	and.w	r3, r3, #4
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d02e      	beq.n	8005e6e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	699b      	ldr	r3, [r3, #24]
 8005e14:	693a      	ldr	r2, [r7, #16]
 8005e16:	4413      	add	r3, r2
 8005e18:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005e1a:	68ba      	ldr	r2, [r7, #8]
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d90e      	bls.n	8005e40 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	68ba      	ldr	r2, [r7, #8]
 8005e26:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	68fa      	ldr	r2, [r7, #12]
 8005e2c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005e2e:	4b19      	ldr	r3, [pc, #100]	; (8005e94 <prvSwitchTimerLists+0xc0>)
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	3304      	adds	r3, #4
 8005e36:	4619      	mov	r1, r3
 8005e38:	4610      	mov	r0, r2
 8005e3a:	f7fe f8aa 	bl	8003f92 <vListInsert>
 8005e3e:	e016      	b.n	8005e6e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005e40:	2300      	movs	r3, #0
 8005e42:	9300      	str	r3, [sp, #0]
 8005e44:	2300      	movs	r3, #0
 8005e46:	693a      	ldr	r2, [r7, #16]
 8005e48:	2100      	movs	r1, #0
 8005e4a:	68f8      	ldr	r0, [r7, #12]
 8005e4c:	f7ff fd60 	bl	8005910 <xTimerGenericCommand>
 8005e50:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d10a      	bne.n	8005e6e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e5c:	f383 8811 	msr	BASEPRI, r3
 8005e60:	f3bf 8f6f 	isb	sy
 8005e64:	f3bf 8f4f 	dsb	sy
 8005e68:	603b      	str	r3, [r7, #0]
}
 8005e6a:	bf00      	nop
 8005e6c:	e7fe      	b.n	8005e6c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005e6e:	4b09      	ldr	r3, [pc, #36]	; (8005e94 <prvSwitchTimerLists+0xc0>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d1b1      	bne.n	8005ddc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005e78:	4b06      	ldr	r3, [pc, #24]	; (8005e94 <prvSwitchTimerLists+0xc0>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005e7e:	4b06      	ldr	r3, [pc, #24]	; (8005e98 <prvSwitchTimerLists+0xc4>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a04      	ldr	r2, [pc, #16]	; (8005e94 <prvSwitchTimerLists+0xc0>)
 8005e84:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005e86:	4a04      	ldr	r2, [pc, #16]	; (8005e98 <prvSwitchTimerLists+0xc4>)
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	6013      	str	r3, [r2, #0]
}
 8005e8c:	bf00      	nop
 8005e8e:	3718      	adds	r7, #24
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}
 8005e94:	200016a0 	.word	0x200016a0
 8005e98:	200016a4 	.word	0x200016a4

08005e9c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b082      	sub	sp, #8
 8005ea0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005ea2:	f000 f967 	bl	8006174 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005ea6:	4b15      	ldr	r3, [pc, #84]	; (8005efc <prvCheckForValidListAndQueue+0x60>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d120      	bne.n	8005ef0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005eae:	4814      	ldr	r0, [pc, #80]	; (8005f00 <prvCheckForValidListAndQueue+0x64>)
 8005eb0:	f7fe f81e 	bl	8003ef0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005eb4:	4813      	ldr	r0, [pc, #76]	; (8005f04 <prvCheckForValidListAndQueue+0x68>)
 8005eb6:	f7fe f81b 	bl	8003ef0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005eba:	4b13      	ldr	r3, [pc, #76]	; (8005f08 <prvCheckForValidListAndQueue+0x6c>)
 8005ebc:	4a10      	ldr	r2, [pc, #64]	; (8005f00 <prvCheckForValidListAndQueue+0x64>)
 8005ebe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005ec0:	4b12      	ldr	r3, [pc, #72]	; (8005f0c <prvCheckForValidListAndQueue+0x70>)
 8005ec2:	4a10      	ldr	r2, [pc, #64]	; (8005f04 <prvCheckForValidListAndQueue+0x68>)
 8005ec4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	9300      	str	r3, [sp, #0]
 8005eca:	4b11      	ldr	r3, [pc, #68]	; (8005f10 <prvCheckForValidListAndQueue+0x74>)
 8005ecc:	4a11      	ldr	r2, [pc, #68]	; (8005f14 <prvCheckForValidListAndQueue+0x78>)
 8005ece:	2110      	movs	r1, #16
 8005ed0:	200a      	movs	r0, #10
 8005ed2:	f7fe f929 	bl	8004128 <xQueueGenericCreateStatic>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	4a08      	ldr	r2, [pc, #32]	; (8005efc <prvCheckForValidListAndQueue+0x60>)
 8005eda:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005edc:	4b07      	ldr	r3, [pc, #28]	; (8005efc <prvCheckForValidListAndQueue+0x60>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d005      	beq.n	8005ef0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005ee4:	4b05      	ldr	r3, [pc, #20]	; (8005efc <prvCheckForValidListAndQueue+0x60>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	490b      	ldr	r1, [pc, #44]	; (8005f18 <prvCheckForValidListAndQueue+0x7c>)
 8005eea:	4618      	mov	r0, r3
 8005eec:	f7fe fd42 	bl	8004974 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005ef0:	f000 f970 	bl	80061d4 <vPortExitCritical>
}
 8005ef4:	bf00      	nop
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}
 8005efa:	bf00      	nop
 8005efc:	200016a8 	.word	0x200016a8
 8005f00:	20001678 	.word	0x20001678
 8005f04:	2000168c 	.word	0x2000168c
 8005f08:	200016a0 	.word	0x200016a0
 8005f0c:	200016a4 	.word	0x200016a4
 8005f10:	20001754 	.word	0x20001754
 8005f14:	200016b4 	.word	0x200016b4
 8005f18:	08007e3c 	.word	0x08007e3c

08005f1c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b085      	sub	sp, #20
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	60f8      	str	r0, [r7, #12]
 8005f24:	60b9      	str	r1, [r7, #8]
 8005f26:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	3b04      	subs	r3, #4
 8005f2c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005f34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	3b04      	subs	r3, #4
 8005f3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	f023 0201 	bic.w	r2, r3, #1
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	3b04      	subs	r3, #4
 8005f4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005f4c:	4a0c      	ldr	r2, [pc, #48]	; (8005f80 <pxPortInitialiseStack+0x64>)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	3b14      	subs	r3, #20
 8005f56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	3b04      	subs	r3, #4
 8005f62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f06f 0202 	mvn.w	r2, #2
 8005f6a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	3b20      	subs	r3, #32
 8005f70:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005f72:	68fb      	ldr	r3, [r7, #12]
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3714      	adds	r7, #20
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr
 8005f80:	08005f85 	.word	0x08005f85

08005f84 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005f84:	b480      	push	{r7}
 8005f86:	b085      	sub	sp, #20
 8005f88:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005f8e:	4b12      	ldr	r3, [pc, #72]	; (8005fd8 <prvTaskExitError+0x54>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f96:	d00a      	beq.n	8005fae <prvTaskExitError+0x2a>
	__asm volatile
 8005f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f9c:	f383 8811 	msr	BASEPRI, r3
 8005fa0:	f3bf 8f6f 	isb	sy
 8005fa4:	f3bf 8f4f 	dsb	sy
 8005fa8:	60fb      	str	r3, [r7, #12]
}
 8005faa:	bf00      	nop
 8005fac:	e7fe      	b.n	8005fac <prvTaskExitError+0x28>
	__asm volatile
 8005fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb2:	f383 8811 	msr	BASEPRI, r3
 8005fb6:	f3bf 8f6f 	isb	sy
 8005fba:	f3bf 8f4f 	dsb	sy
 8005fbe:	60bb      	str	r3, [r7, #8]
}
 8005fc0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005fc2:	bf00      	nop
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d0fc      	beq.n	8005fc4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005fca:	bf00      	nop
 8005fcc:	bf00      	nop
 8005fce:	3714      	adds	r7, #20
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd6:	4770      	bx	lr
 8005fd8:	20000014 	.word	0x20000014
 8005fdc:	00000000 	.word	0x00000000

08005fe0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005fe0:	4b07      	ldr	r3, [pc, #28]	; (8006000 <pxCurrentTCBConst2>)
 8005fe2:	6819      	ldr	r1, [r3, #0]
 8005fe4:	6808      	ldr	r0, [r1, #0]
 8005fe6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fea:	f380 8809 	msr	PSP, r0
 8005fee:	f3bf 8f6f 	isb	sy
 8005ff2:	f04f 0000 	mov.w	r0, #0
 8005ff6:	f380 8811 	msr	BASEPRI, r0
 8005ffa:	4770      	bx	lr
 8005ffc:	f3af 8000 	nop.w

08006000 <pxCurrentTCBConst2>:
 8006000:	20001178 	.word	0x20001178
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006004:	bf00      	nop
 8006006:	bf00      	nop

08006008 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006008:	4808      	ldr	r0, [pc, #32]	; (800602c <prvPortStartFirstTask+0x24>)
 800600a:	6800      	ldr	r0, [r0, #0]
 800600c:	6800      	ldr	r0, [r0, #0]
 800600e:	f380 8808 	msr	MSP, r0
 8006012:	f04f 0000 	mov.w	r0, #0
 8006016:	f380 8814 	msr	CONTROL, r0
 800601a:	b662      	cpsie	i
 800601c:	b661      	cpsie	f
 800601e:	f3bf 8f4f 	dsb	sy
 8006022:	f3bf 8f6f 	isb	sy
 8006026:	df00      	svc	0
 8006028:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800602a:	bf00      	nop
 800602c:	e000ed08 	.word	0xe000ed08

08006030 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b086      	sub	sp, #24
 8006034:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006036:	4b46      	ldr	r3, [pc, #280]	; (8006150 <xPortStartScheduler+0x120>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a46      	ldr	r2, [pc, #280]	; (8006154 <xPortStartScheduler+0x124>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d10a      	bne.n	8006056 <xPortStartScheduler+0x26>
	__asm volatile
 8006040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006044:	f383 8811 	msr	BASEPRI, r3
 8006048:	f3bf 8f6f 	isb	sy
 800604c:	f3bf 8f4f 	dsb	sy
 8006050:	613b      	str	r3, [r7, #16]
}
 8006052:	bf00      	nop
 8006054:	e7fe      	b.n	8006054 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006056:	4b3e      	ldr	r3, [pc, #248]	; (8006150 <xPortStartScheduler+0x120>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a3f      	ldr	r2, [pc, #252]	; (8006158 <xPortStartScheduler+0x128>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d10a      	bne.n	8006076 <xPortStartScheduler+0x46>
	__asm volatile
 8006060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006064:	f383 8811 	msr	BASEPRI, r3
 8006068:	f3bf 8f6f 	isb	sy
 800606c:	f3bf 8f4f 	dsb	sy
 8006070:	60fb      	str	r3, [r7, #12]
}
 8006072:	bf00      	nop
 8006074:	e7fe      	b.n	8006074 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006076:	4b39      	ldr	r3, [pc, #228]	; (800615c <xPortStartScheduler+0x12c>)
 8006078:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	b2db      	uxtb	r3, r3
 8006080:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	22ff      	movs	r2, #255	; 0xff
 8006086:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	b2db      	uxtb	r3, r3
 800608e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006090:	78fb      	ldrb	r3, [r7, #3]
 8006092:	b2db      	uxtb	r3, r3
 8006094:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006098:	b2da      	uxtb	r2, r3
 800609a:	4b31      	ldr	r3, [pc, #196]	; (8006160 <xPortStartScheduler+0x130>)
 800609c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800609e:	4b31      	ldr	r3, [pc, #196]	; (8006164 <xPortStartScheduler+0x134>)
 80060a0:	2207      	movs	r2, #7
 80060a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80060a4:	e009      	b.n	80060ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80060a6:	4b2f      	ldr	r3, [pc, #188]	; (8006164 <xPortStartScheduler+0x134>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	3b01      	subs	r3, #1
 80060ac:	4a2d      	ldr	r2, [pc, #180]	; (8006164 <xPortStartScheduler+0x134>)
 80060ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80060b0:	78fb      	ldrb	r3, [r7, #3]
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	005b      	lsls	r3, r3, #1
 80060b6:	b2db      	uxtb	r3, r3
 80060b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80060ba:	78fb      	ldrb	r3, [r7, #3]
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060c2:	2b80      	cmp	r3, #128	; 0x80
 80060c4:	d0ef      	beq.n	80060a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80060c6:	4b27      	ldr	r3, [pc, #156]	; (8006164 <xPortStartScheduler+0x134>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f1c3 0307 	rsb	r3, r3, #7
 80060ce:	2b04      	cmp	r3, #4
 80060d0:	d00a      	beq.n	80060e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80060d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d6:	f383 8811 	msr	BASEPRI, r3
 80060da:	f3bf 8f6f 	isb	sy
 80060de:	f3bf 8f4f 	dsb	sy
 80060e2:	60bb      	str	r3, [r7, #8]
}
 80060e4:	bf00      	nop
 80060e6:	e7fe      	b.n	80060e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80060e8:	4b1e      	ldr	r3, [pc, #120]	; (8006164 <xPortStartScheduler+0x134>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	021b      	lsls	r3, r3, #8
 80060ee:	4a1d      	ldr	r2, [pc, #116]	; (8006164 <xPortStartScheduler+0x134>)
 80060f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80060f2:	4b1c      	ldr	r3, [pc, #112]	; (8006164 <xPortStartScheduler+0x134>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80060fa:	4a1a      	ldr	r2, [pc, #104]	; (8006164 <xPortStartScheduler+0x134>)
 80060fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	b2da      	uxtb	r2, r3
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006106:	4b18      	ldr	r3, [pc, #96]	; (8006168 <xPortStartScheduler+0x138>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a17      	ldr	r2, [pc, #92]	; (8006168 <xPortStartScheduler+0x138>)
 800610c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006110:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006112:	4b15      	ldr	r3, [pc, #84]	; (8006168 <xPortStartScheduler+0x138>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a14      	ldr	r2, [pc, #80]	; (8006168 <xPortStartScheduler+0x138>)
 8006118:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800611c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800611e:	f000 f8dd 	bl	80062dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006122:	4b12      	ldr	r3, [pc, #72]	; (800616c <xPortStartScheduler+0x13c>)
 8006124:	2200      	movs	r2, #0
 8006126:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006128:	f000 f8fc 	bl	8006324 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800612c:	4b10      	ldr	r3, [pc, #64]	; (8006170 <xPortStartScheduler+0x140>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a0f      	ldr	r2, [pc, #60]	; (8006170 <xPortStartScheduler+0x140>)
 8006132:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006136:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006138:	f7ff ff66 	bl	8006008 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800613c:	f7ff f84a 	bl	80051d4 <vTaskSwitchContext>
	prvTaskExitError();
 8006140:	f7ff ff20 	bl	8005f84 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006144:	2300      	movs	r3, #0
}
 8006146:	4618      	mov	r0, r3
 8006148:	3718      	adds	r7, #24
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
 800614e:	bf00      	nop
 8006150:	e000ed00 	.word	0xe000ed00
 8006154:	410fc271 	.word	0x410fc271
 8006158:	410fc270 	.word	0x410fc270
 800615c:	e000e400 	.word	0xe000e400
 8006160:	200017a4 	.word	0x200017a4
 8006164:	200017a8 	.word	0x200017a8
 8006168:	e000ed20 	.word	0xe000ed20
 800616c:	20000014 	.word	0x20000014
 8006170:	e000ef34 	.word	0xe000ef34

08006174 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006174:	b480      	push	{r7}
 8006176:	b083      	sub	sp, #12
 8006178:	af00      	add	r7, sp, #0
	__asm volatile
 800617a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800617e:	f383 8811 	msr	BASEPRI, r3
 8006182:	f3bf 8f6f 	isb	sy
 8006186:	f3bf 8f4f 	dsb	sy
 800618a:	607b      	str	r3, [r7, #4]
}
 800618c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800618e:	4b0f      	ldr	r3, [pc, #60]	; (80061cc <vPortEnterCritical+0x58>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	3301      	adds	r3, #1
 8006194:	4a0d      	ldr	r2, [pc, #52]	; (80061cc <vPortEnterCritical+0x58>)
 8006196:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006198:	4b0c      	ldr	r3, [pc, #48]	; (80061cc <vPortEnterCritical+0x58>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2b01      	cmp	r3, #1
 800619e:	d10f      	bne.n	80061c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80061a0:	4b0b      	ldr	r3, [pc, #44]	; (80061d0 <vPortEnterCritical+0x5c>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d00a      	beq.n	80061c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80061aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ae:	f383 8811 	msr	BASEPRI, r3
 80061b2:	f3bf 8f6f 	isb	sy
 80061b6:	f3bf 8f4f 	dsb	sy
 80061ba:	603b      	str	r3, [r7, #0]
}
 80061bc:	bf00      	nop
 80061be:	e7fe      	b.n	80061be <vPortEnterCritical+0x4a>
	}
}
 80061c0:	bf00      	nop
 80061c2:	370c      	adds	r7, #12
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr
 80061cc:	20000014 	.word	0x20000014
 80061d0:	e000ed04 	.word	0xe000ed04

080061d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80061d4:	b480      	push	{r7}
 80061d6:	b083      	sub	sp, #12
 80061d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80061da:	4b12      	ldr	r3, [pc, #72]	; (8006224 <vPortExitCritical+0x50>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d10a      	bne.n	80061f8 <vPortExitCritical+0x24>
	__asm volatile
 80061e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e6:	f383 8811 	msr	BASEPRI, r3
 80061ea:	f3bf 8f6f 	isb	sy
 80061ee:	f3bf 8f4f 	dsb	sy
 80061f2:	607b      	str	r3, [r7, #4]
}
 80061f4:	bf00      	nop
 80061f6:	e7fe      	b.n	80061f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80061f8:	4b0a      	ldr	r3, [pc, #40]	; (8006224 <vPortExitCritical+0x50>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	3b01      	subs	r3, #1
 80061fe:	4a09      	ldr	r2, [pc, #36]	; (8006224 <vPortExitCritical+0x50>)
 8006200:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006202:	4b08      	ldr	r3, [pc, #32]	; (8006224 <vPortExitCritical+0x50>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d105      	bne.n	8006216 <vPortExitCritical+0x42>
 800620a:	2300      	movs	r3, #0
 800620c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	f383 8811 	msr	BASEPRI, r3
}
 8006214:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006216:	bf00      	nop
 8006218:	370c      	adds	r7, #12
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr
 8006222:	bf00      	nop
 8006224:	20000014 	.word	0x20000014
	...

08006230 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006230:	f3ef 8009 	mrs	r0, PSP
 8006234:	f3bf 8f6f 	isb	sy
 8006238:	4b15      	ldr	r3, [pc, #84]	; (8006290 <pxCurrentTCBConst>)
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	f01e 0f10 	tst.w	lr, #16
 8006240:	bf08      	it	eq
 8006242:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006246:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800624a:	6010      	str	r0, [r2, #0]
 800624c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006250:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006254:	f380 8811 	msr	BASEPRI, r0
 8006258:	f3bf 8f4f 	dsb	sy
 800625c:	f3bf 8f6f 	isb	sy
 8006260:	f7fe ffb8 	bl	80051d4 <vTaskSwitchContext>
 8006264:	f04f 0000 	mov.w	r0, #0
 8006268:	f380 8811 	msr	BASEPRI, r0
 800626c:	bc09      	pop	{r0, r3}
 800626e:	6819      	ldr	r1, [r3, #0]
 8006270:	6808      	ldr	r0, [r1, #0]
 8006272:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006276:	f01e 0f10 	tst.w	lr, #16
 800627a:	bf08      	it	eq
 800627c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006280:	f380 8809 	msr	PSP, r0
 8006284:	f3bf 8f6f 	isb	sy
 8006288:	4770      	bx	lr
 800628a:	bf00      	nop
 800628c:	f3af 8000 	nop.w

08006290 <pxCurrentTCBConst>:
 8006290:	20001178 	.word	0x20001178
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006294:	bf00      	nop
 8006296:	bf00      	nop

08006298 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b082      	sub	sp, #8
 800629c:	af00      	add	r7, sp, #0
	__asm volatile
 800629e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a2:	f383 8811 	msr	BASEPRI, r3
 80062a6:	f3bf 8f6f 	isb	sy
 80062aa:	f3bf 8f4f 	dsb	sy
 80062ae:	607b      	str	r3, [r7, #4]
}
 80062b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80062b2:	f7fe fed5 	bl	8005060 <xTaskIncrementTick>
 80062b6:	4603      	mov	r3, r0
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d003      	beq.n	80062c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80062bc:	4b06      	ldr	r3, [pc, #24]	; (80062d8 <xPortSysTickHandler+0x40>)
 80062be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062c2:	601a      	str	r2, [r3, #0]
 80062c4:	2300      	movs	r3, #0
 80062c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	f383 8811 	msr	BASEPRI, r3
}
 80062ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80062d0:	bf00      	nop
 80062d2:	3708      	adds	r7, #8
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}
 80062d8:	e000ed04 	.word	0xe000ed04

080062dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80062dc:	b480      	push	{r7}
 80062de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80062e0:	4b0b      	ldr	r3, [pc, #44]	; (8006310 <vPortSetupTimerInterrupt+0x34>)
 80062e2:	2200      	movs	r2, #0
 80062e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80062e6:	4b0b      	ldr	r3, [pc, #44]	; (8006314 <vPortSetupTimerInterrupt+0x38>)
 80062e8:	2200      	movs	r2, #0
 80062ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80062ec:	4b0a      	ldr	r3, [pc, #40]	; (8006318 <vPortSetupTimerInterrupt+0x3c>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a0a      	ldr	r2, [pc, #40]	; (800631c <vPortSetupTimerInterrupt+0x40>)
 80062f2:	fba2 2303 	umull	r2, r3, r2, r3
 80062f6:	099b      	lsrs	r3, r3, #6
 80062f8:	4a09      	ldr	r2, [pc, #36]	; (8006320 <vPortSetupTimerInterrupt+0x44>)
 80062fa:	3b01      	subs	r3, #1
 80062fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80062fe:	4b04      	ldr	r3, [pc, #16]	; (8006310 <vPortSetupTimerInterrupt+0x34>)
 8006300:	2207      	movs	r2, #7
 8006302:	601a      	str	r2, [r3, #0]
}
 8006304:	bf00      	nop
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr
 800630e:	bf00      	nop
 8006310:	e000e010 	.word	0xe000e010
 8006314:	e000e018 	.word	0xe000e018
 8006318:	20000008 	.word	0x20000008
 800631c:	10624dd3 	.word	0x10624dd3
 8006320:	e000e014 	.word	0xe000e014

08006324 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006324:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006334 <vPortEnableVFP+0x10>
 8006328:	6801      	ldr	r1, [r0, #0]
 800632a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800632e:	6001      	str	r1, [r0, #0]
 8006330:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006332:	bf00      	nop
 8006334:	e000ed88 	.word	0xe000ed88

08006338 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006338:	b480      	push	{r7}
 800633a:	b085      	sub	sp, #20
 800633c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800633e:	f3ef 8305 	mrs	r3, IPSR
 8006342:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2b0f      	cmp	r3, #15
 8006348:	d914      	bls.n	8006374 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800634a:	4a17      	ldr	r2, [pc, #92]	; (80063a8 <vPortValidateInterruptPriority+0x70>)
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	4413      	add	r3, r2
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006354:	4b15      	ldr	r3, [pc, #84]	; (80063ac <vPortValidateInterruptPriority+0x74>)
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	7afa      	ldrb	r2, [r7, #11]
 800635a:	429a      	cmp	r2, r3
 800635c:	d20a      	bcs.n	8006374 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800635e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006362:	f383 8811 	msr	BASEPRI, r3
 8006366:	f3bf 8f6f 	isb	sy
 800636a:	f3bf 8f4f 	dsb	sy
 800636e:	607b      	str	r3, [r7, #4]
}
 8006370:	bf00      	nop
 8006372:	e7fe      	b.n	8006372 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006374:	4b0e      	ldr	r3, [pc, #56]	; (80063b0 <vPortValidateInterruptPriority+0x78>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800637c:	4b0d      	ldr	r3, [pc, #52]	; (80063b4 <vPortValidateInterruptPriority+0x7c>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	429a      	cmp	r2, r3
 8006382:	d90a      	bls.n	800639a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006388:	f383 8811 	msr	BASEPRI, r3
 800638c:	f3bf 8f6f 	isb	sy
 8006390:	f3bf 8f4f 	dsb	sy
 8006394:	603b      	str	r3, [r7, #0]
}
 8006396:	bf00      	nop
 8006398:	e7fe      	b.n	8006398 <vPortValidateInterruptPriority+0x60>
	}
 800639a:	bf00      	nop
 800639c:	3714      	adds	r7, #20
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr
 80063a6:	bf00      	nop
 80063a8:	e000e3f0 	.word	0xe000e3f0
 80063ac:	200017a4 	.word	0x200017a4
 80063b0:	e000ed0c 	.word	0xe000ed0c
 80063b4:	200017a8 	.word	0x200017a8

080063b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b08a      	sub	sp, #40	; 0x28
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80063c0:	2300      	movs	r3, #0
 80063c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80063c4:	f7fe fd90 	bl	8004ee8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80063c8:	4b5b      	ldr	r3, [pc, #364]	; (8006538 <pvPortMalloc+0x180>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d101      	bne.n	80063d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80063d0:	f000 f920 	bl	8006614 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80063d4:	4b59      	ldr	r3, [pc, #356]	; (800653c <pvPortMalloc+0x184>)
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	4013      	ands	r3, r2
 80063dc:	2b00      	cmp	r3, #0
 80063de:	f040 8093 	bne.w	8006508 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d01d      	beq.n	8006424 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80063e8:	2208      	movs	r2, #8
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4413      	add	r3, r2
 80063ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f003 0307 	and.w	r3, r3, #7
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d014      	beq.n	8006424 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f023 0307 	bic.w	r3, r3, #7
 8006400:	3308      	adds	r3, #8
 8006402:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f003 0307 	and.w	r3, r3, #7
 800640a:	2b00      	cmp	r3, #0
 800640c:	d00a      	beq.n	8006424 <pvPortMalloc+0x6c>
	__asm volatile
 800640e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006412:	f383 8811 	msr	BASEPRI, r3
 8006416:	f3bf 8f6f 	isb	sy
 800641a:	f3bf 8f4f 	dsb	sy
 800641e:	617b      	str	r3, [r7, #20]
}
 8006420:	bf00      	nop
 8006422:	e7fe      	b.n	8006422 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d06e      	beq.n	8006508 <pvPortMalloc+0x150>
 800642a:	4b45      	ldr	r3, [pc, #276]	; (8006540 <pvPortMalloc+0x188>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	429a      	cmp	r2, r3
 8006432:	d869      	bhi.n	8006508 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006434:	4b43      	ldr	r3, [pc, #268]	; (8006544 <pvPortMalloc+0x18c>)
 8006436:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006438:	4b42      	ldr	r3, [pc, #264]	; (8006544 <pvPortMalloc+0x18c>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800643e:	e004      	b.n	800644a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006442:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800644a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	687a      	ldr	r2, [r7, #4]
 8006450:	429a      	cmp	r2, r3
 8006452:	d903      	bls.n	800645c <pvPortMalloc+0xa4>
 8006454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d1f1      	bne.n	8006440 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800645c:	4b36      	ldr	r3, [pc, #216]	; (8006538 <pvPortMalloc+0x180>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006462:	429a      	cmp	r2, r3
 8006464:	d050      	beq.n	8006508 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006466:	6a3b      	ldr	r3, [r7, #32]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	2208      	movs	r2, #8
 800646c:	4413      	add	r3, r2
 800646e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	6a3b      	ldr	r3, [r7, #32]
 8006476:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647a:	685a      	ldr	r2, [r3, #4]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	1ad2      	subs	r2, r2, r3
 8006480:	2308      	movs	r3, #8
 8006482:	005b      	lsls	r3, r3, #1
 8006484:	429a      	cmp	r2, r3
 8006486:	d91f      	bls.n	80064c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	4413      	add	r3, r2
 800648e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006490:	69bb      	ldr	r3, [r7, #24]
 8006492:	f003 0307 	and.w	r3, r3, #7
 8006496:	2b00      	cmp	r3, #0
 8006498:	d00a      	beq.n	80064b0 <pvPortMalloc+0xf8>
	__asm volatile
 800649a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800649e:	f383 8811 	msr	BASEPRI, r3
 80064a2:	f3bf 8f6f 	isb	sy
 80064a6:	f3bf 8f4f 	dsb	sy
 80064aa:	613b      	str	r3, [r7, #16]
}
 80064ac:	bf00      	nop
 80064ae:	e7fe      	b.n	80064ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80064b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b2:	685a      	ldr	r2, [r3, #4]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	1ad2      	subs	r2, r2, r3
 80064b8:	69bb      	ldr	r3, [r7, #24]
 80064ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80064bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064be:	687a      	ldr	r2, [r7, #4]
 80064c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80064c2:	69b8      	ldr	r0, [r7, #24]
 80064c4:	f000 f908 	bl	80066d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80064c8:	4b1d      	ldr	r3, [pc, #116]	; (8006540 <pvPortMalloc+0x188>)
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	1ad3      	subs	r3, r2, r3
 80064d2:	4a1b      	ldr	r2, [pc, #108]	; (8006540 <pvPortMalloc+0x188>)
 80064d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80064d6:	4b1a      	ldr	r3, [pc, #104]	; (8006540 <pvPortMalloc+0x188>)
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	4b1b      	ldr	r3, [pc, #108]	; (8006548 <pvPortMalloc+0x190>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	429a      	cmp	r2, r3
 80064e0:	d203      	bcs.n	80064ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80064e2:	4b17      	ldr	r3, [pc, #92]	; (8006540 <pvPortMalloc+0x188>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a18      	ldr	r2, [pc, #96]	; (8006548 <pvPortMalloc+0x190>)
 80064e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80064ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ec:	685a      	ldr	r2, [r3, #4]
 80064ee:	4b13      	ldr	r3, [pc, #76]	; (800653c <pvPortMalloc+0x184>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	431a      	orrs	r2, r3
 80064f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80064f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fa:	2200      	movs	r2, #0
 80064fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80064fe:	4b13      	ldr	r3, [pc, #76]	; (800654c <pvPortMalloc+0x194>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	3301      	adds	r3, #1
 8006504:	4a11      	ldr	r2, [pc, #68]	; (800654c <pvPortMalloc+0x194>)
 8006506:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006508:	f7fe fcfc 	bl	8004f04 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800650c:	69fb      	ldr	r3, [r7, #28]
 800650e:	f003 0307 	and.w	r3, r3, #7
 8006512:	2b00      	cmp	r3, #0
 8006514:	d00a      	beq.n	800652c <pvPortMalloc+0x174>
	__asm volatile
 8006516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800651a:	f383 8811 	msr	BASEPRI, r3
 800651e:	f3bf 8f6f 	isb	sy
 8006522:	f3bf 8f4f 	dsb	sy
 8006526:	60fb      	str	r3, [r7, #12]
}
 8006528:	bf00      	nop
 800652a:	e7fe      	b.n	800652a <pvPortMalloc+0x172>
	return pvReturn;
 800652c:	69fb      	ldr	r3, [r7, #28]
}
 800652e:	4618      	mov	r0, r3
 8006530:	3728      	adds	r7, #40	; 0x28
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop
 8006538:	200053b4 	.word	0x200053b4
 800653c:	200053c8 	.word	0x200053c8
 8006540:	200053b8 	.word	0x200053b8
 8006544:	200053ac 	.word	0x200053ac
 8006548:	200053bc 	.word	0x200053bc
 800654c:	200053c0 	.word	0x200053c0

08006550 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b086      	sub	sp, #24
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d04d      	beq.n	80065fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006562:	2308      	movs	r3, #8
 8006564:	425b      	negs	r3, r3
 8006566:	697a      	ldr	r2, [r7, #20]
 8006568:	4413      	add	r3, r2
 800656a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	685a      	ldr	r2, [r3, #4]
 8006574:	4b24      	ldr	r3, [pc, #144]	; (8006608 <vPortFree+0xb8>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4013      	ands	r3, r2
 800657a:	2b00      	cmp	r3, #0
 800657c:	d10a      	bne.n	8006594 <vPortFree+0x44>
	__asm volatile
 800657e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006582:	f383 8811 	msr	BASEPRI, r3
 8006586:	f3bf 8f6f 	isb	sy
 800658a:	f3bf 8f4f 	dsb	sy
 800658e:	60fb      	str	r3, [r7, #12]
}
 8006590:	bf00      	nop
 8006592:	e7fe      	b.n	8006592 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d00a      	beq.n	80065b2 <vPortFree+0x62>
	__asm volatile
 800659c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a0:	f383 8811 	msr	BASEPRI, r3
 80065a4:	f3bf 8f6f 	isb	sy
 80065a8:	f3bf 8f4f 	dsb	sy
 80065ac:	60bb      	str	r3, [r7, #8]
}
 80065ae:	bf00      	nop
 80065b0:	e7fe      	b.n	80065b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	685a      	ldr	r2, [r3, #4]
 80065b6:	4b14      	ldr	r3, [pc, #80]	; (8006608 <vPortFree+0xb8>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4013      	ands	r3, r2
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d01e      	beq.n	80065fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d11a      	bne.n	80065fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	685a      	ldr	r2, [r3, #4]
 80065cc:	4b0e      	ldr	r3, [pc, #56]	; (8006608 <vPortFree+0xb8>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	43db      	mvns	r3, r3
 80065d2:	401a      	ands	r2, r3
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80065d8:	f7fe fc86 	bl	8004ee8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	685a      	ldr	r2, [r3, #4]
 80065e0:	4b0a      	ldr	r3, [pc, #40]	; (800660c <vPortFree+0xbc>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4413      	add	r3, r2
 80065e6:	4a09      	ldr	r2, [pc, #36]	; (800660c <vPortFree+0xbc>)
 80065e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80065ea:	6938      	ldr	r0, [r7, #16]
 80065ec:	f000 f874 	bl	80066d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80065f0:	4b07      	ldr	r3, [pc, #28]	; (8006610 <vPortFree+0xc0>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	3301      	adds	r3, #1
 80065f6:	4a06      	ldr	r2, [pc, #24]	; (8006610 <vPortFree+0xc0>)
 80065f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80065fa:	f7fe fc83 	bl	8004f04 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80065fe:	bf00      	nop
 8006600:	3718      	adds	r7, #24
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
 8006606:	bf00      	nop
 8006608:	200053c8 	.word	0x200053c8
 800660c:	200053b8 	.word	0x200053b8
 8006610:	200053c4 	.word	0x200053c4

08006614 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006614:	b480      	push	{r7}
 8006616:	b085      	sub	sp, #20
 8006618:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800661a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800661e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006620:	4b27      	ldr	r3, [pc, #156]	; (80066c0 <prvHeapInit+0xac>)
 8006622:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f003 0307 	and.w	r3, r3, #7
 800662a:	2b00      	cmp	r3, #0
 800662c:	d00c      	beq.n	8006648 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	3307      	adds	r3, #7
 8006632:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f023 0307 	bic.w	r3, r3, #7
 800663a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800663c:	68ba      	ldr	r2, [r7, #8]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	1ad3      	subs	r3, r2, r3
 8006642:	4a1f      	ldr	r2, [pc, #124]	; (80066c0 <prvHeapInit+0xac>)
 8006644:	4413      	add	r3, r2
 8006646:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800664c:	4a1d      	ldr	r2, [pc, #116]	; (80066c4 <prvHeapInit+0xb0>)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006652:	4b1c      	ldr	r3, [pc, #112]	; (80066c4 <prvHeapInit+0xb0>)
 8006654:	2200      	movs	r2, #0
 8006656:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	68ba      	ldr	r2, [r7, #8]
 800665c:	4413      	add	r3, r2
 800665e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006660:	2208      	movs	r2, #8
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	1a9b      	subs	r3, r3, r2
 8006666:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f023 0307 	bic.w	r3, r3, #7
 800666e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	4a15      	ldr	r2, [pc, #84]	; (80066c8 <prvHeapInit+0xb4>)
 8006674:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006676:	4b14      	ldr	r3, [pc, #80]	; (80066c8 <prvHeapInit+0xb4>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	2200      	movs	r2, #0
 800667c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800667e:	4b12      	ldr	r3, [pc, #72]	; (80066c8 <prvHeapInit+0xb4>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	2200      	movs	r2, #0
 8006684:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	68fa      	ldr	r2, [r7, #12]
 800668e:	1ad2      	subs	r2, r2, r3
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006694:	4b0c      	ldr	r3, [pc, #48]	; (80066c8 <prvHeapInit+0xb4>)
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	4a0a      	ldr	r2, [pc, #40]	; (80066cc <prvHeapInit+0xb8>)
 80066a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	4a09      	ldr	r2, [pc, #36]	; (80066d0 <prvHeapInit+0xbc>)
 80066aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80066ac:	4b09      	ldr	r3, [pc, #36]	; (80066d4 <prvHeapInit+0xc0>)
 80066ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80066b2:	601a      	str	r2, [r3, #0]
}
 80066b4:	bf00      	nop
 80066b6:	3714      	adds	r7, #20
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr
 80066c0:	200017ac 	.word	0x200017ac
 80066c4:	200053ac 	.word	0x200053ac
 80066c8:	200053b4 	.word	0x200053b4
 80066cc:	200053bc 	.word	0x200053bc
 80066d0:	200053b8 	.word	0x200053b8
 80066d4:	200053c8 	.word	0x200053c8

080066d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80066d8:	b480      	push	{r7}
 80066da:	b085      	sub	sp, #20
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80066e0:	4b28      	ldr	r3, [pc, #160]	; (8006784 <prvInsertBlockIntoFreeList+0xac>)
 80066e2:	60fb      	str	r3, [r7, #12]
 80066e4:	e002      	b.n	80066ec <prvInsertBlockIntoFreeList+0x14>
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	60fb      	str	r3, [r7, #12]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d8f7      	bhi.n	80066e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	68ba      	ldr	r2, [r7, #8]
 8006700:	4413      	add	r3, r2
 8006702:	687a      	ldr	r2, [r7, #4]
 8006704:	429a      	cmp	r2, r3
 8006706:	d108      	bne.n	800671a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	685a      	ldr	r2, [r3, #4]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	441a      	add	r2, r3
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	68ba      	ldr	r2, [r7, #8]
 8006724:	441a      	add	r2, r3
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	429a      	cmp	r2, r3
 800672c:	d118      	bne.n	8006760 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	4b15      	ldr	r3, [pc, #84]	; (8006788 <prvInsertBlockIntoFreeList+0xb0>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	429a      	cmp	r2, r3
 8006738:	d00d      	beq.n	8006756 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	685a      	ldr	r2, [r3, #4]
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	441a      	add	r2, r3
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	601a      	str	r2, [r3, #0]
 8006754:	e008      	b.n	8006768 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006756:	4b0c      	ldr	r3, [pc, #48]	; (8006788 <prvInsertBlockIntoFreeList+0xb0>)
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	601a      	str	r2, [r3, #0]
 800675e:	e003      	b.n	8006768 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006768:	68fa      	ldr	r2, [r7, #12]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	429a      	cmp	r2, r3
 800676e:	d002      	beq.n	8006776 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	687a      	ldr	r2, [r7, #4]
 8006774:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006776:	bf00      	nop
 8006778:	3714      	adds	r7, #20
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr
 8006782:	bf00      	nop
 8006784:	200053ac 	.word	0x200053ac
 8006788:	200053b4 	.word	0x200053b4

0800678c <__errno>:
 800678c:	4b01      	ldr	r3, [pc, #4]	; (8006794 <__errno+0x8>)
 800678e:	6818      	ldr	r0, [r3, #0]
 8006790:	4770      	bx	lr
 8006792:	bf00      	nop
 8006794:	20000018 	.word	0x20000018

08006798 <std>:
 8006798:	2300      	movs	r3, #0
 800679a:	b510      	push	{r4, lr}
 800679c:	4604      	mov	r4, r0
 800679e:	e9c0 3300 	strd	r3, r3, [r0]
 80067a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80067a6:	6083      	str	r3, [r0, #8]
 80067a8:	8181      	strh	r1, [r0, #12]
 80067aa:	6643      	str	r3, [r0, #100]	; 0x64
 80067ac:	81c2      	strh	r2, [r0, #14]
 80067ae:	6183      	str	r3, [r0, #24]
 80067b0:	4619      	mov	r1, r3
 80067b2:	2208      	movs	r2, #8
 80067b4:	305c      	adds	r0, #92	; 0x5c
 80067b6:	f000 f91a 	bl	80069ee <memset>
 80067ba:	4b05      	ldr	r3, [pc, #20]	; (80067d0 <std+0x38>)
 80067bc:	6263      	str	r3, [r4, #36]	; 0x24
 80067be:	4b05      	ldr	r3, [pc, #20]	; (80067d4 <std+0x3c>)
 80067c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80067c2:	4b05      	ldr	r3, [pc, #20]	; (80067d8 <std+0x40>)
 80067c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80067c6:	4b05      	ldr	r3, [pc, #20]	; (80067dc <std+0x44>)
 80067c8:	6224      	str	r4, [r4, #32]
 80067ca:	6323      	str	r3, [r4, #48]	; 0x30
 80067cc:	bd10      	pop	{r4, pc}
 80067ce:	bf00      	nop
 80067d0:	08006da1 	.word	0x08006da1
 80067d4:	08006dc3 	.word	0x08006dc3
 80067d8:	08006dfb 	.word	0x08006dfb
 80067dc:	08006e1f 	.word	0x08006e1f

080067e0 <_cleanup_r>:
 80067e0:	4901      	ldr	r1, [pc, #4]	; (80067e8 <_cleanup_r+0x8>)
 80067e2:	f000 b8af 	b.w	8006944 <_fwalk_reent>
 80067e6:	bf00      	nop
 80067e8:	080070f9 	.word	0x080070f9

080067ec <__sfmoreglue>:
 80067ec:	b570      	push	{r4, r5, r6, lr}
 80067ee:	2268      	movs	r2, #104	; 0x68
 80067f0:	1e4d      	subs	r5, r1, #1
 80067f2:	4355      	muls	r5, r2
 80067f4:	460e      	mov	r6, r1
 80067f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80067fa:	f000 f921 	bl	8006a40 <_malloc_r>
 80067fe:	4604      	mov	r4, r0
 8006800:	b140      	cbz	r0, 8006814 <__sfmoreglue+0x28>
 8006802:	2100      	movs	r1, #0
 8006804:	e9c0 1600 	strd	r1, r6, [r0]
 8006808:	300c      	adds	r0, #12
 800680a:	60a0      	str	r0, [r4, #8]
 800680c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006810:	f000 f8ed 	bl	80069ee <memset>
 8006814:	4620      	mov	r0, r4
 8006816:	bd70      	pop	{r4, r5, r6, pc}

08006818 <__sfp_lock_acquire>:
 8006818:	4801      	ldr	r0, [pc, #4]	; (8006820 <__sfp_lock_acquire+0x8>)
 800681a:	f000 b8d8 	b.w	80069ce <__retarget_lock_acquire_recursive>
 800681e:	bf00      	nop
 8006820:	200053cd 	.word	0x200053cd

08006824 <__sfp_lock_release>:
 8006824:	4801      	ldr	r0, [pc, #4]	; (800682c <__sfp_lock_release+0x8>)
 8006826:	f000 b8d3 	b.w	80069d0 <__retarget_lock_release_recursive>
 800682a:	bf00      	nop
 800682c:	200053cd 	.word	0x200053cd

08006830 <__sinit_lock_acquire>:
 8006830:	4801      	ldr	r0, [pc, #4]	; (8006838 <__sinit_lock_acquire+0x8>)
 8006832:	f000 b8cc 	b.w	80069ce <__retarget_lock_acquire_recursive>
 8006836:	bf00      	nop
 8006838:	200053ce 	.word	0x200053ce

0800683c <__sinit_lock_release>:
 800683c:	4801      	ldr	r0, [pc, #4]	; (8006844 <__sinit_lock_release+0x8>)
 800683e:	f000 b8c7 	b.w	80069d0 <__retarget_lock_release_recursive>
 8006842:	bf00      	nop
 8006844:	200053ce 	.word	0x200053ce

08006848 <__sinit>:
 8006848:	b510      	push	{r4, lr}
 800684a:	4604      	mov	r4, r0
 800684c:	f7ff fff0 	bl	8006830 <__sinit_lock_acquire>
 8006850:	69a3      	ldr	r3, [r4, #24]
 8006852:	b11b      	cbz	r3, 800685c <__sinit+0x14>
 8006854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006858:	f7ff bff0 	b.w	800683c <__sinit_lock_release>
 800685c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006860:	6523      	str	r3, [r4, #80]	; 0x50
 8006862:	4b13      	ldr	r3, [pc, #76]	; (80068b0 <__sinit+0x68>)
 8006864:	4a13      	ldr	r2, [pc, #76]	; (80068b4 <__sinit+0x6c>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	62a2      	str	r2, [r4, #40]	; 0x28
 800686a:	42a3      	cmp	r3, r4
 800686c:	bf04      	itt	eq
 800686e:	2301      	moveq	r3, #1
 8006870:	61a3      	streq	r3, [r4, #24]
 8006872:	4620      	mov	r0, r4
 8006874:	f000 f820 	bl	80068b8 <__sfp>
 8006878:	6060      	str	r0, [r4, #4]
 800687a:	4620      	mov	r0, r4
 800687c:	f000 f81c 	bl	80068b8 <__sfp>
 8006880:	60a0      	str	r0, [r4, #8]
 8006882:	4620      	mov	r0, r4
 8006884:	f000 f818 	bl	80068b8 <__sfp>
 8006888:	2200      	movs	r2, #0
 800688a:	60e0      	str	r0, [r4, #12]
 800688c:	2104      	movs	r1, #4
 800688e:	6860      	ldr	r0, [r4, #4]
 8006890:	f7ff ff82 	bl	8006798 <std>
 8006894:	68a0      	ldr	r0, [r4, #8]
 8006896:	2201      	movs	r2, #1
 8006898:	2109      	movs	r1, #9
 800689a:	f7ff ff7d 	bl	8006798 <std>
 800689e:	68e0      	ldr	r0, [r4, #12]
 80068a0:	2202      	movs	r2, #2
 80068a2:	2112      	movs	r1, #18
 80068a4:	f7ff ff78 	bl	8006798 <std>
 80068a8:	2301      	movs	r3, #1
 80068aa:	61a3      	str	r3, [r4, #24]
 80068ac:	e7d2      	b.n	8006854 <__sinit+0xc>
 80068ae:	bf00      	nop
 80068b0:	08008670 	.word	0x08008670
 80068b4:	080067e1 	.word	0x080067e1

080068b8 <__sfp>:
 80068b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ba:	4607      	mov	r7, r0
 80068bc:	f7ff ffac 	bl	8006818 <__sfp_lock_acquire>
 80068c0:	4b1e      	ldr	r3, [pc, #120]	; (800693c <__sfp+0x84>)
 80068c2:	681e      	ldr	r6, [r3, #0]
 80068c4:	69b3      	ldr	r3, [r6, #24]
 80068c6:	b913      	cbnz	r3, 80068ce <__sfp+0x16>
 80068c8:	4630      	mov	r0, r6
 80068ca:	f7ff ffbd 	bl	8006848 <__sinit>
 80068ce:	3648      	adds	r6, #72	; 0x48
 80068d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80068d4:	3b01      	subs	r3, #1
 80068d6:	d503      	bpl.n	80068e0 <__sfp+0x28>
 80068d8:	6833      	ldr	r3, [r6, #0]
 80068da:	b30b      	cbz	r3, 8006920 <__sfp+0x68>
 80068dc:	6836      	ldr	r6, [r6, #0]
 80068de:	e7f7      	b.n	80068d0 <__sfp+0x18>
 80068e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80068e4:	b9d5      	cbnz	r5, 800691c <__sfp+0x64>
 80068e6:	4b16      	ldr	r3, [pc, #88]	; (8006940 <__sfp+0x88>)
 80068e8:	60e3      	str	r3, [r4, #12]
 80068ea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80068ee:	6665      	str	r5, [r4, #100]	; 0x64
 80068f0:	f000 f86c 	bl	80069cc <__retarget_lock_init_recursive>
 80068f4:	f7ff ff96 	bl	8006824 <__sfp_lock_release>
 80068f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80068fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006900:	6025      	str	r5, [r4, #0]
 8006902:	61a5      	str	r5, [r4, #24]
 8006904:	2208      	movs	r2, #8
 8006906:	4629      	mov	r1, r5
 8006908:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800690c:	f000 f86f 	bl	80069ee <memset>
 8006910:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006914:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006918:	4620      	mov	r0, r4
 800691a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800691c:	3468      	adds	r4, #104	; 0x68
 800691e:	e7d9      	b.n	80068d4 <__sfp+0x1c>
 8006920:	2104      	movs	r1, #4
 8006922:	4638      	mov	r0, r7
 8006924:	f7ff ff62 	bl	80067ec <__sfmoreglue>
 8006928:	4604      	mov	r4, r0
 800692a:	6030      	str	r0, [r6, #0]
 800692c:	2800      	cmp	r0, #0
 800692e:	d1d5      	bne.n	80068dc <__sfp+0x24>
 8006930:	f7ff ff78 	bl	8006824 <__sfp_lock_release>
 8006934:	230c      	movs	r3, #12
 8006936:	603b      	str	r3, [r7, #0]
 8006938:	e7ee      	b.n	8006918 <__sfp+0x60>
 800693a:	bf00      	nop
 800693c:	08008670 	.word	0x08008670
 8006940:	ffff0001 	.word	0xffff0001

08006944 <_fwalk_reent>:
 8006944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006948:	4606      	mov	r6, r0
 800694a:	4688      	mov	r8, r1
 800694c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006950:	2700      	movs	r7, #0
 8006952:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006956:	f1b9 0901 	subs.w	r9, r9, #1
 800695a:	d505      	bpl.n	8006968 <_fwalk_reent+0x24>
 800695c:	6824      	ldr	r4, [r4, #0]
 800695e:	2c00      	cmp	r4, #0
 8006960:	d1f7      	bne.n	8006952 <_fwalk_reent+0xe>
 8006962:	4638      	mov	r0, r7
 8006964:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006968:	89ab      	ldrh	r3, [r5, #12]
 800696a:	2b01      	cmp	r3, #1
 800696c:	d907      	bls.n	800697e <_fwalk_reent+0x3a>
 800696e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006972:	3301      	adds	r3, #1
 8006974:	d003      	beq.n	800697e <_fwalk_reent+0x3a>
 8006976:	4629      	mov	r1, r5
 8006978:	4630      	mov	r0, r6
 800697a:	47c0      	blx	r8
 800697c:	4307      	orrs	r7, r0
 800697e:	3568      	adds	r5, #104	; 0x68
 8006980:	e7e9      	b.n	8006956 <_fwalk_reent+0x12>
	...

08006984 <__libc_init_array>:
 8006984:	b570      	push	{r4, r5, r6, lr}
 8006986:	4d0d      	ldr	r5, [pc, #52]	; (80069bc <__libc_init_array+0x38>)
 8006988:	4c0d      	ldr	r4, [pc, #52]	; (80069c0 <__libc_init_array+0x3c>)
 800698a:	1b64      	subs	r4, r4, r5
 800698c:	10a4      	asrs	r4, r4, #2
 800698e:	2600      	movs	r6, #0
 8006990:	42a6      	cmp	r6, r4
 8006992:	d109      	bne.n	80069a8 <__libc_init_array+0x24>
 8006994:	4d0b      	ldr	r5, [pc, #44]	; (80069c4 <__libc_init_array+0x40>)
 8006996:	4c0c      	ldr	r4, [pc, #48]	; (80069c8 <__libc_init_array+0x44>)
 8006998:	f001 f98a 	bl	8007cb0 <_init>
 800699c:	1b64      	subs	r4, r4, r5
 800699e:	10a4      	asrs	r4, r4, #2
 80069a0:	2600      	movs	r6, #0
 80069a2:	42a6      	cmp	r6, r4
 80069a4:	d105      	bne.n	80069b2 <__libc_init_array+0x2e>
 80069a6:	bd70      	pop	{r4, r5, r6, pc}
 80069a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80069ac:	4798      	blx	r3
 80069ae:	3601      	adds	r6, #1
 80069b0:	e7ee      	b.n	8006990 <__libc_init_array+0xc>
 80069b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80069b6:	4798      	blx	r3
 80069b8:	3601      	adds	r6, #1
 80069ba:	e7f2      	b.n	80069a2 <__libc_init_array+0x1e>
 80069bc:	080086b0 	.word	0x080086b0
 80069c0:	080086b0 	.word	0x080086b0
 80069c4:	080086b0 	.word	0x080086b0
 80069c8:	080086b8 	.word	0x080086b8

080069cc <__retarget_lock_init_recursive>:
 80069cc:	4770      	bx	lr

080069ce <__retarget_lock_acquire_recursive>:
 80069ce:	4770      	bx	lr

080069d0 <__retarget_lock_release_recursive>:
 80069d0:	4770      	bx	lr

080069d2 <memcpy>:
 80069d2:	440a      	add	r2, r1
 80069d4:	4291      	cmp	r1, r2
 80069d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80069da:	d100      	bne.n	80069de <memcpy+0xc>
 80069dc:	4770      	bx	lr
 80069de:	b510      	push	{r4, lr}
 80069e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80069e8:	4291      	cmp	r1, r2
 80069ea:	d1f9      	bne.n	80069e0 <memcpy+0xe>
 80069ec:	bd10      	pop	{r4, pc}

080069ee <memset>:
 80069ee:	4402      	add	r2, r0
 80069f0:	4603      	mov	r3, r0
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d100      	bne.n	80069f8 <memset+0xa>
 80069f6:	4770      	bx	lr
 80069f8:	f803 1b01 	strb.w	r1, [r3], #1
 80069fc:	e7f9      	b.n	80069f2 <memset+0x4>
	...

08006a00 <sbrk_aligned>:
 8006a00:	b570      	push	{r4, r5, r6, lr}
 8006a02:	4e0e      	ldr	r6, [pc, #56]	; (8006a3c <sbrk_aligned+0x3c>)
 8006a04:	460c      	mov	r4, r1
 8006a06:	6831      	ldr	r1, [r6, #0]
 8006a08:	4605      	mov	r5, r0
 8006a0a:	b911      	cbnz	r1, 8006a12 <sbrk_aligned+0x12>
 8006a0c:	f000 f984 	bl	8006d18 <_sbrk_r>
 8006a10:	6030      	str	r0, [r6, #0]
 8006a12:	4621      	mov	r1, r4
 8006a14:	4628      	mov	r0, r5
 8006a16:	f000 f97f 	bl	8006d18 <_sbrk_r>
 8006a1a:	1c43      	adds	r3, r0, #1
 8006a1c:	d00a      	beq.n	8006a34 <sbrk_aligned+0x34>
 8006a1e:	1cc4      	adds	r4, r0, #3
 8006a20:	f024 0403 	bic.w	r4, r4, #3
 8006a24:	42a0      	cmp	r0, r4
 8006a26:	d007      	beq.n	8006a38 <sbrk_aligned+0x38>
 8006a28:	1a21      	subs	r1, r4, r0
 8006a2a:	4628      	mov	r0, r5
 8006a2c:	f000 f974 	bl	8006d18 <_sbrk_r>
 8006a30:	3001      	adds	r0, #1
 8006a32:	d101      	bne.n	8006a38 <sbrk_aligned+0x38>
 8006a34:	f04f 34ff 	mov.w	r4, #4294967295
 8006a38:	4620      	mov	r0, r4
 8006a3a:	bd70      	pop	{r4, r5, r6, pc}
 8006a3c:	200053d4 	.word	0x200053d4

08006a40 <_malloc_r>:
 8006a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a44:	1ccd      	adds	r5, r1, #3
 8006a46:	f025 0503 	bic.w	r5, r5, #3
 8006a4a:	3508      	adds	r5, #8
 8006a4c:	2d0c      	cmp	r5, #12
 8006a4e:	bf38      	it	cc
 8006a50:	250c      	movcc	r5, #12
 8006a52:	2d00      	cmp	r5, #0
 8006a54:	4607      	mov	r7, r0
 8006a56:	db01      	blt.n	8006a5c <_malloc_r+0x1c>
 8006a58:	42a9      	cmp	r1, r5
 8006a5a:	d905      	bls.n	8006a68 <_malloc_r+0x28>
 8006a5c:	230c      	movs	r3, #12
 8006a5e:	603b      	str	r3, [r7, #0]
 8006a60:	2600      	movs	r6, #0
 8006a62:	4630      	mov	r0, r6
 8006a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a68:	4e2e      	ldr	r6, [pc, #184]	; (8006b24 <_malloc_r+0xe4>)
 8006a6a:	f000 fbf9 	bl	8007260 <__malloc_lock>
 8006a6e:	6833      	ldr	r3, [r6, #0]
 8006a70:	461c      	mov	r4, r3
 8006a72:	bb34      	cbnz	r4, 8006ac2 <_malloc_r+0x82>
 8006a74:	4629      	mov	r1, r5
 8006a76:	4638      	mov	r0, r7
 8006a78:	f7ff ffc2 	bl	8006a00 <sbrk_aligned>
 8006a7c:	1c43      	adds	r3, r0, #1
 8006a7e:	4604      	mov	r4, r0
 8006a80:	d14d      	bne.n	8006b1e <_malloc_r+0xde>
 8006a82:	6834      	ldr	r4, [r6, #0]
 8006a84:	4626      	mov	r6, r4
 8006a86:	2e00      	cmp	r6, #0
 8006a88:	d140      	bne.n	8006b0c <_malloc_r+0xcc>
 8006a8a:	6823      	ldr	r3, [r4, #0]
 8006a8c:	4631      	mov	r1, r6
 8006a8e:	4638      	mov	r0, r7
 8006a90:	eb04 0803 	add.w	r8, r4, r3
 8006a94:	f000 f940 	bl	8006d18 <_sbrk_r>
 8006a98:	4580      	cmp	r8, r0
 8006a9a:	d13a      	bne.n	8006b12 <_malloc_r+0xd2>
 8006a9c:	6821      	ldr	r1, [r4, #0]
 8006a9e:	3503      	adds	r5, #3
 8006aa0:	1a6d      	subs	r5, r5, r1
 8006aa2:	f025 0503 	bic.w	r5, r5, #3
 8006aa6:	3508      	adds	r5, #8
 8006aa8:	2d0c      	cmp	r5, #12
 8006aaa:	bf38      	it	cc
 8006aac:	250c      	movcc	r5, #12
 8006aae:	4629      	mov	r1, r5
 8006ab0:	4638      	mov	r0, r7
 8006ab2:	f7ff ffa5 	bl	8006a00 <sbrk_aligned>
 8006ab6:	3001      	adds	r0, #1
 8006ab8:	d02b      	beq.n	8006b12 <_malloc_r+0xd2>
 8006aba:	6823      	ldr	r3, [r4, #0]
 8006abc:	442b      	add	r3, r5
 8006abe:	6023      	str	r3, [r4, #0]
 8006ac0:	e00e      	b.n	8006ae0 <_malloc_r+0xa0>
 8006ac2:	6822      	ldr	r2, [r4, #0]
 8006ac4:	1b52      	subs	r2, r2, r5
 8006ac6:	d41e      	bmi.n	8006b06 <_malloc_r+0xc6>
 8006ac8:	2a0b      	cmp	r2, #11
 8006aca:	d916      	bls.n	8006afa <_malloc_r+0xba>
 8006acc:	1961      	adds	r1, r4, r5
 8006ace:	42a3      	cmp	r3, r4
 8006ad0:	6025      	str	r5, [r4, #0]
 8006ad2:	bf18      	it	ne
 8006ad4:	6059      	strne	r1, [r3, #4]
 8006ad6:	6863      	ldr	r3, [r4, #4]
 8006ad8:	bf08      	it	eq
 8006ada:	6031      	streq	r1, [r6, #0]
 8006adc:	5162      	str	r2, [r4, r5]
 8006ade:	604b      	str	r3, [r1, #4]
 8006ae0:	4638      	mov	r0, r7
 8006ae2:	f104 060b 	add.w	r6, r4, #11
 8006ae6:	f000 fbc1 	bl	800726c <__malloc_unlock>
 8006aea:	f026 0607 	bic.w	r6, r6, #7
 8006aee:	1d23      	adds	r3, r4, #4
 8006af0:	1af2      	subs	r2, r6, r3
 8006af2:	d0b6      	beq.n	8006a62 <_malloc_r+0x22>
 8006af4:	1b9b      	subs	r3, r3, r6
 8006af6:	50a3      	str	r3, [r4, r2]
 8006af8:	e7b3      	b.n	8006a62 <_malloc_r+0x22>
 8006afa:	6862      	ldr	r2, [r4, #4]
 8006afc:	42a3      	cmp	r3, r4
 8006afe:	bf0c      	ite	eq
 8006b00:	6032      	streq	r2, [r6, #0]
 8006b02:	605a      	strne	r2, [r3, #4]
 8006b04:	e7ec      	b.n	8006ae0 <_malloc_r+0xa0>
 8006b06:	4623      	mov	r3, r4
 8006b08:	6864      	ldr	r4, [r4, #4]
 8006b0a:	e7b2      	b.n	8006a72 <_malloc_r+0x32>
 8006b0c:	4634      	mov	r4, r6
 8006b0e:	6876      	ldr	r6, [r6, #4]
 8006b10:	e7b9      	b.n	8006a86 <_malloc_r+0x46>
 8006b12:	230c      	movs	r3, #12
 8006b14:	603b      	str	r3, [r7, #0]
 8006b16:	4638      	mov	r0, r7
 8006b18:	f000 fba8 	bl	800726c <__malloc_unlock>
 8006b1c:	e7a1      	b.n	8006a62 <_malloc_r+0x22>
 8006b1e:	6025      	str	r5, [r4, #0]
 8006b20:	e7de      	b.n	8006ae0 <_malloc_r+0xa0>
 8006b22:	bf00      	nop
 8006b24:	200053d0 	.word	0x200053d0

08006b28 <iprintf>:
 8006b28:	b40f      	push	{r0, r1, r2, r3}
 8006b2a:	4b0a      	ldr	r3, [pc, #40]	; (8006b54 <iprintf+0x2c>)
 8006b2c:	b513      	push	{r0, r1, r4, lr}
 8006b2e:	681c      	ldr	r4, [r3, #0]
 8006b30:	b124      	cbz	r4, 8006b3c <iprintf+0x14>
 8006b32:	69a3      	ldr	r3, [r4, #24]
 8006b34:	b913      	cbnz	r3, 8006b3c <iprintf+0x14>
 8006b36:	4620      	mov	r0, r4
 8006b38:	f7ff fe86 	bl	8006848 <__sinit>
 8006b3c:	ab05      	add	r3, sp, #20
 8006b3e:	9a04      	ldr	r2, [sp, #16]
 8006b40:	68a1      	ldr	r1, [r4, #8]
 8006b42:	9301      	str	r3, [sp, #4]
 8006b44:	4620      	mov	r0, r4
 8006b46:	f000 fd69 	bl	800761c <_vfiprintf_r>
 8006b4a:	b002      	add	sp, #8
 8006b4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b50:	b004      	add	sp, #16
 8006b52:	4770      	bx	lr
 8006b54:	20000018 	.word	0x20000018

08006b58 <_puts_r>:
 8006b58:	b570      	push	{r4, r5, r6, lr}
 8006b5a:	460e      	mov	r6, r1
 8006b5c:	4605      	mov	r5, r0
 8006b5e:	b118      	cbz	r0, 8006b68 <_puts_r+0x10>
 8006b60:	6983      	ldr	r3, [r0, #24]
 8006b62:	b90b      	cbnz	r3, 8006b68 <_puts_r+0x10>
 8006b64:	f7ff fe70 	bl	8006848 <__sinit>
 8006b68:	69ab      	ldr	r3, [r5, #24]
 8006b6a:	68ac      	ldr	r4, [r5, #8]
 8006b6c:	b913      	cbnz	r3, 8006b74 <_puts_r+0x1c>
 8006b6e:	4628      	mov	r0, r5
 8006b70:	f7ff fe6a 	bl	8006848 <__sinit>
 8006b74:	4b2c      	ldr	r3, [pc, #176]	; (8006c28 <_puts_r+0xd0>)
 8006b76:	429c      	cmp	r4, r3
 8006b78:	d120      	bne.n	8006bbc <_puts_r+0x64>
 8006b7a:	686c      	ldr	r4, [r5, #4]
 8006b7c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b7e:	07db      	lsls	r3, r3, #31
 8006b80:	d405      	bmi.n	8006b8e <_puts_r+0x36>
 8006b82:	89a3      	ldrh	r3, [r4, #12]
 8006b84:	0598      	lsls	r0, r3, #22
 8006b86:	d402      	bmi.n	8006b8e <_puts_r+0x36>
 8006b88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b8a:	f7ff ff20 	bl	80069ce <__retarget_lock_acquire_recursive>
 8006b8e:	89a3      	ldrh	r3, [r4, #12]
 8006b90:	0719      	lsls	r1, r3, #28
 8006b92:	d51d      	bpl.n	8006bd0 <_puts_r+0x78>
 8006b94:	6923      	ldr	r3, [r4, #16]
 8006b96:	b1db      	cbz	r3, 8006bd0 <_puts_r+0x78>
 8006b98:	3e01      	subs	r6, #1
 8006b9a:	68a3      	ldr	r3, [r4, #8]
 8006b9c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006ba0:	3b01      	subs	r3, #1
 8006ba2:	60a3      	str	r3, [r4, #8]
 8006ba4:	bb39      	cbnz	r1, 8006bf6 <_puts_r+0x9e>
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	da38      	bge.n	8006c1c <_puts_r+0xc4>
 8006baa:	4622      	mov	r2, r4
 8006bac:	210a      	movs	r1, #10
 8006bae:	4628      	mov	r0, r5
 8006bb0:	f000 f93a 	bl	8006e28 <__swbuf_r>
 8006bb4:	3001      	adds	r0, #1
 8006bb6:	d011      	beq.n	8006bdc <_puts_r+0x84>
 8006bb8:	250a      	movs	r5, #10
 8006bba:	e011      	b.n	8006be0 <_puts_r+0x88>
 8006bbc:	4b1b      	ldr	r3, [pc, #108]	; (8006c2c <_puts_r+0xd4>)
 8006bbe:	429c      	cmp	r4, r3
 8006bc0:	d101      	bne.n	8006bc6 <_puts_r+0x6e>
 8006bc2:	68ac      	ldr	r4, [r5, #8]
 8006bc4:	e7da      	b.n	8006b7c <_puts_r+0x24>
 8006bc6:	4b1a      	ldr	r3, [pc, #104]	; (8006c30 <_puts_r+0xd8>)
 8006bc8:	429c      	cmp	r4, r3
 8006bca:	bf08      	it	eq
 8006bcc:	68ec      	ldreq	r4, [r5, #12]
 8006bce:	e7d5      	b.n	8006b7c <_puts_r+0x24>
 8006bd0:	4621      	mov	r1, r4
 8006bd2:	4628      	mov	r0, r5
 8006bd4:	f000 f98c 	bl	8006ef0 <__swsetup_r>
 8006bd8:	2800      	cmp	r0, #0
 8006bda:	d0dd      	beq.n	8006b98 <_puts_r+0x40>
 8006bdc:	f04f 35ff 	mov.w	r5, #4294967295
 8006be0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006be2:	07da      	lsls	r2, r3, #31
 8006be4:	d405      	bmi.n	8006bf2 <_puts_r+0x9a>
 8006be6:	89a3      	ldrh	r3, [r4, #12]
 8006be8:	059b      	lsls	r3, r3, #22
 8006bea:	d402      	bmi.n	8006bf2 <_puts_r+0x9a>
 8006bec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006bee:	f7ff feef 	bl	80069d0 <__retarget_lock_release_recursive>
 8006bf2:	4628      	mov	r0, r5
 8006bf4:	bd70      	pop	{r4, r5, r6, pc}
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	da04      	bge.n	8006c04 <_puts_r+0xac>
 8006bfa:	69a2      	ldr	r2, [r4, #24]
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	dc06      	bgt.n	8006c0e <_puts_r+0xb6>
 8006c00:	290a      	cmp	r1, #10
 8006c02:	d004      	beq.n	8006c0e <_puts_r+0xb6>
 8006c04:	6823      	ldr	r3, [r4, #0]
 8006c06:	1c5a      	adds	r2, r3, #1
 8006c08:	6022      	str	r2, [r4, #0]
 8006c0a:	7019      	strb	r1, [r3, #0]
 8006c0c:	e7c5      	b.n	8006b9a <_puts_r+0x42>
 8006c0e:	4622      	mov	r2, r4
 8006c10:	4628      	mov	r0, r5
 8006c12:	f000 f909 	bl	8006e28 <__swbuf_r>
 8006c16:	3001      	adds	r0, #1
 8006c18:	d1bf      	bne.n	8006b9a <_puts_r+0x42>
 8006c1a:	e7df      	b.n	8006bdc <_puts_r+0x84>
 8006c1c:	6823      	ldr	r3, [r4, #0]
 8006c1e:	250a      	movs	r5, #10
 8006c20:	1c5a      	adds	r2, r3, #1
 8006c22:	6022      	str	r2, [r4, #0]
 8006c24:	701d      	strb	r5, [r3, #0]
 8006c26:	e7db      	b.n	8006be0 <_puts_r+0x88>
 8006c28:	08008630 	.word	0x08008630
 8006c2c:	08008650 	.word	0x08008650
 8006c30:	08008610 	.word	0x08008610

08006c34 <puts>:
 8006c34:	4b02      	ldr	r3, [pc, #8]	; (8006c40 <puts+0xc>)
 8006c36:	4601      	mov	r1, r0
 8006c38:	6818      	ldr	r0, [r3, #0]
 8006c3a:	f7ff bf8d 	b.w	8006b58 <_puts_r>
 8006c3e:	bf00      	nop
 8006c40:	20000018 	.word	0x20000018

08006c44 <cleanup_glue>:
 8006c44:	b538      	push	{r3, r4, r5, lr}
 8006c46:	460c      	mov	r4, r1
 8006c48:	6809      	ldr	r1, [r1, #0]
 8006c4a:	4605      	mov	r5, r0
 8006c4c:	b109      	cbz	r1, 8006c52 <cleanup_glue+0xe>
 8006c4e:	f7ff fff9 	bl	8006c44 <cleanup_glue>
 8006c52:	4621      	mov	r1, r4
 8006c54:	4628      	mov	r0, r5
 8006c56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c5a:	f000 bb0d 	b.w	8007278 <_free_r>
	...

08006c60 <_reclaim_reent>:
 8006c60:	4b2c      	ldr	r3, [pc, #176]	; (8006d14 <_reclaim_reent+0xb4>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4283      	cmp	r3, r0
 8006c66:	b570      	push	{r4, r5, r6, lr}
 8006c68:	4604      	mov	r4, r0
 8006c6a:	d051      	beq.n	8006d10 <_reclaim_reent+0xb0>
 8006c6c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006c6e:	b143      	cbz	r3, 8006c82 <_reclaim_reent+0x22>
 8006c70:	68db      	ldr	r3, [r3, #12]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d14a      	bne.n	8006d0c <_reclaim_reent+0xac>
 8006c76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c78:	6819      	ldr	r1, [r3, #0]
 8006c7a:	b111      	cbz	r1, 8006c82 <_reclaim_reent+0x22>
 8006c7c:	4620      	mov	r0, r4
 8006c7e:	f000 fafb 	bl	8007278 <_free_r>
 8006c82:	6961      	ldr	r1, [r4, #20]
 8006c84:	b111      	cbz	r1, 8006c8c <_reclaim_reent+0x2c>
 8006c86:	4620      	mov	r0, r4
 8006c88:	f000 faf6 	bl	8007278 <_free_r>
 8006c8c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006c8e:	b111      	cbz	r1, 8006c96 <_reclaim_reent+0x36>
 8006c90:	4620      	mov	r0, r4
 8006c92:	f000 faf1 	bl	8007278 <_free_r>
 8006c96:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006c98:	b111      	cbz	r1, 8006ca0 <_reclaim_reent+0x40>
 8006c9a:	4620      	mov	r0, r4
 8006c9c:	f000 faec 	bl	8007278 <_free_r>
 8006ca0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006ca2:	b111      	cbz	r1, 8006caa <_reclaim_reent+0x4a>
 8006ca4:	4620      	mov	r0, r4
 8006ca6:	f000 fae7 	bl	8007278 <_free_r>
 8006caa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006cac:	b111      	cbz	r1, 8006cb4 <_reclaim_reent+0x54>
 8006cae:	4620      	mov	r0, r4
 8006cb0:	f000 fae2 	bl	8007278 <_free_r>
 8006cb4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006cb6:	b111      	cbz	r1, 8006cbe <_reclaim_reent+0x5e>
 8006cb8:	4620      	mov	r0, r4
 8006cba:	f000 fadd 	bl	8007278 <_free_r>
 8006cbe:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006cc0:	b111      	cbz	r1, 8006cc8 <_reclaim_reent+0x68>
 8006cc2:	4620      	mov	r0, r4
 8006cc4:	f000 fad8 	bl	8007278 <_free_r>
 8006cc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006cca:	b111      	cbz	r1, 8006cd2 <_reclaim_reent+0x72>
 8006ccc:	4620      	mov	r0, r4
 8006cce:	f000 fad3 	bl	8007278 <_free_r>
 8006cd2:	69a3      	ldr	r3, [r4, #24]
 8006cd4:	b1e3      	cbz	r3, 8006d10 <_reclaim_reent+0xb0>
 8006cd6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006cd8:	4620      	mov	r0, r4
 8006cda:	4798      	blx	r3
 8006cdc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006cde:	b1b9      	cbz	r1, 8006d10 <_reclaim_reent+0xb0>
 8006ce0:	4620      	mov	r0, r4
 8006ce2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006ce6:	f7ff bfad 	b.w	8006c44 <cleanup_glue>
 8006cea:	5949      	ldr	r1, [r1, r5]
 8006cec:	b941      	cbnz	r1, 8006d00 <_reclaim_reent+0xa0>
 8006cee:	3504      	adds	r5, #4
 8006cf0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006cf2:	2d80      	cmp	r5, #128	; 0x80
 8006cf4:	68d9      	ldr	r1, [r3, #12]
 8006cf6:	d1f8      	bne.n	8006cea <_reclaim_reent+0x8a>
 8006cf8:	4620      	mov	r0, r4
 8006cfa:	f000 fabd 	bl	8007278 <_free_r>
 8006cfe:	e7ba      	b.n	8006c76 <_reclaim_reent+0x16>
 8006d00:	680e      	ldr	r6, [r1, #0]
 8006d02:	4620      	mov	r0, r4
 8006d04:	f000 fab8 	bl	8007278 <_free_r>
 8006d08:	4631      	mov	r1, r6
 8006d0a:	e7ef      	b.n	8006cec <_reclaim_reent+0x8c>
 8006d0c:	2500      	movs	r5, #0
 8006d0e:	e7ef      	b.n	8006cf0 <_reclaim_reent+0x90>
 8006d10:	bd70      	pop	{r4, r5, r6, pc}
 8006d12:	bf00      	nop
 8006d14:	20000018 	.word	0x20000018

08006d18 <_sbrk_r>:
 8006d18:	b538      	push	{r3, r4, r5, lr}
 8006d1a:	4d06      	ldr	r5, [pc, #24]	; (8006d34 <_sbrk_r+0x1c>)
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	4604      	mov	r4, r0
 8006d20:	4608      	mov	r0, r1
 8006d22:	602b      	str	r3, [r5, #0]
 8006d24:	f7fa fbc6 	bl	80014b4 <_sbrk>
 8006d28:	1c43      	adds	r3, r0, #1
 8006d2a:	d102      	bne.n	8006d32 <_sbrk_r+0x1a>
 8006d2c:	682b      	ldr	r3, [r5, #0]
 8006d2e:	b103      	cbz	r3, 8006d32 <_sbrk_r+0x1a>
 8006d30:	6023      	str	r3, [r4, #0]
 8006d32:	bd38      	pop	{r3, r4, r5, pc}
 8006d34:	200053d8 	.word	0x200053d8

08006d38 <sniprintf>:
 8006d38:	b40c      	push	{r2, r3}
 8006d3a:	b530      	push	{r4, r5, lr}
 8006d3c:	4b17      	ldr	r3, [pc, #92]	; (8006d9c <sniprintf+0x64>)
 8006d3e:	1e0c      	subs	r4, r1, #0
 8006d40:	681d      	ldr	r5, [r3, #0]
 8006d42:	b09d      	sub	sp, #116	; 0x74
 8006d44:	da08      	bge.n	8006d58 <sniprintf+0x20>
 8006d46:	238b      	movs	r3, #139	; 0x8b
 8006d48:	602b      	str	r3, [r5, #0]
 8006d4a:	f04f 30ff 	mov.w	r0, #4294967295
 8006d4e:	b01d      	add	sp, #116	; 0x74
 8006d50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d54:	b002      	add	sp, #8
 8006d56:	4770      	bx	lr
 8006d58:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006d5c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006d60:	bf14      	ite	ne
 8006d62:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006d66:	4623      	moveq	r3, r4
 8006d68:	9304      	str	r3, [sp, #16]
 8006d6a:	9307      	str	r3, [sp, #28]
 8006d6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006d70:	9002      	str	r0, [sp, #8]
 8006d72:	9006      	str	r0, [sp, #24]
 8006d74:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006d78:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006d7a:	ab21      	add	r3, sp, #132	; 0x84
 8006d7c:	a902      	add	r1, sp, #8
 8006d7e:	4628      	mov	r0, r5
 8006d80:	9301      	str	r3, [sp, #4]
 8006d82:	f000 fb21 	bl	80073c8 <_svfiprintf_r>
 8006d86:	1c43      	adds	r3, r0, #1
 8006d88:	bfbc      	itt	lt
 8006d8a:	238b      	movlt	r3, #139	; 0x8b
 8006d8c:	602b      	strlt	r3, [r5, #0]
 8006d8e:	2c00      	cmp	r4, #0
 8006d90:	d0dd      	beq.n	8006d4e <sniprintf+0x16>
 8006d92:	9b02      	ldr	r3, [sp, #8]
 8006d94:	2200      	movs	r2, #0
 8006d96:	701a      	strb	r2, [r3, #0]
 8006d98:	e7d9      	b.n	8006d4e <sniprintf+0x16>
 8006d9a:	bf00      	nop
 8006d9c:	20000018 	.word	0x20000018

08006da0 <__sread>:
 8006da0:	b510      	push	{r4, lr}
 8006da2:	460c      	mov	r4, r1
 8006da4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006da8:	f000 fefc 	bl	8007ba4 <_read_r>
 8006dac:	2800      	cmp	r0, #0
 8006dae:	bfab      	itete	ge
 8006db0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006db2:	89a3      	ldrhlt	r3, [r4, #12]
 8006db4:	181b      	addge	r3, r3, r0
 8006db6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006dba:	bfac      	ite	ge
 8006dbc:	6563      	strge	r3, [r4, #84]	; 0x54
 8006dbe:	81a3      	strhlt	r3, [r4, #12]
 8006dc0:	bd10      	pop	{r4, pc}

08006dc2 <__swrite>:
 8006dc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dc6:	461f      	mov	r7, r3
 8006dc8:	898b      	ldrh	r3, [r1, #12]
 8006dca:	05db      	lsls	r3, r3, #23
 8006dcc:	4605      	mov	r5, r0
 8006dce:	460c      	mov	r4, r1
 8006dd0:	4616      	mov	r6, r2
 8006dd2:	d505      	bpl.n	8006de0 <__swrite+0x1e>
 8006dd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dd8:	2302      	movs	r3, #2
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f000 f9c8 	bl	8007170 <_lseek_r>
 8006de0:	89a3      	ldrh	r3, [r4, #12]
 8006de2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006de6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006dea:	81a3      	strh	r3, [r4, #12]
 8006dec:	4632      	mov	r2, r6
 8006dee:	463b      	mov	r3, r7
 8006df0:	4628      	mov	r0, r5
 8006df2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006df6:	f000 b869 	b.w	8006ecc <_write_r>

08006dfa <__sseek>:
 8006dfa:	b510      	push	{r4, lr}
 8006dfc:	460c      	mov	r4, r1
 8006dfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e02:	f000 f9b5 	bl	8007170 <_lseek_r>
 8006e06:	1c43      	adds	r3, r0, #1
 8006e08:	89a3      	ldrh	r3, [r4, #12]
 8006e0a:	bf15      	itete	ne
 8006e0c:	6560      	strne	r0, [r4, #84]	; 0x54
 8006e0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006e12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006e16:	81a3      	strheq	r3, [r4, #12]
 8006e18:	bf18      	it	ne
 8006e1a:	81a3      	strhne	r3, [r4, #12]
 8006e1c:	bd10      	pop	{r4, pc}

08006e1e <__sclose>:
 8006e1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e22:	f000 b8d3 	b.w	8006fcc <_close_r>
	...

08006e28 <__swbuf_r>:
 8006e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e2a:	460e      	mov	r6, r1
 8006e2c:	4614      	mov	r4, r2
 8006e2e:	4605      	mov	r5, r0
 8006e30:	b118      	cbz	r0, 8006e3a <__swbuf_r+0x12>
 8006e32:	6983      	ldr	r3, [r0, #24]
 8006e34:	b90b      	cbnz	r3, 8006e3a <__swbuf_r+0x12>
 8006e36:	f7ff fd07 	bl	8006848 <__sinit>
 8006e3a:	4b21      	ldr	r3, [pc, #132]	; (8006ec0 <__swbuf_r+0x98>)
 8006e3c:	429c      	cmp	r4, r3
 8006e3e:	d12b      	bne.n	8006e98 <__swbuf_r+0x70>
 8006e40:	686c      	ldr	r4, [r5, #4]
 8006e42:	69a3      	ldr	r3, [r4, #24]
 8006e44:	60a3      	str	r3, [r4, #8]
 8006e46:	89a3      	ldrh	r3, [r4, #12]
 8006e48:	071a      	lsls	r2, r3, #28
 8006e4a:	d52f      	bpl.n	8006eac <__swbuf_r+0x84>
 8006e4c:	6923      	ldr	r3, [r4, #16]
 8006e4e:	b36b      	cbz	r3, 8006eac <__swbuf_r+0x84>
 8006e50:	6923      	ldr	r3, [r4, #16]
 8006e52:	6820      	ldr	r0, [r4, #0]
 8006e54:	1ac0      	subs	r0, r0, r3
 8006e56:	6963      	ldr	r3, [r4, #20]
 8006e58:	b2f6      	uxtb	r6, r6
 8006e5a:	4283      	cmp	r3, r0
 8006e5c:	4637      	mov	r7, r6
 8006e5e:	dc04      	bgt.n	8006e6a <__swbuf_r+0x42>
 8006e60:	4621      	mov	r1, r4
 8006e62:	4628      	mov	r0, r5
 8006e64:	f000 f948 	bl	80070f8 <_fflush_r>
 8006e68:	bb30      	cbnz	r0, 8006eb8 <__swbuf_r+0x90>
 8006e6a:	68a3      	ldr	r3, [r4, #8]
 8006e6c:	3b01      	subs	r3, #1
 8006e6e:	60a3      	str	r3, [r4, #8]
 8006e70:	6823      	ldr	r3, [r4, #0]
 8006e72:	1c5a      	adds	r2, r3, #1
 8006e74:	6022      	str	r2, [r4, #0]
 8006e76:	701e      	strb	r6, [r3, #0]
 8006e78:	6963      	ldr	r3, [r4, #20]
 8006e7a:	3001      	adds	r0, #1
 8006e7c:	4283      	cmp	r3, r0
 8006e7e:	d004      	beq.n	8006e8a <__swbuf_r+0x62>
 8006e80:	89a3      	ldrh	r3, [r4, #12]
 8006e82:	07db      	lsls	r3, r3, #31
 8006e84:	d506      	bpl.n	8006e94 <__swbuf_r+0x6c>
 8006e86:	2e0a      	cmp	r6, #10
 8006e88:	d104      	bne.n	8006e94 <__swbuf_r+0x6c>
 8006e8a:	4621      	mov	r1, r4
 8006e8c:	4628      	mov	r0, r5
 8006e8e:	f000 f933 	bl	80070f8 <_fflush_r>
 8006e92:	b988      	cbnz	r0, 8006eb8 <__swbuf_r+0x90>
 8006e94:	4638      	mov	r0, r7
 8006e96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e98:	4b0a      	ldr	r3, [pc, #40]	; (8006ec4 <__swbuf_r+0x9c>)
 8006e9a:	429c      	cmp	r4, r3
 8006e9c:	d101      	bne.n	8006ea2 <__swbuf_r+0x7a>
 8006e9e:	68ac      	ldr	r4, [r5, #8]
 8006ea0:	e7cf      	b.n	8006e42 <__swbuf_r+0x1a>
 8006ea2:	4b09      	ldr	r3, [pc, #36]	; (8006ec8 <__swbuf_r+0xa0>)
 8006ea4:	429c      	cmp	r4, r3
 8006ea6:	bf08      	it	eq
 8006ea8:	68ec      	ldreq	r4, [r5, #12]
 8006eaa:	e7ca      	b.n	8006e42 <__swbuf_r+0x1a>
 8006eac:	4621      	mov	r1, r4
 8006eae:	4628      	mov	r0, r5
 8006eb0:	f000 f81e 	bl	8006ef0 <__swsetup_r>
 8006eb4:	2800      	cmp	r0, #0
 8006eb6:	d0cb      	beq.n	8006e50 <__swbuf_r+0x28>
 8006eb8:	f04f 37ff 	mov.w	r7, #4294967295
 8006ebc:	e7ea      	b.n	8006e94 <__swbuf_r+0x6c>
 8006ebe:	bf00      	nop
 8006ec0:	08008630 	.word	0x08008630
 8006ec4:	08008650 	.word	0x08008650
 8006ec8:	08008610 	.word	0x08008610

08006ecc <_write_r>:
 8006ecc:	b538      	push	{r3, r4, r5, lr}
 8006ece:	4d07      	ldr	r5, [pc, #28]	; (8006eec <_write_r+0x20>)
 8006ed0:	4604      	mov	r4, r0
 8006ed2:	4608      	mov	r0, r1
 8006ed4:	4611      	mov	r1, r2
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	602a      	str	r2, [r5, #0]
 8006eda:	461a      	mov	r2, r3
 8006edc:	f7fa fa99 	bl	8001412 <_write>
 8006ee0:	1c43      	adds	r3, r0, #1
 8006ee2:	d102      	bne.n	8006eea <_write_r+0x1e>
 8006ee4:	682b      	ldr	r3, [r5, #0]
 8006ee6:	b103      	cbz	r3, 8006eea <_write_r+0x1e>
 8006ee8:	6023      	str	r3, [r4, #0]
 8006eea:	bd38      	pop	{r3, r4, r5, pc}
 8006eec:	200053d8 	.word	0x200053d8

08006ef0 <__swsetup_r>:
 8006ef0:	4b32      	ldr	r3, [pc, #200]	; (8006fbc <__swsetup_r+0xcc>)
 8006ef2:	b570      	push	{r4, r5, r6, lr}
 8006ef4:	681d      	ldr	r5, [r3, #0]
 8006ef6:	4606      	mov	r6, r0
 8006ef8:	460c      	mov	r4, r1
 8006efa:	b125      	cbz	r5, 8006f06 <__swsetup_r+0x16>
 8006efc:	69ab      	ldr	r3, [r5, #24]
 8006efe:	b913      	cbnz	r3, 8006f06 <__swsetup_r+0x16>
 8006f00:	4628      	mov	r0, r5
 8006f02:	f7ff fca1 	bl	8006848 <__sinit>
 8006f06:	4b2e      	ldr	r3, [pc, #184]	; (8006fc0 <__swsetup_r+0xd0>)
 8006f08:	429c      	cmp	r4, r3
 8006f0a:	d10f      	bne.n	8006f2c <__swsetup_r+0x3c>
 8006f0c:	686c      	ldr	r4, [r5, #4]
 8006f0e:	89a3      	ldrh	r3, [r4, #12]
 8006f10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f14:	0719      	lsls	r1, r3, #28
 8006f16:	d42c      	bmi.n	8006f72 <__swsetup_r+0x82>
 8006f18:	06dd      	lsls	r5, r3, #27
 8006f1a:	d411      	bmi.n	8006f40 <__swsetup_r+0x50>
 8006f1c:	2309      	movs	r3, #9
 8006f1e:	6033      	str	r3, [r6, #0]
 8006f20:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006f24:	81a3      	strh	r3, [r4, #12]
 8006f26:	f04f 30ff 	mov.w	r0, #4294967295
 8006f2a:	e03e      	b.n	8006faa <__swsetup_r+0xba>
 8006f2c:	4b25      	ldr	r3, [pc, #148]	; (8006fc4 <__swsetup_r+0xd4>)
 8006f2e:	429c      	cmp	r4, r3
 8006f30:	d101      	bne.n	8006f36 <__swsetup_r+0x46>
 8006f32:	68ac      	ldr	r4, [r5, #8]
 8006f34:	e7eb      	b.n	8006f0e <__swsetup_r+0x1e>
 8006f36:	4b24      	ldr	r3, [pc, #144]	; (8006fc8 <__swsetup_r+0xd8>)
 8006f38:	429c      	cmp	r4, r3
 8006f3a:	bf08      	it	eq
 8006f3c:	68ec      	ldreq	r4, [r5, #12]
 8006f3e:	e7e6      	b.n	8006f0e <__swsetup_r+0x1e>
 8006f40:	0758      	lsls	r0, r3, #29
 8006f42:	d512      	bpl.n	8006f6a <__swsetup_r+0x7a>
 8006f44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f46:	b141      	cbz	r1, 8006f5a <__swsetup_r+0x6a>
 8006f48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f4c:	4299      	cmp	r1, r3
 8006f4e:	d002      	beq.n	8006f56 <__swsetup_r+0x66>
 8006f50:	4630      	mov	r0, r6
 8006f52:	f000 f991 	bl	8007278 <_free_r>
 8006f56:	2300      	movs	r3, #0
 8006f58:	6363      	str	r3, [r4, #52]	; 0x34
 8006f5a:	89a3      	ldrh	r3, [r4, #12]
 8006f5c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006f60:	81a3      	strh	r3, [r4, #12]
 8006f62:	2300      	movs	r3, #0
 8006f64:	6063      	str	r3, [r4, #4]
 8006f66:	6923      	ldr	r3, [r4, #16]
 8006f68:	6023      	str	r3, [r4, #0]
 8006f6a:	89a3      	ldrh	r3, [r4, #12]
 8006f6c:	f043 0308 	orr.w	r3, r3, #8
 8006f70:	81a3      	strh	r3, [r4, #12]
 8006f72:	6923      	ldr	r3, [r4, #16]
 8006f74:	b94b      	cbnz	r3, 8006f8a <__swsetup_r+0x9a>
 8006f76:	89a3      	ldrh	r3, [r4, #12]
 8006f78:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006f7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f80:	d003      	beq.n	8006f8a <__swsetup_r+0x9a>
 8006f82:	4621      	mov	r1, r4
 8006f84:	4630      	mov	r0, r6
 8006f86:	f000 f92b 	bl	80071e0 <__smakebuf_r>
 8006f8a:	89a0      	ldrh	r0, [r4, #12]
 8006f8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f90:	f010 0301 	ands.w	r3, r0, #1
 8006f94:	d00a      	beq.n	8006fac <__swsetup_r+0xbc>
 8006f96:	2300      	movs	r3, #0
 8006f98:	60a3      	str	r3, [r4, #8]
 8006f9a:	6963      	ldr	r3, [r4, #20]
 8006f9c:	425b      	negs	r3, r3
 8006f9e:	61a3      	str	r3, [r4, #24]
 8006fa0:	6923      	ldr	r3, [r4, #16]
 8006fa2:	b943      	cbnz	r3, 8006fb6 <__swsetup_r+0xc6>
 8006fa4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006fa8:	d1ba      	bne.n	8006f20 <__swsetup_r+0x30>
 8006faa:	bd70      	pop	{r4, r5, r6, pc}
 8006fac:	0781      	lsls	r1, r0, #30
 8006fae:	bf58      	it	pl
 8006fb0:	6963      	ldrpl	r3, [r4, #20]
 8006fb2:	60a3      	str	r3, [r4, #8]
 8006fb4:	e7f4      	b.n	8006fa0 <__swsetup_r+0xb0>
 8006fb6:	2000      	movs	r0, #0
 8006fb8:	e7f7      	b.n	8006faa <__swsetup_r+0xba>
 8006fba:	bf00      	nop
 8006fbc:	20000018 	.word	0x20000018
 8006fc0:	08008630 	.word	0x08008630
 8006fc4:	08008650 	.word	0x08008650
 8006fc8:	08008610 	.word	0x08008610

08006fcc <_close_r>:
 8006fcc:	b538      	push	{r3, r4, r5, lr}
 8006fce:	4d06      	ldr	r5, [pc, #24]	; (8006fe8 <_close_r+0x1c>)
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	4604      	mov	r4, r0
 8006fd4:	4608      	mov	r0, r1
 8006fd6:	602b      	str	r3, [r5, #0]
 8006fd8:	f7fa fa37 	bl	800144a <_close>
 8006fdc:	1c43      	adds	r3, r0, #1
 8006fde:	d102      	bne.n	8006fe6 <_close_r+0x1a>
 8006fe0:	682b      	ldr	r3, [r5, #0]
 8006fe2:	b103      	cbz	r3, 8006fe6 <_close_r+0x1a>
 8006fe4:	6023      	str	r3, [r4, #0]
 8006fe6:	bd38      	pop	{r3, r4, r5, pc}
 8006fe8:	200053d8 	.word	0x200053d8

08006fec <__sflush_r>:
 8006fec:	898a      	ldrh	r2, [r1, #12]
 8006fee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ff2:	4605      	mov	r5, r0
 8006ff4:	0710      	lsls	r0, r2, #28
 8006ff6:	460c      	mov	r4, r1
 8006ff8:	d458      	bmi.n	80070ac <__sflush_r+0xc0>
 8006ffa:	684b      	ldr	r3, [r1, #4]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	dc05      	bgt.n	800700c <__sflush_r+0x20>
 8007000:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007002:	2b00      	cmp	r3, #0
 8007004:	dc02      	bgt.n	800700c <__sflush_r+0x20>
 8007006:	2000      	movs	r0, #0
 8007008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800700c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800700e:	2e00      	cmp	r6, #0
 8007010:	d0f9      	beq.n	8007006 <__sflush_r+0x1a>
 8007012:	2300      	movs	r3, #0
 8007014:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007018:	682f      	ldr	r7, [r5, #0]
 800701a:	602b      	str	r3, [r5, #0]
 800701c:	d032      	beq.n	8007084 <__sflush_r+0x98>
 800701e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007020:	89a3      	ldrh	r3, [r4, #12]
 8007022:	075a      	lsls	r2, r3, #29
 8007024:	d505      	bpl.n	8007032 <__sflush_r+0x46>
 8007026:	6863      	ldr	r3, [r4, #4]
 8007028:	1ac0      	subs	r0, r0, r3
 800702a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800702c:	b10b      	cbz	r3, 8007032 <__sflush_r+0x46>
 800702e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007030:	1ac0      	subs	r0, r0, r3
 8007032:	2300      	movs	r3, #0
 8007034:	4602      	mov	r2, r0
 8007036:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007038:	6a21      	ldr	r1, [r4, #32]
 800703a:	4628      	mov	r0, r5
 800703c:	47b0      	blx	r6
 800703e:	1c43      	adds	r3, r0, #1
 8007040:	89a3      	ldrh	r3, [r4, #12]
 8007042:	d106      	bne.n	8007052 <__sflush_r+0x66>
 8007044:	6829      	ldr	r1, [r5, #0]
 8007046:	291d      	cmp	r1, #29
 8007048:	d82c      	bhi.n	80070a4 <__sflush_r+0xb8>
 800704a:	4a2a      	ldr	r2, [pc, #168]	; (80070f4 <__sflush_r+0x108>)
 800704c:	40ca      	lsrs	r2, r1
 800704e:	07d6      	lsls	r6, r2, #31
 8007050:	d528      	bpl.n	80070a4 <__sflush_r+0xb8>
 8007052:	2200      	movs	r2, #0
 8007054:	6062      	str	r2, [r4, #4]
 8007056:	04d9      	lsls	r1, r3, #19
 8007058:	6922      	ldr	r2, [r4, #16]
 800705a:	6022      	str	r2, [r4, #0]
 800705c:	d504      	bpl.n	8007068 <__sflush_r+0x7c>
 800705e:	1c42      	adds	r2, r0, #1
 8007060:	d101      	bne.n	8007066 <__sflush_r+0x7a>
 8007062:	682b      	ldr	r3, [r5, #0]
 8007064:	b903      	cbnz	r3, 8007068 <__sflush_r+0x7c>
 8007066:	6560      	str	r0, [r4, #84]	; 0x54
 8007068:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800706a:	602f      	str	r7, [r5, #0]
 800706c:	2900      	cmp	r1, #0
 800706e:	d0ca      	beq.n	8007006 <__sflush_r+0x1a>
 8007070:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007074:	4299      	cmp	r1, r3
 8007076:	d002      	beq.n	800707e <__sflush_r+0x92>
 8007078:	4628      	mov	r0, r5
 800707a:	f000 f8fd 	bl	8007278 <_free_r>
 800707e:	2000      	movs	r0, #0
 8007080:	6360      	str	r0, [r4, #52]	; 0x34
 8007082:	e7c1      	b.n	8007008 <__sflush_r+0x1c>
 8007084:	6a21      	ldr	r1, [r4, #32]
 8007086:	2301      	movs	r3, #1
 8007088:	4628      	mov	r0, r5
 800708a:	47b0      	blx	r6
 800708c:	1c41      	adds	r1, r0, #1
 800708e:	d1c7      	bne.n	8007020 <__sflush_r+0x34>
 8007090:	682b      	ldr	r3, [r5, #0]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d0c4      	beq.n	8007020 <__sflush_r+0x34>
 8007096:	2b1d      	cmp	r3, #29
 8007098:	d001      	beq.n	800709e <__sflush_r+0xb2>
 800709a:	2b16      	cmp	r3, #22
 800709c:	d101      	bne.n	80070a2 <__sflush_r+0xb6>
 800709e:	602f      	str	r7, [r5, #0]
 80070a0:	e7b1      	b.n	8007006 <__sflush_r+0x1a>
 80070a2:	89a3      	ldrh	r3, [r4, #12]
 80070a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070a8:	81a3      	strh	r3, [r4, #12]
 80070aa:	e7ad      	b.n	8007008 <__sflush_r+0x1c>
 80070ac:	690f      	ldr	r7, [r1, #16]
 80070ae:	2f00      	cmp	r7, #0
 80070b0:	d0a9      	beq.n	8007006 <__sflush_r+0x1a>
 80070b2:	0793      	lsls	r3, r2, #30
 80070b4:	680e      	ldr	r6, [r1, #0]
 80070b6:	bf08      	it	eq
 80070b8:	694b      	ldreq	r3, [r1, #20]
 80070ba:	600f      	str	r7, [r1, #0]
 80070bc:	bf18      	it	ne
 80070be:	2300      	movne	r3, #0
 80070c0:	eba6 0807 	sub.w	r8, r6, r7
 80070c4:	608b      	str	r3, [r1, #8]
 80070c6:	f1b8 0f00 	cmp.w	r8, #0
 80070ca:	dd9c      	ble.n	8007006 <__sflush_r+0x1a>
 80070cc:	6a21      	ldr	r1, [r4, #32]
 80070ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80070d0:	4643      	mov	r3, r8
 80070d2:	463a      	mov	r2, r7
 80070d4:	4628      	mov	r0, r5
 80070d6:	47b0      	blx	r6
 80070d8:	2800      	cmp	r0, #0
 80070da:	dc06      	bgt.n	80070ea <__sflush_r+0xfe>
 80070dc:	89a3      	ldrh	r3, [r4, #12]
 80070de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070e2:	81a3      	strh	r3, [r4, #12]
 80070e4:	f04f 30ff 	mov.w	r0, #4294967295
 80070e8:	e78e      	b.n	8007008 <__sflush_r+0x1c>
 80070ea:	4407      	add	r7, r0
 80070ec:	eba8 0800 	sub.w	r8, r8, r0
 80070f0:	e7e9      	b.n	80070c6 <__sflush_r+0xda>
 80070f2:	bf00      	nop
 80070f4:	20400001 	.word	0x20400001

080070f8 <_fflush_r>:
 80070f8:	b538      	push	{r3, r4, r5, lr}
 80070fa:	690b      	ldr	r3, [r1, #16]
 80070fc:	4605      	mov	r5, r0
 80070fe:	460c      	mov	r4, r1
 8007100:	b913      	cbnz	r3, 8007108 <_fflush_r+0x10>
 8007102:	2500      	movs	r5, #0
 8007104:	4628      	mov	r0, r5
 8007106:	bd38      	pop	{r3, r4, r5, pc}
 8007108:	b118      	cbz	r0, 8007112 <_fflush_r+0x1a>
 800710a:	6983      	ldr	r3, [r0, #24]
 800710c:	b90b      	cbnz	r3, 8007112 <_fflush_r+0x1a>
 800710e:	f7ff fb9b 	bl	8006848 <__sinit>
 8007112:	4b14      	ldr	r3, [pc, #80]	; (8007164 <_fflush_r+0x6c>)
 8007114:	429c      	cmp	r4, r3
 8007116:	d11b      	bne.n	8007150 <_fflush_r+0x58>
 8007118:	686c      	ldr	r4, [r5, #4]
 800711a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d0ef      	beq.n	8007102 <_fflush_r+0xa>
 8007122:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007124:	07d0      	lsls	r0, r2, #31
 8007126:	d404      	bmi.n	8007132 <_fflush_r+0x3a>
 8007128:	0599      	lsls	r1, r3, #22
 800712a:	d402      	bmi.n	8007132 <_fflush_r+0x3a>
 800712c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800712e:	f7ff fc4e 	bl	80069ce <__retarget_lock_acquire_recursive>
 8007132:	4628      	mov	r0, r5
 8007134:	4621      	mov	r1, r4
 8007136:	f7ff ff59 	bl	8006fec <__sflush_r>
 800713a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800713c:	07da      	lsls	r2, r3, #31
 800713e:	4605      	mov	r5, r0
 8007140:	d4e0      	bmi.n	8007104 <_fflush_r+0xc>
 8007142:	89a3      	ldrh	r3, [r4, #12]
 8007144:	059b      	lsls	r3, r3, #22
 8007146:	d4dd      	bmi.n	8007104 <_fflush_r+0xc>
 8007148:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800714a:	f7ff fc41 	bl	80069d0 <__retarget_lock_release_recursive>
 800714e:	e7d9      	b.n	8007104 <_fflush_r+0xc>
 8007150:	4b05      	ldr	r3, [pc, #20]	; (8007168 <_fflush_r+0x70>)
 8007152:	429c      	cmp	r4, r3
 8007154:	d101      	bne.n	800715a <_fflush_r+0x62>
 8007156:	68ac      	ldr	r4, [r5, #8]
 8007158:	e7df      	b.n	800711a <_fflush_r+0x22>
 800715a:	4b04      	ldr	r3, [pc, #16]	; (800716c <_fflush_r+0x74>)
 800715c:	429c      	cmp	r4, r3
 800715e:	bf08      	it	eq
 8007160:	68ec      	ldreq	r4, [r5, #12]
 8007162:	e7da      	b.n	800711a <_fflush_r+0x22>
 8007164:	08008630 	.word	0x08008630
 8007168:	08008650 	.word	0x08008650
 800716c:	08008610 	.word	0x08008610

08007170 <_lseek_r>:
 8007170:	b538      	push	{r3, r4, r5, lr}
 8007172:	4d07      	ldr	r5, [pc, #28]	; (8007190 <_lseek_r+0x20>)
 8007174:	4604      	mov	r4, r0
 8007176:	4608      	mov	r0, r1
 8007178:	4611      	mov	r1, r2
 800717a:	2200      	movs	r2, #0
 800717c:	602a      	str	r2, [r5, #0]
 800717e:	461a      	mov	r2, r3
 8007180:	f7fa f98a 	bl	8001498 <_lseek>
 8007184:	1c43      	adds	r3, r0, #1
 8007186:	d102      	bne.n	800718e <_lseek_r+0x1e>
 8007188:	682b      	ldr	r3, [r5, #0]
 800718a:	b103      	cbz	r3, 800718e <_lseek_r+0x1e>
 800718c:	6023      	str	r3, [r4, #0]
 800718e:	bd38      	pop	{r3, r4, r5, pc}
 8007190:	200053d8 	.word	0x200053d8

08007194 <__swhatbuf_r>:
 8007194:	b570      	push	{r4, r5, r6, lr}
 8007196:	460e      	mov	r6, r1
 8007198:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800719c:	2900      	cmp	r1, #0
 800719e:	b096      	sub	sp, #88	; 0x58
 80071a0:	4614      	mov	r4, r2
 80071a2:	461d      	mov	r5, r3
 80071a4:	da08      	bge.n	80071b8 <__swhatbuf_r+0x24>
 80071a6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80071aa:	2200      	movs	r2, #0
 80071ac:	602a      	str	r2, [r5, #0]
 80071ae:	061a      	lsls	r2, r3, #24
 80071b0:	d410      	bmi.n	80071d4 <__swhatbuf_r+0x40>
 80071b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80071b6:	e00e      	b.n	80071d6 <__swhatbuf_r+0x42>
 80071b8:	466a      	mov	r2, sp
 80071ba:	f000 fd05 	bl	8007bc8 <_fstat_r>
 80071be:	2800      	cmp	r0, #0
 80071c0:	dbf1      	blt.n	80071a6 <__swhatbuf_r+0x12>
 80071c2:	9a01      	ldr	r2, [sp, #4]
 80071c4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80071c8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80071cc:	425a      	negs	r2, r3
 80071ce:	415a      	adcs	r2, r3
 80071d0:	602a      	str	r2, [r5, #0]
 80071d2:	e7ee      	b.n	80071b2 <__swhatbuf_r+0x1e>
 80071d4:	2340      	movs	r3, #64	; 0x40
 80071d6:	2000      	movs	r0, #0
 80071d8:	6023      	str	r3, [r4, #0]
 80071da:	b016      	add	sp, #88	; 0x58
 80071dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080071e0 <__smakebuf_r>:
 80071e0:	898b      	ldrh	r3, [r1, #12]
 80071e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80071e4:	079d      	lsls	r5, r3, #30
 80071e6:	4606      	mov	r6, r0
 80071e8:	460c      	mov	r4, r1
 80071ea:	d507      	bpl.n	80071fc <__smakebuf_r+0x1c>
 80071ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80071f0:	6023      	str	r3, [r4, #0]
 80071f2:	6123      	str	r3, [r4, #16]
 80071f4:	2301      	movs	r3, #1
 80071f6:	6163      	str	r3, [r4, #20]
 80071f8:	b002      	add	sp, #8
 80071fa:	bd70      	pop	{r4, r5, r6, pc}
 80071fc:	ab01      	add	r3, sp, #4
 80071fe:	466a      	mov	r2, sp
 8007200:	f7ff ffc8 	bl	8007194 <__swhatbuf_r>
 8007204:	9900      	ldr	r1, [sp, #0]
 8007206:	4605      	mov	r5, r0
 8007208:	4630      	mov	r0, r6
 800720a:	f7ff fc19 	bl	8006a40 <_malloc_r>
 800720e:	b948      	cbnz	r0, 8007224 <__smakebuf_r+0x44>
 8007210:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007214:	059a      	lsls	r2, r3, #22
 8007216:	d4ef      	bmi.n	80071f8 <__smakebuf_r+0x18>
 8007218:	f023 0303 	bic.w	r3, r3, #3
 800721c:	f043 0302 	orr.w	r3, r3, #2
 8007220:	81a3      	strh	r3, [r4, #12]
 8007222:	e7e3      	b.n	80071ec <__smakebuf_r+0xc>
 8007224:	4b0d      	ldr	r3, [pc, #52]	; (800725c <__smakebuf_r+0x7c>)
 8007226:	62b3      	str	r3, [r6, #40]	; 0x28
 8007228:	89a3      	ldrh	r3, [r4, #12]
 800722a:	6020      	str	r0, [r4, #0]
 800722c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007230:	81a3      	strh	r3, [r4, #12]
 8007232:	9b00      	ldr	r3, [sp, #0]
 8007234:	6163      	str	r3, [r4, #20]
 8007236:	9b01      	ldr	r3, [sp, #4]
 8007238:	6120      	str	r0, [r4, #16]
 800723a:	b15b      	cbz	r3, 8007254 <__smakebuf_r+0x74>
 800723c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007240:	4630      	mov	r0, r6
 8007242:	f000 fcd3 	bl	8007bec <_isatty_r>
 8007246:	b128      	cbz	r0, 8007254 <__smakebuf_r+0x74>
 8007248:	89a3      	ldrh	r3, [r4, #12]
 800724a:	f023 0303 	bic.w	r3, r3, #3
 800724e:	f043 0301 	orr.w	r3, r3, #1
 8007252:	81a3      	strh	r3, [r4, #12]
 8007254:	89a0      	ldrh	r0, [r4, #12]
 8007256:	4305      	orrs	r5, r0
 8007258:	81a5      	strh	r5, [r4, #12]
 800725a:	e7cd      	b.n	80071f8 <__smakebuf_r+0x18>
 800725c:	080067e1 	.word	0x080067e1

08007260 <__malloc_lock>:
 8007260:	4801      	ldr	r0, [pc, #4]	; (8007268 <__malloc_lock+0x8>)
 8007262:	f7ff bbb4 	b.w	80069ce <__retarget_lock_acquire_recursive>
 8007266:	bf00      	nop
 8007268:	200053cc 	.word	0x200053cc

0800726c <__malloc_unlock>:
 800726c:	4801      	ldr	r0, [pc, #4]	; (8007274 <__malloc_unlock+0x8>)
 800726e:	f7ff bbaf 	b.w	80069d0 <__retarget_lock_release_recursive>
 8007272:	bf00      	nop
 8007274:	200053cc 	.word	0x200053cc

08007278 <_free_r>:
 8007278:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800727a:	2900      	cmp	r1, #0
 800727c:	d044      	beq.n	8007308 <_free_r+0x90>
 800727e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007282:	9001      	str	r0, [sp, #4]
 8007284:	2b00      	cmp	r3, #0
 8007286:	f1a1 0404 	sub.w	r4, r1, #4
 800728a:	bfb8      	it	lt
 800728c:	18e4      	addlt	r4, r4, r3
 800728e:	f7ff ffe7 	bl	8007260 <__malloc_lock>
 8007292:	4a1e      	ldr	r2, [pc, #120]	; (800730c <_free_r+0x94>)
 8007294:	9801      	ldr	r0, [sp, #4]
 8007296:	6813      	ldr	r3, [r2, #0]
 8007298:	b933      	cbnz	r3, 80072a8 <_free_r+0x30>
 800729a:	6063      	str	r3, [r4, #4]
 800729c:	6014      	str	r4, [r2, #0]
 800729e:	b003      	add	sp, #12
 80072a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80072a4:	f7ff bfe2 	b.w	800726c <__malloc_unlock>
 80072a8:	42a3      	cmp	r3, r4
 80072aa:	d908      	bls.n	80072be <_free_r+0x46>
 80072ac:	6825      	ldr	r5, [r4, #0]
 80072ae:	1961      	adds	r1, r4, r5
 80072b0:	428b      	cmp	r3, r1
 80072b2:	bf01      	itttt	eq
 80072b4:	6819      	ldreq	r1, [r3, #0]
 80072b6:	685b      	ldreq	r3, [r3, #4]
 80072b8:	1949      	addeq	r1, r1, r5
 80072ba:	6021      	streq	r1, [r4, #0]
 80072bc:	e7ed      	b.n	800729a <_free_r+0x22>
 80072be:	461a      	mov	r2, r3
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	b10b      	cbz	r3, 80072c8 <_free_r+0x50>
 80072c4:	42a3      	cmp	r3, r4
 80072c6:	d9fa      	bls.n	80072be <_free_r+0x46>
 80072c8:	6811      	ldr	r1, [r2, #0]
 80072ca:	1855      	adds	r5, r2, r1
 80072cc:	42a5      	cmp	r5, r4
 80072ce:	d10b      	bne.n	80072e8 <_free_r+0x70>
 80072d0:	6824      	ldr	r4, [r4, #0]
 80072d2:	4421      	add	r1, r4
 80072d4:	1854      	adds	r4, r2, r1
 80072d6:	42a3      	cmp	r3, r4
 80072d8:	6011      	str	r1, [r2, #0]
 80072da:	d1e0      	bne.n	800729e <_free_r+0x26>
 80072dc:	681c      	ldr	r4, [r3, #0]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	6053      	str	r3, [r2, #4]
 80072e2:	4421      	add	r1, r4
 80072e4:	6011      	str	r1, [r2, #0]
 80072e6:	e7da      	b.n	800729e <_free_r+0x26>
 80072e8:	d902      	bls.n	80072f0 <_free_r+0x78>
 80072ea:	230c      	movs	r3, #12
 80072ec:	6003      	str	r3, [r0, #0]
 80072ee:	e7d6      	b.n	800729e <_free_r+0x26>
 80072f0:	6825      	ldr	r5, [r4, #0]
 80072f2:	1961      	adds	r1, r4, r5
 80072f4:	428b      	cmp	r3, r1
 80072f6:	bf04      	itt	eq
 80072f8:	6819      	ldreq	r1, [r3, #0]
 80072fa:	685b      	ldreq	r3, [r3, #4]
 80072fc:	6063      	str	r3, [r4, #4]
 80072fe:	bf04      	itt	eq
 8007300:	1949      	addeq	r1, r1, r5
 8007302:	6021      	streq	r1, [r4, #0]
 8007304:	6054      	str	r4, [r2, #4]
 8007306:	e7ca      	b.n	800729e <_free_r+0x26>
 8007308:	b003      	add	sp, #12
 800730a:	bd30      	pop	{r4, r5, pc}
 800730c:	200053d0 	.word	0x200053d0

08007310 <__ssputs_r>:
 8007310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007314:	688e      	ldr	r6, [r1, #8]
 8007316:	429e      	cmp	r6, r3
 8007318:	4682      	mov	sl, r0
 800731a:	460c      	mov	r4, r1
 800731c:	4690      	mov	r8, r2
 800731e:	461f      	mov	r7, r3
 8007320:	d838      	bhi.n	8007394 <__ssputs_r+0x84>
 8007322:	898a      	ldrh	r2, [r1, #12]
 8007324:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007328:	d032      	beq.n	8007390 <__ssputs_r+0x80>
 800732a:	6825      	ldr	r5, [r4, #0]
 800732c:	6909      	ldr	r1, [r1, #16]
 800732e:	eba5 0901 	sub.w	r9, r5, r1
 8007332:	6965      	ldr	r5, [r4, #20]
 8007334:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007338:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800733c:	3301      	adds	r3, #1
 800733e:	444b      	add	r3, r9
 8007340:	106d      	asrs	r5, r5, #1
 8007342:	429d      	cmp	r5, r3
 8007344:	bf38      	it	cc
 8007346:	461d      	movcc	r5, r3
 8007348:	0553      	lsls	r3, r2, #21
 800734a:	d531      	bpl.n	80073b0 <__ssputs_r+0xa0>
 800734c:	4629      	mov	r1, r5
 800734e:	f7ff fb77 	bl	8006a40 <_malloc_r>
 8007352:	4606      	mov	r6, r0
 8007354:	b950      	cbnz	r0, 800736c <__ssputs_r+0x5c>
 8007356:	230c      	movs	r3, #12
 8007358:	f8ca 3000 	str.w	r3, [sl]
 800735c:	89a3      	ldrh	r3, [r4, #12]
 800735e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007362:	81a3      	strh	r3, [r4, #12]
 8007364:	f04f 30ff 	mov.w	r0, #4294967295
 8007368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800736c:	6921      	ldr	r1, [r4, #16]
 800736e:	464a      	mov	r2, r9
 8007370:	f7ff fb2f 	bl	80069d2 <memcpy>
 8007374:	89a3      	ldrh	r3, [r4, #12]
 8007376:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800737a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800737e:	81a3      	strh	r3, [r4, #12]
 8007380:	6126      	str	r6, [r4, #16]
 8007382:	6165      	str	r5, [r4, #20]
 8007384:	444e      	add	r6, r9
 8007386:	eba5 0509 	sub.w	r5, r5, r9
 800738a:	6026      	str	r6, [r4, #0]
 800738c:	60a5      	str	r5, [r4, #8]
 800738e:	463e      	mov	r6, r7
 8007390:	42be      	cmp	r6, r7
 8007392:	d900      	bls.n	8007396 <__ssputs_r+0x86>
 8007394:	463e      	mov	r6, r7
 8007396:	6820      	ldr	r0, [r4, #0]
 8007398:	4632      	mov	r2, r6
 800739a:	4641      	mov	r1, r8
 800739c:	f000 fc36 	bl	8007c0c <memmove>
 80073a0:	68a3      	ldr	r3, [r4, #8]
 80073a2:	1b9b      	subs	r3, r3, r6
 80073a4:	60a3      	str	r3, [r4, #8]
 80073a6:	6823      	ldr	r3, [r4, #0]
 80073a8:	4433      	add	r3, r6
 80073aa:	6023      	str	r3, [r4, #0]
 80073ac:	2000      	movs	r0, #0
 80073ae:	e7db      	b.n	8007368 <__ssputs_r+0x58>
 80073b0:	462a      	mov	r2, r5
 80073b2:	f000 fc45 	bl	8007c40 <_realloc_r>
 80073b6:	4606      	mov	r6, r0
 80073b8:	2800      	cmp	r0, #0
 80073ba:	d1e1      	bne.n	8007380 <__ssputs_r+0x70>
 80073bc:	6921      	ldr	r1, [r4, #16]
 80073be:	4650      	mov	r0, sl
 80073c0:	f7ff ff5a 	bl	8007278 <_free_r>
 80073c4:	e7c7      	b.n	8007356 <__ssputs_r+0x46>
	...

080073c8 <_svfiprintf_r>:
 80073c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073cc:	4698      	mov	r8, r3
 80073ce:	898b      	ldrh	r3, [r1, #12]
 80073d0:	061b      	lsls	r3, r3, #24
 80073d2:	b09d      	sub	sp, #116	; 0x74
 80073d4:	4607      	mov	r7, r0
 80073d6:	460d      	mov	r5, r1
 80073d8:	4614      	mov	r4, r2
 80073da:	d50e      	bpl.n	80073fa <_svfiprintf_r+0x32>
 80073dc:	690b      	ldr	r3, [r1, #16]
 80073de:	b963      	cbnz	r3, 80073fa <_svfiprintf_r+0x32>
 80073e0:	2140      	movs	r1, #64	; 0x40
 80073e2:	f7ff fb2d 	bl	8006a40 <_malloc_r>
 80073e6:	6028      	str	r0, [r5, #0]
 80073e8:	6128      	str	r0, [r5, #16]
 80073ea:	b920      	cbnz	r0, 80073f6 <_svfiprintf_r+0x2e>
 80073ec:	230c      	movs	r3, #12
 80073ee:	603b      	str	r3, [r7, #0]
 80073f0:	f04f 30ff 	mov.w	r0, #4294967295
 80073f4:	e0d1      	b.n	800759a <_svfiprintf_r+0x1d2>
 80073f6:	2340      	movs	r3, #64	; 0x40
 80073f8:	616b      	str	r3, [r5, #20]
 80073fa:	2300      	movs	r3, #0
 80073fc:	9309      	str	r3, [sp, #36]	; 0x24
 80073fe:	2320      	movs	r3, #32
 8007400:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007404:	f8cd 800c 	str.w	r8, [sp, #12]
 8007408:	2330      	movs	r3, #48	; 0x30
 800740a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80075b4 <_svfiprintf_r+0x1ec>
 800740e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007412:	f04f 0901 	mov.w	r9, #1
 8007416:	4623      	mov	r3, r4
 8007418:	469a      	mov	sl, r3
 800741a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800741e:	b10a      	cbz	r2, 8007424 <_svfiprintf_r+0x5c>
 8007420:	2a25      	cmp	r2, #37	; 0x25
 8007422:	d1f9      	bne.n	8007418 <_svfiprintf_r+0x50>
 8007424:	ebba 0b04 	subs.w	fp, sl, r4
 8007428:	d00b      	beq.n	8007442 <_svfiprintf_r+0x7a>
 800742a:	465b      	mov	r3, fp
 800742c:	4622      	mov	r2, r4
 800742e:	4629      	mov	r1, r5
 8007430:	4638      	mov	r0, r7
 8007432:	f7ff ff6d 	bl	8007310 <__ssputs_r>
 8007436:	3001      	adds	r0, #1
 8007438:	f000 80aa 	beq.w	8007590 <_svfiprintf_r+0x1c8>
 800743c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800743e:	445a      	add	r2, fp
 8007440:	9209      	str	r2, [sp, #36]	; 0x24
 8007442:	f89a 3000 	ldrb.w	r3, [sl]
 8007446:	2b00      	cmp	r3, #0
 8007448:	f000 80a2 	beq.w	8007590 <_svfiprintf_r+0x1c8>
 800744c:	2300      	movs	r3, #0
 800744e:	f04f 32ff 	mov.w	r2, #4294967295
 8007452:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007456:	f10a 0a01 	add.w	sl, sl, #1
 800745a:	9304      	str	r3, [sp, #16]
 800745c:	9307      	str	r3, [sp, #28]
 800745e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007462:	931a      	str	r3, [sp, #104]	; 0x68
 8007464:	4654      	mov	r4, sl
 8007466:	2205      	movs	r2, #5
 8007468:	f814 1b01 	ldrb.w	r1, [r4], #1
 800746c:	4851      	ldr	r0, [pc, #324]	; (80075b4 <_svfiprintf_r+0x1ec>)
 800746e:	f7f8 feb7 	bl	80001e0 <memchr>
 8007472:	9a04      	ldr	r2, [sp, #16]
 8007474:	b9d8      	cbnz	r0, 80074ae <_svfiprintf_r+0xe6>
 8007476:	06d0      	lsls	r0, r2, #27
 8007478:	bf44      	itt	mi
 800747a:	2320      	movmi	r3, #32
 800747c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007480:	0711      	lsls	r1, r2, #28
 8007482:	bf44      	itt	mi
 8007484:	232b      	movmi	r3, #43	; 0x2b
 8007486:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800748a:	f89a 3000 	ldrb.w	r3, [sl]
 800748e:	2b2a      	cmp	r3, #42	; 0x2a
 8007490:	d015      	beq.n	80074be <_svfiprintf_r+0xf6>
 8007492:	9a07      	ldr	r2, [sp, #28]
 8007494:	4654      	mov	r4, sl
 8007496:	2000      	movs	r0, #0
 8007498:	f04f 0c0a 	mov.w	ip, #10
 800749c:	4621      	mov	r1, r4
 800749e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074a2:	3b30      	subs	r3, #48	; 0x30
 80074a4:	2b09      	cmp	r3, #9
 80074a6:	d94e      	bls.n	8007546 <_svfiprintf_r+0x17e>
 80074a8:	b1b0      	cbz	r0, 80074d8 <_svfiprintf_r+0x110>
 80074aa:	9207      	str	r2, [sp, #28]
 80074ac:	e014      	b.n	80074d8 <_svfiprintf_r+0x110>
 80074ae:	eba0 0308 	sub.w	r3, r0, r8
 80074b2:	fa09 f303 	lsl.w	r3, r9, r3
 80074b6:	4313      	orrs	r3, r2
 80074b8:	9304      	str	r3, [sp, #16]
 80074ba:	46a2      	mov	sl, r4
 80074bc:	e7d2      	b.n	8007464 <_svfiprintf_r+0x9c>
 80074be:	9b03      	ldr	r3, [sp, #12]
 80074c0:	1d19      	adds	r1, r3, #4
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	9103      	str	r1, [sp, #12]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	bfbb      	ittet	lt
 80074ca:	425b      	neglt	r3, r3
 80074cc:	f042 0202 	orrlt.w	r2, r2, #2
 80074d0:	9307      	strge	r3, [sp, #28]
 80074d2:	9307      	strlt	r3, [sp, #28]
 80074d4:	bfb8      	it	lt
 80074d6:	9204      	strlt	r2, [sp, #16]
 80074d8:	7823      	ldrb	r3, [r4, #0]
 80074da:	2b2e      	cmp	r3, #46	; 0x2e
 80074dc:	d10c      	bne.n	80074f8 <_svfiprintf_r+0x130>
 80074de:	7863      	ldrb	r3, [r4, #1]
 80074e0:	2b2a      	cmp	r3, #42	; 0x2a
 80074e2:	d135      	bne.n	8007550 <_svfiprintf_r+0x188>
 80074e4:	9b03      	ldr	r3, [sp, #12]
 80074e6:	1d1a      	adds	r2, r3, #4
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	9203      	str	r2, [sp, #12]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	bfb8      	it	lt
 80074f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80074f4:	3402      	adds	r4, #2
 80074f6:	9305      	str	r3, [sp, #20]
 80074f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80075c4 <_svfiprintf_r+0x1fc>
 80074fc:	7821      	ldrb	r1, [r4, #0]
 80074fe:	2203      	movs	r2, #3
 8007500:	4650      	mov	r0, sl
 8007502:	f7f8 fe6d 	bl	80001e0 <memchr>
 8007506:	b140      	cbz	r0, 800751a <_svfiprintf_r+0x152>
 8007508:	2340      	movs	r3, #64	; 0x40
 800750a:	eba0 000a 	sub.w	r0, r0, sl
 800750e:	fa03 f000 	lsl.w	r0, r3, r0
 8007512:	9b04      	ldr	r3, [sp, #16]
 8007514:	4303      	orrs	r3, r0
 8007516:	3401      	adds	r4, #1
 8007518:	9304      	str	r3, [sp, #16]
 800751a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800751e:	4826      	ldr	r0, [pc, #152]	; (80075b8 <_svfiprintf_r+0x1f0>)
 8007520:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007524:	2206      	movs	r2, #6
 8007526:	f7f8 fe5b 	bl	80001e0 <memchr>
 800752a:	2800      	cmp	r0, #0
 800752c:	d038      	beq.n	80075a0 <_svfiprintf_r+0x1d8>
 800752e:	4b23      	ldr	r3, [pc, #140]	; (80075bc <_svfiprintf_r+0x1f4>)
 8007530:	bb1b      	cbnz	r3, 800757a <_svfiprintf_r+0x1b2>
 8007532:	9b03      	ldr	r3, [sp, #12]
 8007534:	3307      	adds	r3, #7
 8007536:	f023 0307 	bic.w	r3, r3, #7
 800753a:	3308      	adds	r3, #8
 800753c:	9303      	str	r3, [sp, #12]
 800753e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007540:	4433      	add	r3, r6
 8007542:	9309      	str	r3, [sp, #36]	; 0x24
 8007544:	e767      	b.n	8007416 <_svfiprintf_r+0x4e>
 8007546:	fb0c 3202 	mla	r2, ip, r2, r3
 800754a:	460c      	mov	r4, r1
 800754c:	2001      	movs	r0, #1
 800754e:	e7a5      	b.n	800749c <_svfiprintf_r+0xd4>
 8007550:	2300      	movs	r3, #0
 8007552:	3401      	adds	r4, #1
 8007554:	9305      	str	r3, [sp, #20]
 8007556:	4619      	mov	r1, r3
 8007558:	f04f 0c0a 	mov.w	ip, #10
 800755c:	4620      	mov	r0, r4
 800755e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007562:	3a30      	subs	r2, #48	; 0x30
 8007564:	2a09      	cmp	r2, #9
 8007566:	d903      	bls.n	8007570 <_svfiprintf_r+0x1a8>
 8007568:	2b00      	cmp	r3, #0
 800756a:	d0c5      	beq.n	80074f8 <_svfiprintf_r+0x130>
 800756c:	9105      	str	r1, [sp, #20]
 800756e:	e7c3      	b.n	80074f8 <_svfiprintf_r+0x130>
 8007570:	fb0c 2101 	mla	r1, ip, r1, r2
 8007574:	4604      	mov	r4, r0
 8007576:	2301      	movs	r3, #1
 8007578:	e7f0      	b.n	800755c <_svfiprintf_r+0x194>
 800757a:	ab03      	add	r3, sp, #12
 800757c:	9300      	str	r3, [sp, #0]
 800757e:	462a      	mov	r2, r5
 8007580:	4b0f      	ldr	r3, [pc, #60]	; (80075c0 <_svfiprintf_r+0x1f8>)
 8007582:	a904      	add	r1, sp, #16
 8007584:	4638      	mov	r0, r7
 8007586:	f3af 8000 	nop.w
 800758a:	1c42      	adds	r2, r0, #1
 800758c:	4606      	mov	r6, r0
 800758e:	d1d6      	bne.n	800753e <_svfiprintf_r+0x176>
 8007590:	89ab      	ldrh	r3, [r5, #12]
 8007592:	065b      	lsls	r3, r3, #25
 8007594:	f53f af2c 	bmi.w	80073f0 <_svfiprintf_r+0x28>
 8007598:	9809      	ldr	r0, [sp, #36]	; 0x24
 800759a:	b01d      	add	sp, #116	; 0x74
 800759c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075a0:	ab03      	add	r3, sp, #12
 80075a2:	9300      	str	r3, [sp, #0]
 80075a4:	462a      	mov	r2, r5
 80075a6:	4b06      	ldr	r3, [pc, #24]	; (80075c0 <_svfiprintf_r+0x1f8>)
 80075a8:	a904      	add	r1, sp, #16
 80075aa:	4638      	mov	r0, r7
 80075ac:	f000 f9d4 	bl	8007958 <_printf_i>
 80075b0:	e7eb      	b.n	800758a <_svfiprintf_r+0x1c2>
 80075b2:	bf00      	nop
 80075b4:	08008674 	.word	0x08008674
 80075b8:	0800867e 	.word	0x0800867e
 80075bc:	00000000 	.word	0x00000000
 80075c0:	08007311 	.word	0x08007311
 80075c4:	0800867a 	.word	0x0800867a

080075c8 <__sfputc_r>:
 80075c8:	6893      	ldr	r3, [r2, #8]
 80075ca:	3b01      	subs	r3, #1
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	b410      	push	{r4}
 80075d0:	6093      	str	r3, [r2, #8]
 80075d2:	da08      	bge.n	80075e6 <__sfputc_r+0x1e>
 80075d4:	6994      	ldr	r4, [r2, #24]
 80075d6:	42a3      	cmp	r3, r4
 80075d8:	db01      	blt.n	80075de <__sfputc_r+0x16>
 80075da:	290a      	cmp	r1, #10
 80075dc:	d103      	bne.n	80075e6 <__sfputc_r+0x1e>
 80075de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075e2:	f7ff bc21 	b.w	8006e28 <__swbuf_r>
 80075e6:	6813      	ldr	r3, [r2, #0]
 80075e8:	1c58      	adds	r0, r3, #1
 80075ea:	6010      	str	r0, [r2, #0]
 80075ec:	7019      	strb	r1, [r3, #0]
 80075ee:	4608      	mov	r0, r1
 80075f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075f4:	4770      	bx	lr

080075f6 <__sfputs_r>:
 80075f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075f8:	4606      	mov	r6, r0
 80075fa:	460f      	mov	r7, r1
 80075fc:	4614      	mov	r4, r2
 80075fe:	18d5      	adds	r5, r2, r3
 8007600:	42ac      	cmp	r4, r5
 8007602:	d101      	bne.n	8007608 <__sfputs_r+0x12>
 8007604:	2000      	movs	r0, #0
 8007606:	e007      	b.n	8007618 <__sfputs_r+0x22>
 8007608:	f814 1b01 	ldrb.w	r1, [r4], #1
 800760c:	463a      	mov	r2, r7
 800760e:	4630      	mov	r0, r6
 8007610:	f7ff ffda 	bl	80075c8 <__sfputc_r>
 8007614:	1c43      	adds	r3, r0, #1
 8007616:	d1f3      	bne.n	8007600 <__sfputs_r+0xa>
 8007618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800761c <_vfiprintf_r>:
 800761c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007620:	460d      	mov	r5, r1
 8007622:	b09d      	sub	sp, #116	; 0x74
 8007624:	4614      	mov	r4, r2
 8007626:	4698      	mov	r8, r3
 8007628:	4606      	mov	r6, r0
 800762a:	b118      	cbz	r0, 8007634 <_vfiprintf_r+0x18>
 800762c:	6983      	ldr	r3, [r0, #24]
 800762e:	b90b      	cbnz	r3, 8007634 <_vfiprintf_r+0x18>
 8007630:	f7ff f90a 	bl	8006848 <__sinit>
 8007634:	4b89      	ldr	r3, [pc, #548]	; (800785c <_vfiprintf_r+0x240>)
 8007636:	429d      	cmp	r5, r3
 8007638:	d11b      	bne.n	8007672 <_vfiprintf_r+0x56>
 800763a:	6875      	ldr	r5, [r6, #4]
 800763c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800763e:	07d9      	lsls	r1, r3, #31
 8007640:	d405      	bmi.n	800764e <_vfiprintf_r+0x32>
 8007642:	89ab      	ldrh	r3, [r5, #12]
 8007644:	059a      	lsls	r2, r3, #22
 8007646:	d402      	bmi.n	800764e <_vfiprintf_r+0x32>
 8007648:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800764a:	f7ff f9c0 	bl	80069ce <__retarget_lock_acquire_recursive>
 800764e:	89ab      	ldrh	r3, [r5, #12]
 8007650:	071b      	lsls	r3, r3, #28
 8007652:	d501      	bpl.n	8007658 <_vfiprintf_r+0x3c>
 8007654:	692b      	ldr	r3, [r5, #16]
 8007656:	b9eb      	cbnz	r3, 8007694 <_vfiprintf_r+0x78>
 8007658:	4629      	mov	r1, r5
 800765a:	4630      	mov	r0, r6
 800765c:	f7ff fc48 	bl	8006ef0 <__swsetup_r>
 8007660:	b1c0      	cbz	r0, 8007694 <_vfiprintf_r+0x78>
 8007662:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007664:	07dc      	lsls	r4, r3, #31
 8007666:	d50e      	bpl.n	8007686 <_vfiprintf_r+0x6a>
 8007668:	f04f 30ff 	mov.w	r0, #4294967295
 800766c:	b01d      	add	sp, #116	; 0x74
 800766e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007672:	4b7b      	ldr	r3, [pc, #492]	; (8007860 <_vfiprintf_r+0x244>)
 8007674:	429d      	cmp	r5, r3
 8007676:	d101      	bne.n	800767c <_vfiprintf_r+0x60>
 8007678:	68b5      	ldr	r5, [r6, #8]
 800767a:	e7df      	b.n	800763c <_vfiprintf_r+0x20>
 800767c:	4b79      	ldr	r3, [pc, #484]	; (8007864 <_vfiprintf_r+0x248>)
 800767e:	429d      	cmp	r5, r3
 8007680:	bf08      	it	eq
 8007682:	68f5      	ldreq	r5, [r6, #12]
 8007684:	e7da      	b.n	800763c <_vfiprintf_r+0x20>
 8007686:	89ab      	ldrh	r3, [r5, #12]
 8007688:	0598      	lsls	r0, r3, #22
 800768a:	d4ed      	bmi.n	8007668 <_vfiprintf_r+0x4c>
 800768c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800768e:	f7ff f99f 	bl	80069d0 <__retarget_lock_release_recursive>
 8007692:	e7e9      	b.n	8007668 <_vfiprintf_r+0x4c>
 8007694:	2300      	movs	r3, #0
 8007696:	9309      	str	r3, [sp, #36]	; 0x24
 8007698:	2320      	movs	r3, #32
 800769a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800769e:	f8cd 800c 	str.w	r8, [sp, #12]
 80076a2:	2330      	movs	r3, #48	; 0x30
 80076a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007868 <_vfiprintf_r+0x24c>
 80076a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80076ac:	f04f 0901 	mov.w	r9, #1
 80076b0:	4623      	mov	r3, r4
 80076b2:	469a      	mov	sl, r3
 80076b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076b8:	b10a      	cbz	r2, 80076be <_vfiprintf_r+0xa2>
 80076ba:	2a25      	cmp	r2, #37	; 0x25
 80076bc:	d1f9      	bne.n	80076b2 <_vfiprintf_r+0x96>
 80076be:	ebba 0b04 	subs.w	fp, sl, r4
 80076c2:	d00b      	beq.n	80076dc <_vfiprintf_r+0xc0>
 80076c4:	465b      	mov	r3, fp
 80076c6:	4622      	mov	r2, r4
 80076c8:	4629      	mov	r1, r5
 80076ca:	4630      	mov	r0, r6
 80076cc:	f7ff ff93 	bl	80075f6 <__sfputs_r>
 80076d0:	3001      	adds	r0, #1
 80076d2:	f000 80aa 	beq.w	800782a <_vfiprintf_r+0x20e>
 80076d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076d8:	445a      	add	r2, fp
 80076da:	9209      	str	r2, [sp, #36]	; 0x24
 80076dc:	f89a 3000 	ldrb.w	r3, [sl]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	f000 80a2 	beq.w	800782a <_vfiprintf_r+0x20e>
 80076e6:	2300      	movs	r3, #0
 80076e8:	f04f 32ff 	mov.w	r2, #4294967295
 80076ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80076f0:	f10a 0a01 	add.w	sl, sl, #1
 80076f4:	9304      	str	r3, [sp, #16]
 80076f6:	9307      	str	r3, [sp, #28]
 80076f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80076fc:	931a      	str	r3, [sp, #104]	; 0x68
 80076fe:	4654      	mov	r4, sl
 8007700:	2205      	movs	r2, #5
 8007702:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007706:	4858      	ldr	r0, [pc, #352]	; (8007868 <_vfiprintf_r+0x24c>)
 8007708:	f7f8 fd6a 	bl	80001e0 <memchr>
 800770c:	9a04      	ldr	r2, [sp, #16]
 800770e:	b9d8      	cbnz	r0, 8007748 <_vfiprintf_r+0x12c>
 8007710:	06d1      	lsls	r1, r2, #27
 8007712:	bf44      	itt	mi
 8007714:	2320      	movmi	r3, #32
 8007716:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800771a:	0713      	lsls	r3, r2, #28
 800771c:	bf44      	itt	mi
 800771e:	232b      	movmi	r3, #43	; 0x2b
 8007720:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007724:	f89a 3000 	ldrb.w	r3, [sl]
 8007728:	2b2a      	cmp	r3, #42	; 0x2a
 800772a:	d015      	beq.n	8007758 <_vfiprintf_r+0x13c>
 800772c:	9a07      	ldr	r2, [sp, #28]
 800772e:	4654      	mov	r4, sl
 8007730:	2000      	movs	r0, #0
 8007732:	f04f 0c0a 	mov.w	ip, #10
 8007736:	4621      	mov	r1, r4
 8007738:	f811 3b01 	ldrb.w	r3, [r1], #1
 800773c:	3b30      	subs	r3, #48	; 0x30
 800773e:	2b09      	cmp	r3, #9
 8007740:	d94e      	bls.n	80077e0 <_vfiprintf_r+0x1c4>
 8007742:	b1b0      	cbz	r0, 8007772 <_vfiprintf_r+0x156>
 8007744:	9207      	str	r2, [sp, #28]
 8007746:	e014      	b.n	8007772 <_vfiprintf_r+0x156>
 8007748:	eba0 0308 	sub.w	r3, r0, r8
 800774c:	fa09 f303 	lsl.w	r3, r9, r3
 8007750:	4313      	orrs	r3, r2
 8007752:	9304      	str	r3, [sp, #16]
 8007754:	46a2      	mov	sl, r4
 8007756:	e7d2      	b.n	80076fe <_vfiprintf_r+0xe2>
 8007758:	9b03      	ldr	r3, [sp, #12]
 800775a:	1d19      	adds	r1, r3, #4
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	9103      	str	r1, [sp, #12]
 8007760:	2b00      	cmp	r3, #0
 8007762:	bfbb      	ittet	lt
 8007764:	425b      	neglt	r3, r3
 8007766:	f042 0202 	orrlt.w	r2, r2, #2
 800776a:	9307      	strge	r3, [sp, #28]
 800776c:	9307      	strlt	r3, [sp, #28]
 800776e:	bfb8      	it	lt
 8007770:	9204      	strlt	r2, [sp, #16]
 8007772:	7823      	ldrb	r3, [r4, #0]
 8007774:	2b2e      	cmp	r3, #46	; 0x2e
 8007776:	d10c      	bne.n	8007792 <_vfiprintf_r+0x176>
 8007778:	7863      	ldrb	r3, [r4, #1]
 800777a:	2b2a      	cmp	r3, #42	; 0x2a
 800777c:	d135      	bne.n	80077ea <_vfiprintf_r+0x1ce>
 800777e:	9b03      	ldr	r3, [sp, #12]
 8007780:	1d1a      	adds	r2, r3, #4
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	9203      	str	r2, [sp, #12]
 8007786:	2b00      	cmp	r3, #0
 8007788:	bfb8      	it	lt
 800778a:	f04f 33ff 	movlt.w	r3, #4294967295
 800778e:	3402      	adds	r4, #2
 8007790:	9305      	str	r3, [sp, #20]
 8007792:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007878 <_vfiprintf_r+0x25c>
 8007796:	7821      	ldrb	r1, [r4, #0]
 8007798:	2203      	movs	r2, #3
 800779a:	4650      	mov	r0, sl
 800779c:	f7f8 fd20 	bl	80001e0 <memchr>
 80077a0:	b140      	cbz	r0, 80077b4 <_vfiprintf_r+0x198>
 80077a2:	2340      	movs	r3, #64	; 0x40
 80077a4:	eba0 000a 	sub.w	r0, r0, sl
 80077a8:	fa03 f000 	lsl.w	r0, r3, r0
 80077ac:	9b04      	ldr	r3, [sp, #16]
 80077ae:	4303      	orrs	r3, r0
 80077b0:	3401      	adds	r4, #1
 80077b2:	9304      	str	r3, [sp, #16]
 80077b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077b8:	482c      	ldr	r0, [pc, #176]	; (800786c <_vfiprintf_r+0x250>)
 80077ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80077be:	2206      	movs	r2, #6
 80077c0:	f7f8 fd0e 	bl	80001e0 <memchr>
 80077c4:	2800      	cmp	r0, #0
 80077c6:	d03f      	beq.n	8007848 <_vfiprintf_r+0x22c>
 80077c8:	4b29      	ldr	r3, [pc, #164]	; (8007870 <_vfiprintf_r+0x254>)
 80077ca:	bb1b      	cbnz	r3, 8007814 <_vfiprintf_r+0x1f8>
 80077cc:	9b03      	ldr	r3, [sp, #12]
 80077ce:	3307      	adds	r3, #7
 80077d0:	f023 0307 	bic.w	r3, r3, #7
 80077d4:	3308      	adds	r3, #8
 80077d6:	9303      	str	r3, [sp, #12]
 80077d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077da:	443b      	add	r3, r7
 80077dc:	9309      	str	r3, [sp, #36]	; 0x24
 80077de:	e767      	b.n	80076b0 <_vfiprintf_r+0x94>
 80077e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80077e4:	460c      	mov	r4, r1
 80077e6:	2001      	movs	r0, #1
 80077e8:	e7a5      	b.n	8007736 <_vfiprintf_r+0x11a>
 80077ea:	2300      	movs	r3, #0
 80077ec:	3401      	adds	r4, #1
 80077ee:	9305      	str	r3, [sp, #20]
 80077f0:	4619      	mov	r1, r3
 80077f2:	f04f 0c0a 	mov.w	ip, #10
 80077f6:	4620      	mov	r0, r4
 80077f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077fc:	3a30      	subs	r2, #48	; 0x30
 80077fe:	2a09      	cmp	r2, #9
 8007800:	d903      	bls.n	800780a <_vfiprintf_r+0x1ee>
 8007802:	2b00      	cmp	r3, #0
 8007804:	d0c5      	beq.n	8007792 <_vfiprintf_r+0x176>
 8007806:	9105      	str	r1, [sp, #20]
 8007808:	e7c3      	b.n	8007792 <_vfiprintf_r+0x176>
 800780a:	fb0c 2101 	mla	r1, ip, r1, r2
 800780e:	4604      	mov	r4, r0
 8007810:	2301      	movs	r3, #1
 8007812:	e7f0      	b.n	80077f6 <_vfiprintf_r+0x1da>
 8007814:	ab03      	add	r3, sp, #12
 8007816:	9300      	str	r3, [sp, #0]
 8007818:	462a      	mov	r2, r5
 800781a:	4b16      	ldr	r3, [pc, #88]	; (8007874 <_vfiprintf_r+0x258>)
 800781c:	a904      	add	r1, sp, #16
 800781e:	4630      	mov	r0, r6
 8007820:	f3af 8000 	nop.w
 8007824:	4607      	mov	r7, r0
 8007826:	1c78      	adds	r0, r7, #1
 8007828:	d1d6      	bne.n	80077d8 <_vfiprintf_r+0x1bc>
 800782a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800782c:	07d9      	lsls	r1, r3, #31
 800782e:	d405      	bmi.n	800783c <_vfiprintf_r+0x220>
 8007830:	89ab      	ldrh	r3, [r5, #12]
 8007832:	059a      	lsls	r2, r3, #22
 8007834:	d402      	bmi.n	800783c <_vfiprintf_r+0x220>
 8007836:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007838:	f7ff f8ca 	bl	80069d0 <__retarget_lock_release_recursive>
 800783c:	89ab      	ldrh	r3, [r5, #12]
 800783e:	065b      	lsls	r3, r3, #25
 8007840:	f53f af12 	bmi.w	8007668 <_vfiprintf_r+0x4c>
 8007844:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007846:	e711      	b.n	800766c <_vfiprintf_r+0x50>
 8007848:	ab03      	add	r3, sp, #12
 800784a:	9300      	str	r3, [sp, #0]
 800784c:	462a      	mov	r2, r5
 800784e:	4b09      	ldr	r3, [pc, #36]	; (8007874 <_vfiprintf_r+0x258>)
 8007850:	a904      	add	r1, sp, #16
 8007852:	4630      	mov	r0, r6
 8007854:	f000 f880 	bl	8007958 <_printf_i>
 8007858:	e7e4      	b.n	8007824 <_vfiprintf_r+0x208>
 800785a:	bf00      	nop
 800785c:	08008630 	.word	0x08008630
 8007860:	08008650 	.word	0x08008650
 8007864:	08008610 	.word	0x08008610
 8007868:	08008674 	.word	0x08008674
 800786c:	0800867e 	.word	0x0800867e
 8007870:	00000000 	.word	0x00000000
 8007874:	080075f7 	.word	0x080075f7
 8007878:	0800867a 	.word	0x0800867a

0800787c <_printf_common>:
 800787c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007880:	4616      	mov	r6, r2
 8007882:	4699      	mov	r9, r3
 8007884:	688a      	ldr	r2, [r1, #8]
 8007886:	690b      	ldr	r3, [r1, #16]
 8007888:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800788c:	4293      	cmp	r3, r2
 800788e:	bfb8      	it	lt
 8007890:	4613      	movlt	r3, r2
 8007892:	6033      	str	r3, [r6, #0]
 8007894:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007898:	4607      	mov	r7, r0
 800789a:	460c      	mov	r4, r1
 800789c:	b10a      	cbz	r2, 80078a2 <_printf_common+0x26>
 800789e:	3301      	adds	r3, #1
 80078a0:	6033      	str	r3, [r6, #0]
 80078a2:	6823      	ldr	r3, [r4, #0]
 80078a4:	0699      	lsls	r1, r3, #26
 80078a6:	bf42      	ittt	mi
 80078a8:	6833      	ldrmi	r3, [r6, #0]
 80078aa:	3302      	addmi	r3, #2
 80078ac:	6033      	strmi	r3, [r6, #0]
 80078ae:	6825      	ldr	r5, [r4, #0]
 80078b0:	f015 0506 	ands.w	r5, r5, #6
 80078b4:	d106      	bne.n	80078c4 <_printf_common+0x48>
 80078b6:	f104 0a19 	add.w	sl, r4, #25
 80078ba:	68e3      	ldr	r3, [r4, #12]
 80078bc:	6832      	ldr	r2, [r6, #0]
 80078be:	1a9b      	subs	r3, r3, r2
 80078c0:	42ab      	cmp	r3, r5
 80078c2:	dc26      	bgt.n	8007912 <_printf_common+0x96>
 80078c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80078c8:	1e13      	subs	r3, r2, #0
 80078ca:	6822      	ldr	r2, [r4, #0]
 80078cc:	bf18      	it	ne
 80078ce:	2301      	movne	r3, #1
 80078d0:	0692      	lsls	r2, r2, #26
 80078d2:	d42b      	bmi.n	800792c <_printf_common+0xb0>
 80078d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80078d8:	4649      	mov	r1, r9
 80078da:	4638      	mov	r0, r7
 80078dc:	47c0      	blx	r8
 80078de:	3001      	adds	r0, #1
 80078e0:	d01e      	beq.n	8007920 <_printf_common+0xa4>
 80078e2:	6823      	ldr	r3, [r4, #0]
 80078e4:	68e5      	ldr	r5, [r4, #12]
 80078e6:	6832      	ldr	r2, [r6, #0]
 80078e8:	f003 0306 	and.w	r3, r3, #6
 80078ec:	2b04      	cmp	r3, #4
 80078ee:	bf08      	it	eq
 80078f0:	1aad      	subeq	r5, r5, r2
 80078f2:	68a3      	ldr	r3, [r4, #8]
 80078f4:	6922      	ldr	r2, [r4, #16]
 80078f6:	bf0c      	ite	eq
 80078f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80078fc:	2500      	movne	r5, #0
 80078fe:	4293      	cmp	r3, r2
 8007900:	bfc4      	itt	gt
 8007902:	1a9b      	subgt	r3, r3, r2
 8007904:	18ed      	addgt	r5, r5, r3
 8007906:	2600      	movs	r6, #0
 8007908:	341a      	adds	r4, #26
 800790a:	42b5      	cmp	r5, r6
 800790c:	d11a      	bne.n	8007944 <_printf_common+0xc8>
 800790e:	2000      	movs	r0, #0
 8007910:	e008      	b.n	8007924 <_printf_common+0xa8>
 8007912:	2301      	movs	r3, #1
 8007914:	4652      	mov	r2, sl
 8007916:	4649      	mov	r1, r9
 8007918:	4638      	mov	r0, r7
 800791a:	47c0      	blx	r8
 800791c:	3001      	adds	r0, #1
 800791e:	d103      	bne.n	8007928 <_printf_common+0xac>
 8007920:	f04f 30ff 	mov.w	r0, #4294967295
 8007924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007928:	3501      	adds	r5, #1
 800792a:	e7c6      	b.n	80078ba <_printf_common+0x3e>
 800792c:	18e1      	adds	r1, r4, r3
 800792e:	1c5a      	adds	r2, r3, #1
 8007930:	2030      	movs	r0, #48	; 0x30
 8007932:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007936:	4422      	add	r2, r4
 8007938:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800793c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007940:	3302      	adds	r3, #2
 8007942:	e7c7      	b.n	80078d4 <_printf_common+0x58>
 8007944:	2301      	movs	r3, #1
 8007946:	4622      	mov	r2, r4
 8007948:	4649      	mov	r1, r9
 800794a:	4638      	mov	r0, r7
 800794c:	47c0      	blx	r8
 800794e:	3001      	adds	r0, #1
 8007950:	d0e6      	beq.n	8007920 <_printf_common+0xa4>
 8007952:	3601      	adds	r6, #1
 8007954:	e7d9      	b.n	800790a <_printf_common+0x8e>
	...

08007958 <_printf_i>:
 8007958:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800795c:	7e0f      	ldrb	r7, [r1, #24]
 800795e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007960:	2f78      	cmp	r7, #120	; 0x78
 8007962:	4691      	mov	r9, r2
 8007964:	4680      	mov	r8, r0
 8007966:	460c      	mov	r4, r1
 8007968:	469a      	mov	sl, r3
 800796a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800796e:	d807      	bhi.n	8007980 <_printf_i+0x28>
 8007970:	2f62      	cmp	r7, #98	; 0x62
 8007972:	d80a      	bhi.n	800798a <_printf_i+0x32>
 8007974:	2f00      	cmp	r7, #0
 8007976:	f000 80d8 	beq.w	8007b2a <_printf_i+0x1d2>
 800797a:	2f58      	cmp	r7, #88	; 0x58
 800797c:	f000 80a3 	beq.w	8007ac6 <_printf_i+0x16e>
 8007980:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007984:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007988:	e03a      	b.n	8007a00 <_printf_i+0xa8>
 800798a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800798e:	2b15      	cmp	r3, #21
 8007990:	d8f6      	bhi.n	8007980 <_printf_i+0x28>
 8007992:	a101      	add	r1, pc, #4	; (adr r1, 8007998 <_printf_i+0x40>)
 8007994:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007998:	080079f1 	.word	0x080079f1
 800799c:	08007a05 	.word	0x08007a05
 80079a0:	08007981 	.word	0x08007981
 80079a4:	08007981 	.word	0x08007981
 80079a8:	08007981 	.word	0x08007981
 80079ac:	08007981 	.word	0x08007981
 80079b0:	08007a05 	.word	0x08007a05
 80079b4:	08007981 	.word	0x08007981
 80079b8:	08007981 	.word	0x08007981
 80079bc:	08007981 	.word	0x08007981
 80079c0:	08007981 	.word	0x08007981
 80079c4:	08007b11 	.word	0x08007b11
 80079c8:	08007a35 	.word	0x08007a35
 80079cc:	08007af3 	.word	0x08007af3
 80079d0:	08007981 	.word	0x08007981
 80079d4:	08007981 	.word	0x08007981
 80079d8:	08007b33 	.word	0x08007b33
 80079dc:	08007981 	.word	0x08007981
 80079e0:	08007a35 	.word	0x08007a35
 80079e4:	08007981 	.word	0x08007981
 80079e8:	08007981 	.word	0x08007981
 80079ec:	08007afb 	.word	0x08007afb
 80079f0:	682b      	ldr	r3, [r5, #0]
 80079f2:	1d1a      	adds	r2, r3, #4
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	602a      	str	r2, [r5, #0]
 80079f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80079fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a00:	2301      	movs	r3, #1
 8007a02:	e0a3      	b.n	8007b4c <_printf_i+0x1f4>
 8007a04:	6820      	ldr	r0, [r4, #0]
 8007a06:	6829      	ldr	r1, [r5, #0]
 8007a08:	0606      	lsls	r6, r0, #24
 8007a0a:	f101 0304 	add.w	r3, r1, #4
 8007a0e:	d50a      	bpl.n	8007a26 <_printf_i+0xce>
 8007a10:	680e      	ldr	r6, [r1, #0]
 8007a12:	602b      	str	r3, [r5, #0]
 8007a14:	2e00      	cmp	r6, #0
 8007a16:	da03      	bge.n	8007a20 <_printf_i+0xc8>
 8007a18:	232d      	movs	r3, #45	; 0x2d
 8007a1a:	4276      	negs	r6, r6
 8007a1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a20:	485e      	ldr	r0, [pc, #376]	; (8007b9c <_printf_i+0x244>)
 8007a22:	230a      	movs	r3, #10
 8007a24:	e019      	b.n	8007a5a <_printf_i+0x102>
 8007a26:	680e      	ldr	r6, [r1, #0]
 8007a28:	602b      	str	r3, [r5, #0]
 8007a2a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007a2e:	bf18      	it	ne
 8007a30:	b236      	sxthne	r6, r6
 8007a32:	e7ef      	b.n	8007a14 <_printf_i+0xbc>
 8007a34:	682b      	ldr	r3, [r5, #0]
 8007a36:	6820      	ldr	r0, [r4, #0]
 8007a38:	1d19      	adds	r1, r3, #4
 8007a3a:	6029      	str	r1, [r5, #0]
 8007a3c:	0601      	lsls	r1, r0, #24
 8007a3e:	d501      	bpl.n	8007a44 <_printf_i+0xec>
 8007a40:	681e      	ldr	r6, [r3, #0]
 8007a42:	e002      	b.n	8007a4a <_printf_i+0xf2>
 8007a44:	0646      	lsls	r6, r0, #25
 8007a46:	d5fb      	bpl.n	8007a40 <_printf_i+0xe8>
 8007a48:	881e      	ldrh	r6, [r3, #0]
 8007a4a:	4854      	ldr	r0, [pc, #336]	; (8007b9c <_printf_i+0x244>)
 8007a4c:	2f6f      	cmp	r7, #111	; 0x6f
 8007a4e:	bf0c      	ite	eq
 8007a50:	2308      	moveq	r3, #8
 8007a52:	230a      	movne	r3, #10
 8007a54:	2100      	movs	r1, #0
 8007a56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007a5a:	6865      	ldr	r5, [r4, #4]
 8007a5c:	60a5      	str	r5, [r4, #8]
 8007a5e:	2d00      	cmp	r5, #0
 8007a60:	bfa2      	ittt	ge
 8007a62:	6821      	ldrge	r1, [r4, #0]
 8007a64:	f021 0104 	bicge.w	r1, r1, #4
 8007a68:	6021      	strge	r1, [r4, #0]
 8007a6a:	b90e      	cbnz	r6, 8007a70 <_printf_i+0x118>
 8007a6c:	2d00      	cmp	r5, #0
 8007a6e:	d04d      	beq.n	8007b0c <_printf_i+0x1b4>
 8007a70:	4615      	mov	r5, r2
 8007a72:	fbb6 f1f3 	udiv	r1, r6, r3
 8007a76:	fb03 6711 	mls	r7, r3, r1, r6
 8007a7a:	5dc7      	ldrb	r7, [r0, r7]
 8007a7c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007a80:	4637      	mov	r7, r6
 8007a82:	42bb      	cmp	r3, r7
 8007a84:	460e      	mov	r6, r1
 8007a86:	d9f4      	bls.n	8007a72 <_printf_i+0x11a>
 8007a88:	2b08      	cmp	r3, #8
 8007a8a:	d10b      	bne.n	8007aa4 <_printf_i+0x14c>
 8007a8c:	6823      	ldr	r3, [r4, #0]
 8007a8e:	07de      	lsls	r6, r3, #31
 8007a90:	d508      	bpl.n	8007aa4 <_printf_i+0x14c>
 8007a92:	6923      	ldr	r3, [r4, #16]
 8007a94:	6861      	ldr	r1, [r4, #4]
 8007a96:	4299      	cmp	r1, r3
 8007a98:	bfde      	ittt	le
 8007a9a:	2330      	movle	r3, #48	; 0x30
 8007a9c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007aa0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007aa4:	1b52      	subs	r2, r2, r5
 8007aa6:	6122      	str	r2, [r4, #16]
 8007aa8:	f8cd a000 	str.w	sl, [sp]
 8007aac:	464b      	mov	r3, r9
 8007aae:	aa03      	add	r2, sp, #12
 8007ab0:	4621      	mov	r1, r4
 8007ab2:	4640      	mov	r0, r8
 8007ab4:	f7ff fee2 	bl	800787c <_printf_common>
 8007ab8:	3001      	adds	r0, #1
 8007aba:	d14c      	bne.n	8007b56 <_printf_i+0x1fe>
 8007abc:	f04f 30ff 	mov.w	r0, #4294967295
 8007ac0:	b004      	add	sp, #16
 8007ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ac6:	4835      	ldr	r0, [pc, #212]	; (8007b9c <_printf_i+0x244>)
 8007ac8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007acc:	6829      	ldr	r1, [r5, #0]
 8007ace:	6823      	ldr	r3, [r4, #0]
 8007ad0:	f851 6b04 	ldr.w	r6, [r1], #4
 8007ad4:	6029      	str	r1, [r5, #0]
 8007ad6:	061d      	lsls	r5, r3, #24
 8007ad8:	d514      	bpl.n	8007b04 <_printf_i+0x1ac>
 8007ada:	07df      	lsls	r7, r3, #31
 8007adc:	bf44      	itt	mi
 8007ade:	f043 0320 	orrmi.w	r3, r3, #32
 8007ae2:	6023      	strmi	r3, [r4, #0]
 8007ae4:	b91e      	cbnz	r6, 8007aee <_printf_i+0x196>
 8007ae6:	6823      	ldr	r3, [r4, #0]
 8007ae8:	f023 0320 	bic.w	r3, r3, #32
 8007aec:	6023      	str	r3, [r4, #0]
 8007aee:	2310      	movs	r3, #16
 8007af0:	e7b0      	b.n	8007a54 <_printf_i+0xfc>
 8007af2:	6823      	ldr	r3, [r4, #0]
 8007af4:	f043 0320 	orr.w	r3, r3, #32
 8007af8:	6023      	str	r3, [r4, #0]
 8007afa:	2378      	movs	r3, #120	; 0x78
 8007afc:	4828      	ldr	r0, [pc, #160]	; (8007ba0 <_printf_i+0x248>)
 8007afe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007b02:	e7e3      	b.n	8007acc <_printf_i+0x174>
 8007b04:	0659      	lsls	r1, r3, #25
 8007b06:	bf48      	it	mi
 8007b08:	b2b6      	uxthmi	r6, r6
 8007b0a:	e7e6      	b.n	8007ada <_printf_i+0x182>
 8007b0c:	4615      	mov	r5, r2
 8007b0e:	e7bb      	b.n	8007a88 <_printf_i+0x130>
 8007b10:	682b      	ldr	r3, [r5, #0]
 8007b12:	6826      	ldr	r6, [r4, #0]
 8007b14:	6961      	ldr	r1, [r4, #20]
 8007b16:	1d18      	adds	r0, r3, #4
 8007b18:	6028      	str	r0, [r5, #0]
 8007b1a:	0635      	lsls	r5, r6, #24
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	d501      	bpl.n	8007b24 <_printf_i+0x1cc>
 8007b20:	6019      	str	r1, [r3, #0]
 8007b22:	e002      	b.n	8007b2a <_printf_i+0x1d2>
 8007b24:	0670      	lsls	r0, r6, #25
 8007b26:	d5fb      	bpl.n	8007b20 <_printf_i+0x1c8>
 8007b28:	8019      	strh	r1, [r3, #0]
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	6123      	str	r3, [r4, #16]
 8007b2e:	4615      	mov	r5, r2
 8007b30:	e7ba      	b.n	8007aa8 <_printf_i+0x150>
 8007b32:	682b      	ldr	r3, [r5, #0]
 8007b34:	1d1a      	adds	r2, r3, #4
 8007b36:	602a      	str	r2, [r5, #0]
 8007b38:	681d      	ldr	r5, [r3, #0]
 8007b3a:	6862      	ldr	r2, [r4, #4]
 8007b3c:	2100      	movs	r1, #0
 8007b3e:	4628      	mov	r0, r5
 8007b40:	f7f8 fb4e 	bl	80001e0 <memchr>
 8007b44:	b108      	cbz	r0, 8007b4a <_printf_i+0x1f2>
 8007b46:	1b40      	subs	r0, r0, r5
 8007b48:	6060      	str	r0, [r4, #4]
 8007b4a:	6863      	ldr	r3, [r4, #4]
 8007b4c:	6123      	str	r3, [r4, #16]
 8007b4e:	2300      	movs	r3, #0
 8007b50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b54:	e7a8      	b.n	8007aa8 <_printf_i+0x150>
 8007b56:	6923      	ldr	r3, [r4, #16]
 8007b58:	462a      	mov	r2, r5
 8007b5a:	4649      	mov	r1, r9
 8007b5c:	4640      	mov	r0, r8
 8007b5e:	47d0      	blx	sl
 8007b60:	3001      	adds	r0, #1
 8007b62:	d0ab      	beq.n	8007abc <_printf_i+0x164>
 8007b64:	6823      	ldr	r3, [r4, #0]
 8007b66:	079b      	lsls	r3, r3, #30
 8007b68:	d413      	bmi.n	8007b92 <_printf_i+0x23a>
 8007b6a:	68e0      	ldr	r0, [r4, #12]
 8007b6c:	9b03      	ldr	r3, [sp, #12]
 8007b6e:	4298      	cmp	r0, r3
 8007b70:	bfb8      	it	lt
 8007b72:	4618      	movlt	r0, r3
 8007b74:	e7a4      	b.n	8007ac0 <_printf_i+0x168>
 8007b76:	2301      	movs	r3, #1
 8007b78:	4632      	mov	r2, r6
 8007b7a:	4649      	mov	r1, r9
 8007b7c:	4640      	mov	r0, r8
 8007b7e:	47d0      	blx	sl
 8007b80:	3001      	adds	r0, #1
 8007b82:	d09b      	beq.n	8007abc <_printf_i+0x164>
 8007b84:	3501      	adds	r5, #1
 8007b86:	68e3      	ldr	r3, [r4, #12]
 8007b88:	9903      	ldr	r1, [sp, #12]
 8007b8a:	1a5b      	subs	r3, r3, r1
 8007b8c:	42ab      	cmp	r3, r5
 8007b8e:	dcf2      	bgt.n	8007b76 <_printf_i+0x21e>
 8007b90:	e7eb      	b.n	8007b6a <_printf_i+0x212>
 8007b92:	2500      	movs	r5, #0
 8007b94:	f104 0619 	add.w	r6, r4, #25
 8007b98:	e7f5      	b.n	8007b86 <_printf_i+0x22e>
 8007b9a:	bf00      	nop
 8007b9c:	08008685 	.word	0x08008685
 8007ba0:	08008696 	.word	0x08008696

08007ba4 <_read_r>:
 8007ba4:	b538      	push	{r3, r4, r5, lr}
 8007ba6:	4d07      	ldr	r5, [pc, #28]	; (8007bc4 <_read_r+0x20>)
 8007ba8:	4604      	mov	r4, r0
 8007baa:	4608      	mov	r0, r1
 8007bac:	4611      	mov	r1, r2
 8007bae:	2200      	movs	r2, #0
 8007bb0:	602a      	str	r2, [r5, #0]
 8007bb2:	461a      	mov	r2, r3
 8007bb4:	f7f9 fc10 	bl	80013d8 <_read>
 8007bb8:	1c43      	adds	r3, r0, #1
 8007bba:	d102      	bne.n	8007bc2 <_read_r+0x1e>
 8007bbc:	682b      	ldr	r3, [r5, #0]
 8007bbe:	b103      	cbz	r3, 8007bc2 <_read_r+0x1e>
 8007bc0:	6023      	str	r3, [r4, #0]
 8007bc2:	bd38      	pop	{r3, r4, r5, pc}
 8007bc4:	200053d8 	.word	0x200053d8

08007bc8 <_fstat_r>:
 8007bc8:	b538      	push	{r3, r4, r5, lr}
 8007bca:	4d07      	ldr	r5, [pc, #28]	; (8007be8 <_fstat_r+0x20>)
 8007bcc:	2300      	movs	r3, #0
 8007bce:	4604      	mov	r4, r0
 8007bd0:	4608      	mov	r0, r1
 8007bd2:	4611      	mov	r1, r2
 8007bd4:	602b      	str	r3, [r5, #0]
 8007bd6:	f7f9 fc44 	bl	8001462 <_fstat>
 8007bda:	1c43      	adds	r3, r0, #1
 8007bdc:	d102      	bne.n	8007be4 <_fstat_r+0x1c>
 8007bde:	682b      	ldr	r3, [r5, #0]
 8007be0:	b103      	cbz	r3, 8007be4 <_fstat_r+0x1c>
 8007be2:	6023      	str	r3, [r4, #0]
 8007be4:	bd38      	pop	{r3, r4, r5, pc}
 8007be6:	bf00      	nop
 8007be8:	200053d8 	.word	0x200053d8

08007bec <_isatty_r>:
 8007bec:	b538      	push	{r3, r4, r5, lr}
 8007bee:	4d06      	ldr	r5, [pc, #24]	; (8007c08 <_isatty_r+0x1c>)
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	4604      	mov	r4, r0
 8007bf4:	4608      	mov	r0, r1
 8007bf6:	602b      	str	r3, [r5, #0]
 8007bf8:	f7f9 fc43 	bl	8001482 <_isatty>
 8007bfc:	1c43      	adds	r3, r0, #1
 8007bfe:	d102      	bne.n	8007c06 <_isatty_r+0x1a>
 8007c00:	682b      	ldr	r3, [r5, #0]
 8007c02:	b103      	cbz	r3, 8007c06 <_isatty_r+0x1a>
 8007c04:	6023      	str	r3, [r4, #0]
 8007c06:	bd38      	pop	{r3, r4, r5, pc}
 8007c08:	200053d8 	.word	0x200053d8

08007c0c <memmove>:
 8007c0c:	4288      	cmp	r0, r1
 8007c0e:	b510      	push	{r4, lr}
 8007c10:	eb01 0402 	add.w	r4, r1, r2
 8007c14:	d902      	bls.n	8007c1c <memmove+0x10>
 8007c16:	4284      	cmp	r4, r0
 8007c18:	4623      	mov	r3, r4
 8007c1a:	d807      	bhi.n	8007c2c <memmove+0x20>
 8007c1c:	1e43      	subs	r3, r0, #1
 8007c1e:	42a1      	cmp	r1, r4
 8007c20:	d008      	beq.n	8007c34 <memmove+0x28>
 8007c22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007c2a:	e7f8      	b.n	8007c1e <memmove+0x12>
 8007c2c:	4402      	add	r2, r0
 8007c2e:	4601      	mov	r1, r0
 8007c30:	428a      	cmp	r2, r1
 8007c32:	d100      	bne.n	8007c36 <memmove+0x2a>
 8007c34:	bd10      	pop	{r4, pc}
 8007c36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007c3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007c3e:	e7f7      	b.n	8007c30 <memmove+0x24>

08007c40 <_realloc_r>:
 8007c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c44:	4680      	mov	r8, r0
 8007c46:	4614      	mov	r4, r2
 8007c48:	460e      	mov	r6, r1
 8007c4a:	b921      	cbnz	r1, 8007c56 <_realloc_r+0x16>
 8007c4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c50:	4611      	mov	r1, r2
 8007c52:	f7fe bef5 	b.w	8006a40 <_malloc_r>
 8007c56:	b92a      	cbnz	r2, 8007c64 <_realloc_r+0x24>
 8007c58:	f7ff fb0e 	bl	8007278 <_free_r>
 8007c5c:	4625      	mov	r5, r4
 8007c5e:	4628      	mov	r0, r5
 8007c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c64:	f000 f81b 	bl	8007c9e <_malloc_usable_size_r>
 8007c68:	4284      	cmp	r4, r0
 8007c6a:	4607      	mov	r7, r0
 8007c6c:	d802      	bhi.n	8007c74 <_realloc_r+0x34>
 8007c6e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007c72:	d812      	bhi.n	8007c9a <_realloc_r+0x5a>
 8007c74:	4621      	mov	r1, r4
 8007c76:	4640      	mov	r0, r8
 8007c78:	f7fe fee2 	bl	8006a40 <_malloc_r>
 8007c7c:	4605      	mov	r5, r0
 8007c7e:	2800      	cmp	r0, #0
 8007c80:	d0ed      	beq.n	8007c5e <_realloc_r+0x1e>
 8007c82:	42bc      	cmp	r4, r7
 8007c84:	4622      	mov	r2, r4
 8007c86:	4631      	mov	r1, r6
 8007c88:	bf28      	it	cs
 8007c8a:	463a      	movcs	r2, r7
 8007c8c:	f7fe fea1 	bl	80069d2 <memcpy>
 8007c90:	4631      	mov	r1, r6
 8007c92:	4640      	mov	r0, r8
 8007c94:	f7ff faf0 	bl	8007278 <_free_r>
 8007c98:	e7e1      	b.n	8007c5e <_realloc_r+0x1e>
 8007c9a:	4635      	mov	r5, r6
 8007c9c:	e7df      	b.n	8007c5e <_realloc_r+0x1e>

08007c9e <_malloc_usable_size_r>:
 8007c9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ca2:	1f18      	subs	r0, r3, #4
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	bfbc      	itt	lt
 8007ca8:	580b      	ldrlt	r3, [r1, r0]
 8007caa:	18c0      	addlt	r0, r0, r3
 8007cac:	4770      	bx	lr
	...

08007cb0 <_init>:
 8007cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cb2:	bf00      	nop
 8007cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cb6:	bc08      	pop	{r3}
 8007cb8:	469e      	mov	lr, r3
 8007cba:	4770      	bx	lr

08007cbc <_fini>:
 8007cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cbe:	bf00      	nop
 8007cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cc2:	bc08      	pop	{r3}
 8007cc4:	469e      	mov	lr, r3
 8007cc6:	4770      	bx	lr
